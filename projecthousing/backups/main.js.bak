import 'ol/ol.css';
import Draw from 'ol/interaction/Draw';
import Map from 'ol/Map';
import Overlay from 'ol/Overlay';
import View from 'ol/View';
import {Circle as CircleStyle, Fill, Stroke, Style} from 'ol/style';
import {LineString, Polygon} from 'ol/geom';
import {OSM, Vector as VectorSource, ImageWMS} from 'ol/source';
import {Tile as TileLayer, Vector as VectorLayer, Image} from 'ol/layer';
import {getArea, getLength} from 'ol/sphere';
import {unByKey} from 'ol/Observable';
import {Control, defaults, ScaleLine, MousePosition, ZoomToExtent} from 'ol/control';
import * as olCoordinate from 'ol/coordinate';
import {transform} from 'ol/proj';

var measuring = 0;

class MeasureButton extends Control {
    /**
    * @param {Object} [opt_options] Control options.
    */
    constructor(opt_options) {
        const options = opt_options || {};

        const button = document.createElement('button');
        button.innerHTML = 'M';

        const element = document.createElement('div');
        element.className = 'measure ol-unselectable ol-control';
        element.appendChild(button);

        super({
            element: element,
            target: options.target,
        });

        button.addEventListener('click', this.enableMeasuring.bind(this), false);
    }

    enableMeasuring() {
        if (measuring == 0) {
            alert('measuring tool enabled');
            measuring = 1;

        } else {
            alert('measuring tool disabled');
            measuring = 0;

        }
    }
};

const raster = new TileLayer({
  source: new OSM(),
});

const source = new VectorSource();

const vector = new VectorLayer({
  source: source,
  style: new Style({
    fill: new Fill({
      color: 'rgba(255, 255, 255, 0.2)',
    }),
    stroke: new Stroke({
      color: '#ffcc33',
      width: 2,
    }),
    image: new CircleStyle({
      radius: 7,
      fill: new Fill({
        color: '#ffcc33',
      }),
    }),
  }),
});


/**
 * Currently drawn feature.
 * @type {import("../src/ol/Feature.js").default}
 */
let sketch;

/**
 * The help tooltip element.
 * @type {HTMLElement}
 */
let helpTooltipElement;

/**
 * Overlay to show the help messages.
 * @type {Overlay}
 */
let helpTooltip;

/**
 * The measure tooltip element.
 * @type {HTMLElement}
 */
let measureTooltipElement;

/**
 * Overlay to show the measurement.
 * @type {Overlay}
 */
let measureTooltip;

/**
 * Message to show when the user is drawing a polygon.
 * @type {string}
 */
const continuePolygonMsg = 'Click to continue drawing the polygon';

/**
 * Message to show when the user is drawing a line.
 * @type {string}
 */
const continueLineMsg = 'Click to continue drawing the line';

/**
 * Handle pointer move.
 * @param {import("../src/ol/MapBrowserEvent").default} evt The event.
 */
const pointerMoveHandler = function (evt) {
  if (evt.dragging) {
    return;
  }
  /** @type {string} */
  let helpMsg = 'Click to start drawing';

  if (sketch) {
    const geom = sketch.getGeometry();
    if (geom instanceof Polygon) {
      helpMsg = continuePolygonMsg;
    } else if (geom instanceof LineString) {
      helpMsg = continueLineMsg;
    }
  }

  helpTooltipElement.innerHTML = helpMsg;
  helpTooltip.setPosition(evt.coordinate);

  helpTooltipElement.classList.remove('hidden');
};


/* ----- map definition ------- */


var wmsSource = new ImageWMS({
    url: 'https://geoserver.gis.lu.se/geoserver/wms',
    params: {
    'LAYERS': 'salvazin_dummy_data' // ,salvazin_landmarks
    },
    serverType: 'geoserver'
});

//OpenStreetMap background + layers handling

var salvazin = new Image({source: wmsSource});

var layers = {};
var layersCount = 1;
layers['salvazin' + layersCount] = salvazin;


const map = new Map({
  controls: defaults().extend([ // {attributionOptions:({collapsible: false})}

        //Control for displaying a scale line
        new ScaleLine({
            target: document.getElementById('scale-line')
        }),

        //Extra functionality of the map
        //Control for displaying coordinates
        new MousePosition({
            coordinateFormat: olCoordinate.createStringXY(4),
            projection: 'EPSG:4326'
        }),
        new ZoomToExtent({
            extent: transform([13.199195, 55.70331], 'EPSG:4326', 'EPSG:3857')
        }),

        new MeasureButton()

    ]),
  layers: [raster, vector, layers['salvazin' + layersCount]],
  target: 'map',
  view: new View({
    center: transform([13.199195, 55.70331], 'EPSG:4326', 'EPSG:3857'), zoom: 13})
});

map.on('pointermove', pointerMoveHandler);

map.getViewport().addEventListener('mouseout', function () {
  helpTooltipElement.classList.add('hidden');
});

const typeSelect = document.getElementById('type');

let draw; // global so we can remove it later

/**
 * Format length output.
 * @param {LineString} line The line.
 * @return {string} The formatted length.
 */
const formatLength = function (line) {
  const length = getLength(line);
  let output;
  if (length > 100) {
    output = Math.round((length / 1000) * 100) / 100 + ' ' + 'km';
  } else {
    output = Math.round(length * 100) / 100 + ' ' + 'm';
  }
  return output;
};

/**
 * Format area output.
 * @param {Polygon} polygon The polygon.
 * @return {string} Formatted area.
 */
const formatArea = function (polygon) {
  const area = getArea(polygon);
  let output;
  if (area > 10000) {
    output = Math.round((area / 1000000) * 100) / 100 + ' ' + 'km<sup>2</sup>';
  } else {
    output = Math.round(area * 100) / 100 + ' ' + 'm<sup>2</sup>';
  }
  return output;
};

function addInteraction() {
  const type = typeSelect.value == 'area' ? 'Polygon' : 'LineString';
  draw = new Draw({
    source: source,
    type: type,
    style: new Style({
      fill: new Fill({
        color: 'rgba(255, 255, 255, 0.2)',
      }),
      stroke: new Stroke({
        color: 'rgba(0, 0, 0, 0.5)',
        lineDash: [10, 10],
        width: 2,
      }),
      image: new CircleStyle({
        radius: 5,
        stroke: new Stroke({
          color: 'rgba(0, 0, 0, 0.7)',
        }),
        fill: new Fill({
          color: 'rgba(255, 255, 255, 0.2)',
        }),
      }),
    }),
  });
  map.addInteraction(draw);

  createMeasureTooltip();
  createHelpTooltip();

  let listener;
  draw.on('drawstart', function (evt) {
    // set sketch
    sketch = evt.feature;

    /** @type {import("../src/ol/coordinate.js").Coordinate|undefined} */
    let tooltipCoord = evt.coordinate;

    listener = sketch.getGeometry().on('change', function (evt) {
      const geom = evt.target;
      let output;
      if (geom instanceof Polygon) {
        output = formatArea(geom);
        tooltipCoord = geom.getInteriorPoint().getCoordinates();
      } else if (geom instanceof LineString) {
        output = formatLength(geom);
        tooltipCoord = geom.getLastCoordinate();
      }
      measureTooltipElement.innerHTML = output;
      measureTooltip.setPosition(tooltipCoord);
    });
  });

  draw.on('drawend', function () {
    measureTooltipElement.className = 'ol-tooltip ol-tooltip-static';
    measureTooltip.setOffset([0, -7]);
    // unset sketch
    sketch = null;
    // unset tooltip so that a new one can be created
    measureTooltipElement = null;
    createMeasureTooltip();
    unByKey(listener);
  });
}

/**
 * Creates a new help tooltip
 */
function createHelpTooltip() {
  if (helpTooltipElement) {
    helpTooltipElement.parentNode.removeChild(helpTooltipElement);
  }
  helpTooltipElement = document.createElement('div');
  helpTooltipElement.className = 'ol-tooltip hidden';
  helpTooltip = new Overlay({
    element: helpTooltipElement,
    offset: [15, 0],
    positioning: 'center-left',
  });
  map.addOverlay(helpTooltip);
}

/**
 * Creates a new measure tooltip
 */
function createMeasureTooltip() {
  if (measureTooltipElement) {
    measureTooltipElement.parentNode.removeChild(measureTooltipElement);
  }
  measureTooltipElement = document.createElement('div');
  measureTooltipElement.className = 'ol-tooltip ol-tooltip-measure';
  measureTooltip = new Overlay({
    element: measureTooltipElement,
    offset: [0, -15],
    positioning: 'bottom-center',
    stopEvent: false,
    insertFirst: false,
  });
  map.addOverlay(measureTooltip);
}

/**
 * Let user change the geometry type.
 */
typeSelect.onchange = function () {
  map.removeInteraction(draw);
  addInteraction();
};

addInteraction();


/* ---- housing ----- */

function fillInfoPanel(props) {
    var infoPanel = document.getElementById('infoContent');
    var content = '';
    var listItems = '';
    for (var prop in props) {
        // skip loop if the property is from prototype
        if (!props.hasOwnProperty(prop)) continue;
        if (prop != 'bbox') {
        listItems += '<li>' + '<b>' + prop + "</b>: " + props[prop] + '</li>';
        }
    }
    content = '<ul>' + listItems + '</ul>';
    infoPanel.innerHTML = content;
    }

// Toggles the info panel overlaying the map

function toggleInfo() {
    var checkBox = document.getElementById('infoToggle');
    var checked = checkBox.checked;
    var display = ''
    if (checked) {
        display = 'block'
    } else {
        display = 'none'
    }
    document.getElementById('info').style.display = display
}
function toggleFilters() {
    var checkBox = document.getElementById('filtersToggle');
    var checked = checkBox.checked;
    var display = ''
    if (checked) {
        display = 'block'
    } else {
        display = 'none'
    }
    document.getElementById('filters').style.display = display
}

// Filters handling
// docs: https://docs.geoserver.org/stable/en/user/styling/sld/reference/filters.html

$("#filtersForm").change("change paste keyup", function() {
    map.removeLayer(layers['salvazin' + layersCount]);

    var filters = '';
    if (document.filtersForm.rentMax.value != '') {
        filters += '<PropertyIsLessThan><PropertyName>rent</PropertyName><Literal>' + document.filtersForm.rentMax.value + '</Literal></PropertyIsLessThan>'
    };

    if (document.filtersForm.rentMin.value != '') {
        filters += '<PropertyIsGreaterThan><PropertyName>rent</PropertyName><Literal>' + document.filtersForm.rentMin.value + '</Literal></PropertyIsGreaterThan>'
    };

    if (document.filtersForm.userRank.value != '') {
        filters += '<PropertyIsLessThan><PropertyName>rank</PropertyName><Literal>' + document.filtersForm.userRank.value + '</Literal></PropertyIsLessThan>'
    };

    trailer = document.getElementById('trailer').checked;
    house = document.getElementById('house').checked;
    apartment = document.getElementById('apartment').checked;

    if(!trailer){
        filters += '<PropertyIsNotEqualTo><PropertyName>type</PropertyName><Literal>trailer</Literal></PropertyIsNotEqualTo>'
    }
    if(!house){
        filters += '<PropertyIsNotEqualTo><PropertyName>type</PropertyName><Literal>house</Literal></PropertyIsNotEqualTo>'
    }
    if(!apartment){
        filters += '<PropertyIsNotEqualTo><PropertyName>type</PropertyName><Literal>apartment</Literal></PropertyIsNotEqualTo>'
    }

    var wmsSource = new ol.source.ImageWMS({
        url: 'https://geoserver.gis.lu.se/geoserver/wms',
        params: {
        'LAYERS': 'salvazin_dummy_data', // ,salvazin_landmarks
        'FILTER': '(<Filter><And>' + filters + '</And></Filter>)()'
        },
        serverType: 'geoserver'
    });

    var salvazin = new ol.layer.Image({source: wmsSource});
    layersCount += 1;
    layers['salvazin' + layersCount] = salvazin;
    map.addLayer(layers['salvazin' + layersCount]);
});

$("#Clear").click( function() {
    document.getElementById("trailer").checked = true;
    document.getElementById("house").checked = true;
    document.getElementById("apartment").checked = true;
    document.filtersForm.rentMax.value = '';
    document.filtersForm.rentMin.value = '';
    document.filtersForm.userRank.value = '';

    map.removeLayer(layers['salvazin' + layersCount]);

    var wmsSource = new ol.source.ImageWMS({
        url: 'https://geoserver.gis.lu.se/geoserver/wms',
        params: {
        'LAYERS': 'salvazin_dummy_data' // ,salvazin_landmarks
        },
        serverType: 'geoserver'
    });

    var salvazin = new ol.layer.Image({source: wmsSource});
    layersCount += 1;
    layers['salvazin' + layersCount] = salvazin;
    map.addLayer(layers['salvazin' + layersCount]);
});
