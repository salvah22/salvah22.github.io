import {
  Geometry_default
} from "./chunk-PTILDF6P.js";
import {
  GeometryType_default
} from "./chunk-IE72MASW.js";
import {
  EventType_default,
  listen,
  unlistenByKey
} from "./chunk-XYO5KJKP.js";
import {
  closestSquaredDistanceXY,
  createOrUpdateEmpty,
  extend,
  getCenter
} from "./chunk-V7OLV3U6.js";

// node_modules/ol/geom/GeometryCollection.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GeometryCollection = function(_super) {
  __extends(GeometryCollection2, _super);
  function GeometryCollection2(opt_geometries) {
    var _this = _super.call(this) || this;
    _this.geometries_ = opt_geometries ? opt_geometries : null;
    _this.changeEventsKeys_ = [];
    _this.listenGeometriesChange_();
    return _this;
  }
  GeometryCollection2.prototype.unlistenGeometriesChange_ = function() {
    this.changeEventsKeys_.forEach(unlistenByKey);
    this.changeEventsKeys_.length = 0;
  };
  GeometryCollection2.prototype.listenGeometriesChange_ = function() {
    if (!this.geometries_) {
      return;
    }
    for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {
      this.changeEventsKeys_.push(listen(this.geometries_[i], EventType_default.CHANGE, this.changed, this));
    }
  };
  GeometryCollection2.prototype.clone = function() {
    var geometryCollection = new GeometryCollection2(null);
    geometryCollection.setGeometries(this.geometries_);
    geometryCollection.applyProperties(this);
    return geometryCollection;
  };
  GeometryCollection2.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
      return minSquaredDistance;
    }
    var geometries = this.geometries_;
    for (var i = 0, ii = geometries.length; i < ii; ++i) {
      minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);
    }
    return minSquaredDistance;
  };
  GeometryCollection2.prototype.containsXY = function(x, y) {
    var geometries = this.geometries_;
    for (var i = 0, ii = geometries.length; i < ii; ++i) {
      if (geometries[i].containsXY(x, y)) {
        return true;
      }
    }
    return false;
  };
  GeometryCollection2.prototype.computeExtent = function(extent) {
    createOrUpdateEmpty(extent);
    var geometries = this.geometries_;
    for (var i = 0, ii = geometries.length; i < ii; ++i) {
      extend(extent, geometries[i].getExtent());
    }
    return extent;
  };
  GeometryCollection2.prototype.getGeometries = function() {
    return cloneGeometries(this.geometries_);
  };
  GeometryCollection2.prototype.getGeometriesArray = function() {
    return this.geometries_;
  };
  GeometryCollection2.prototype.getGeometriesArrayRecursive = function() {
    var geometriesArray = [];
    var geometries = this.geometries_;
    for (var i = 0, ii = geometries.length; i < ii; ++i) {
      if (geometries[i].getType() === this.getType()) {
        geometriesArray = geometriesArray.concat(geometries[i].getGeometriesArrayRecursive());
      } else {
        geometriesArray.push(geometries[i]);
      }
    }
    return geometriesArray;
  };
  GeometryCollection2.prototype.getSimplifiedGeometry = function(squaredTolerance) {
    if (this.simplifiedGeometryRevision !== this.getRevision()) {
      this.simplifiedGeometryMaxMinSquaredTolerance = 0;
      this.simplifiedGeometryRevision = this.getRevision();
    }
    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) {
      return this;
    }
    var simplifiedGeometries = [];
    var geometries = this.geometries_;
    var simplified = false;
    for (var i = 0, ii = geometries.length; i < ii; ++i) {
      var geometry = geometries[i];
      var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
      simplifiedGeometries.push(simplifiedGeometry);
      if (simplifiedGeometry !== geometry) {
        simplified = true;
      }
    }
    if (simplified) {
      var simplifiedGeometryCollection = new GeometryCollection2(null);
      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);
      return simplifiedGeometryCollection;
    } else {
      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
      return this;
    }
  };
  GeometryCollection2.prototype.getType = function() {
    return GeometryType_default.GEOMETRY_COLLECTION;
  };
  GeometryCollection2.prototype.intersectsExtent = function(extent) {
    var geometries = this.geometries_;
    for (var i = 0, ii = geometries.length; i < ii; ++i) {
      if (geometries[i].intersectsExtent(extent)) {
        return true;
      }
    }
    return false;
  };
  GeometryCollection2.prototype.isEmpty = function() {
    return this.geometries_.length === 0;
  };
  GeometryCollection2.prototype.rotate = function(angle, anchor) {
    var geometries = this.geometries_;
    for (var i = 0, ii = geometries.length; i < ii; ++i) {
      geometries[i].rotate(angle, anchor);
    }
    this.changed();
  };
  GeometryCollection2.prototype.scale = function(sx, opt_sy, opt_anchor) {
    var anchor = opt_anchor;
    if (!anchor) {
      anchor = getCenter(this.getExtent());
    }
    var geometries = this.geometries_;
    for (var i = 0, ii = geometries.length; i < ii; ++i) {
      geometries[i].scale(sx, opt_sy, anchor);
    }
    this.changed();
  };
  GeometryCollection2.prototype.setGeometries = function(geometries) {
    this.setGeometriesArray(cloneGeometries(geometries));
  };
  GeometryCollection2.prototype.setGeometriesArray = function(geometries) {
    this.unlistenGeometriesChange_();
    this.geometries_ = geometries;
    this.listenGeometriesChange_();
    this.changed();
  };
  GeometryCollection2.prototype.applyTransform = function(transformFn) {
    var geometries = this.geometries_;
    for (var i = 0, ii = geometries.length; i < ii; ++i) {
      geometries[i].applyTransform(transformFn);
    }
    this.changed();
  };
  GeometryCollection2.prototype.translate = function(deltaX, deltaY) {
    var geometries = this.geometries_;
    for (var i = 0, ii = geometries.length; i < ii; ++i) {
      geometries[i].translate(deltaX, deltaY);
    }
    this.changed();
  };
  GeometryCollection2.prototype.disposeInternal = function() {
    this.unlistenGeometriesChange_();
    _super.prototype.disposeInternal.call(this);
  };
  return GeometryCollection2;
}(Geometry_default);
function cloneGeometries(geometries) {
  var clonedGeometries = [];
  for (var i = 0, ii = geometries.length; i < ii; ++i) {
    clonedGeometries.push(geometries[i].clone());
  }
  return clonedGeometries;
}
var GeometryCollection_default = GeometryCollection;

export {
  GeometryCollection_default
};
//# sourceMappingURL=chunk-YOSFIXGS.js.map
