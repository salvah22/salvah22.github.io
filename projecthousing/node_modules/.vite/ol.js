import {
  Graticule_default
} from "./chunk-IWF4XCTP.js";
import {
  ImageCanvas_default,
  VectorRenderTile_default,
  VectorTile_default
} from "./chunk-WOA466RL.js";
import {
  ImageTile_default,
  TileCache_default,
  Tile_default
} from "./chunk-NJKL6WNU.js";
import {
  TileRange_default
} from "./chunk-3PBZTSJN.js";
import {
  Kinetic_default,
  Map_default
} from "./chunk-RLP4K64Q.js";
import {
  MapBrowserEventHandler_default,
  PluggableMap_default
} from "./chunk-46ASI6H2.js";
import {
  TileQueue_default
} from "./chunk-JEWKH23N.js";
import "./chunk-HED2RAPS.js";
import "./chunk-4CXVAAGP.js";
import "./chunk-IL2XPOAU.js";
import {
  Feature_default
} from "./chunk-R2N4A362.js";
import "./chunk-ZFBLI5RQ.js";
import "./chunk-WSGYOD7F.js";
import {
  MapBrowserEvent_default,
  MapEvent_default
} from "./chunk-3TVUQNJJ.js";
import {
  Collection_default
} from "./chunk-MXUD2ERE.js";
import "./chunk-UP4W2OAM.js";
import "./chunk-WY5HO4B4.js";
import {
  Overlay_default
} from "./chunk-L77GDW77.js";
import {
  View_default
} from "./chunk-RZ2NCIHA.js";
import "./chunk-B652NQ5D.js";
import {
  circular
} from "./chunk-UQPP32EF.js";
import "./chunk-ASMMZL4F.js";
import "./chunk-PTILDF6P.js";
import "./chunk-PFTE5SWF.js";
import "./chunk-JTYCLD24.js";
import {
  get,
  getTransformFromProjections,
  identityTransform
} from "./chunk-JXQAEIDL.js";
import "./chunk-EICDL4AO.js";
import "./chunk-LHS2CK4K.js";
import "./chunk-YBMBQTVC.js";
import {
  ImageBase_default,
  Image_default
} from "./chunk-5VKD2OW7.js";
import "./chunk-BH46YA6A.js";
import "./chunk-SXNOEVN6.js";
import "./chunk-RV5QOKWV.js";
import "./chunk-DZUBOF3Z.js";
import "./chunk-R7IGQKZX.js";
import "./chunk-IE72MASW.js";
import {
  toRadians
} from "./chunk-LZTVAMAD.js";
import {
  Object_default
} from "./chunk-KYXP4QQS.js";
import {
  Disposable_default,
  EventType_default,
  Event_default,
  Observable_default
} from "./chunk-XYO5KJKP.js";
import "./chunk-WONFBMYW.js";
import {
  AssertionError_default,
  VERSION,
  getUid
} from "./chunk-V7OLV3U6.js";
import "./chunk-RITGDPBK.js";

// node_modules/ol/Geolocation.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Property = {
  ACCURACY: "accuracy",
  ACCURACY_GEOMETRY: "accuracyGeometry",
  ALTITUDE: "altitude",
  ALTITUDE_ACCURACY: "altitudeAccuracy",
  HEADING: "heading",
  POSITION: "position",
  PROJECTION: "projection",
  SPEED: "speed",
  TRACKING: "tracking",
  TRACKING_OPTIONS: "trackingOptions"
};
var GeolocationError = function(_super) {
  __extends(GeolocationError2, _super);
  function GeolocationError2(error) {
    var _this = _super.call(this, EventType_default.ERROR) || this;
    _this.code = error.code;
    _this.message = error.message;
    return _this;
  }
  return GeolocationError2;
}(Event_default);
var Geolocation = function(_super) {
  __extends(Geolocation2, _super);
  function Geolocation2(opt_options) {
    var _this = _super.call(this) || this;
    _this.on;
    _this.once;
    _this.un;
    var options = opt_options || {};
    _this.position_ = null;
    _this.transform_ = identityTransform;
    _this.watchId_ = void 0;
    _this.addChangeListener(Property.PROJECTION, _this.handleProjectionChanged_);
    _this.addChangeListener(Property.TRACKING, _this.handleTrackingChanged_);
    if (options.projection !== void 0) {
      _this.setProjection(options.projection);
    }
    if (options.trackingOptions !== void 0) {
      _this.setTrackingOptions(options.trackingOptions);
    }
    _this.setTracking(options.tracking !== void 0 ? options.tracking : false);
    return _this;
  }
  Geolocation2.prototype.disposeInternal = function() {
    this.setTracking(false);
    _super.prototype.disposeInternal.call(this);
  };
  Geolocation2.prototype.handleProjectionChanged_ = function() {
    var projection = this.getProjection();
    if (projection) {
      this.transform_ = getTransformFromProjections(get("EPSG:4326"), projection);
      if (this.position_) {
        this.set(Property.POSITION, this.transform_(this.position_));
      }
    }
  };
  Geolocation2.prototype.handleTrackingChanged_ = function() {
    if ("geolocation" in navigator) {
      var tracking = this.getTracking();
      if (tracking && this.watchId_ === void 0) {
        this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());
      } else if (!tracking && this.watchId_ !== void 0) {
        navigator.geolocation.clearWatch(this.watchId_);
        this.watchId_ = void 0;
      }
    }
  };
  Geolocation2.prototype.positionChange_ = function(position) {
    var coords = position.coords;
    this.set(Property.ACCURACY, coords.accuracy);
    this.set(Property.ALTITUDE, coords.altitude === null ? void 0 : coords.altitude);
    this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? void 0 : coords.altitudeAccuracy);
    this.set(Property.HEADING, coords.heading === null ? void 0 : toRadians(coords.heading));
    if (!this.position_) {
      this.position_ = [coords.longitude, coords.latitude];
    } else {
      this.position_[0] = coords.longitude;
      this.position_[1] = coords.latitude;
    }
    var projectedPosition = this.transform_(this.position_);
    this.set(Property.POSITION, projectedPosition);
    this.set(Property.SPEED, coords.speed === null ? void 0 : coords.speed);
    var geometry = circular(this.position_, coords.accuracy);
    geometry.applyTransform(this.transform_);
    this.set(Property.ACCURACY_GEOMETRY, geometry);
    this.changed();
  };
  Geolocation2.prototype.positionError_ = function(error) {
    this.dispatchEvent(new GeolocationError(error));
  };
  Geolocation2.prototype.getAccuracy = function() {
    return this.get(Property.ACCURACY);
  };
  Geolocation2.prototype.getAccuracyGeometry = function() {
    return this.get(Property.ACCURACY_GEOMETRY) || null;
  };
  Geolocation2.prototype.getAltitude = function() {
    return this.get(Property.ALTITUDE);
  };
  Geolocation2.prototype.getAltitudeAccuracy = function() {
    return this.get(Property.ALTITUDE_ACCURACY);
  };
  Geolocation2.prototype.getHeading = function() {
    return this.get(Property.HEADING);
  };
  Geolocation2.prototype.getPosition = function() {
    return this.get(Property.POSITION);
  };
  Geolocation2.prototype.getProjection = function() {
    return this.get(Property.PROJECTION);
  };
  Geolocation2.prototype.getSpeed = function() {
    return this.get(Property.SPEED);
  };
  Geolocation2.prototype.getTracking = function() {
    return this.get(Property.TRACKING);
  };
  Geolocation2.prototype.getTrackingOptions = function() {
    return this.get(Property.TRACKING_OPTIONS);
  };
  Geolocation2.prototype.setProjection = function(projection) {
    this.set(Property.PROJECTION, get(projection));
  };
  Geolocation2.prototype.setTracking = function(tracking) {
    this.set(Property.TRACKING, tracking);
  };
  Geolocation2.prototype.setTrackingOptions = function(options) {
    this.set(Property.TRACKING_OPTIONS, options);
  };
  return Geolocation2;
}(Object_default);
var Geolocation_default = Geolocation;
export {
  AssertionError_default as AssertionError,
  Collection_default as Collection,
  Disposable_default as Disposable,
  Feature_default as Feature,
  Geolocation_default as Geolocation,
  Graticule_default as Graticule,
  Image_default as Image,
  ImageBase_default as ImageBase,
  ImageCanvas_default as ImageCanvas,
  ImageTile_default as ImageTile,
  Kinetic_default as Kinetic,
  Map_default as Map,
  MapBrowserEvent_default as MapBrowserEvent,
  MapBrowserEventHandler_default as MapBrowserEventHandler,
  MapEvent_default as MapEvent,
  Object_default as Object,
  Observable_default as Observable,
  Overlay_default as Overlay,
  PluggableMap_default as PluggableMap,
  Tile_default as Tile,
  TileCache_default as TileCache,
  TileQueue_default as TileQueue,
  TileRange_default as TileRange,
  VERSION,
  VectorRenderTile_default as VectorRenderTile,
  VectorTile_default as VectorTile,
  View_default as View,
  getUid
};
//# sourceMappingURL=ol.js.map
