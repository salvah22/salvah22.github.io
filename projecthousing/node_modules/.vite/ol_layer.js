import {
  GeometryCollection_default
} from "./chunk-YOSFIXGS.js";
import {
  ImageLayer_default,
  Image_default,
  TileJSON_default,
  VectorTile_default
} from "./chunk-WPVEXRRC.js";
import {
  Graticule_default
} from "./chunk-IWF4XCTP.js";
import {
  ImageCanvas_default
} from "./chunk-WOA466RL.js";
import {
  BaseTile_default,
  TileLayer_default,
  TileProperty_default,
  Tile_default
} from "./chunk-NW7TRGHZ.js";
import {
  TileGrid_default
} from "./chunk-4KX2Z7AN.js";
import {
  ImageTile_default,
  LRUCache_default,
  createOrUpdate,
  getKey,
  getKeyZXY
} from "./chunk-NJKL6WNU.js";
import {
  TileRange_default
} from "./chunk-3PBZTSJN.js";
import "./chunk-RLP4K64Q.js";
import {
  Group_default
} from "./chunk-46ASI6H2.js";
import "./chunk-JEWKH23N.js";
import {
  TileState_default
} from "./chunk-HED2RAPS.js";
import {
  BaseVector_default,
  BuilderGroup_default,
  BuilderType_default,
  ExecutorGroup_default,
  HIT_DETECT_RESOLUTION,
  VectorLayer_default,
  Vector_default,
  createHitDetectionImageData,
  getSquaredTolerance,
  hitDetect,
  renderFeature
} from "./chunk-4CXVAAGP.js";
import {
  LineString_default,
  MultiLineString_default,
  MultiPoint_default,
  MultiPolygon_default,
  interpolatePoint,
  linearRingss
} from "./chunk-IL2XPOAU.js";
import {
  Feature_default,
  FormatType_default,
  RBush,
  VectorEventType_default
} from "./chunk-R2N4A362.js";
import {
  Layer_default as Layer_default2
} from "./chunk-ZFBLI5RQ.js";
import "./chunk-WSGYOD7F.js";
import "./chunk-3TVUQNJJ.js";
import "./chunk-MXUD2ERE.js";
import {
  EventType_default as EventType_default2,
  Event_default as Event_default2,
  Layer_default
} from "./chunk-UP4W2OAM.js";
import {
  State_default
} from "./chunk-WY5HO4B4.js";
import "./chunk-L77GDW77.js";
import "./chunk-RZ2NCIHA.js";
import "./chunk-B652NQ5D.js";
import {
  Polygon_default,
  getInteriorPointOfArray,
  getInteriorPointsOfMultiArray,
  linearRingIsClockwise
} from "./chunk-UQPP32EF.js";
import {
  ViewHint_default
} from "./chunk-ASMMZL4F.js";
import {
  GeometryLayout_default,
  Point_default,
  transform2D
} from "./chunk-PTILDF6P.js";
import {
  apply,
  compose,
  create,
  makeInverse,
  multiply,
  reset,
  rotate,
  scale,
  translate
} from "./chunk-PFTE5SWF.js";
import "./chunk-JTYCLD24.js";
import {
  Projection_default,
  Units_default,
  equivalent,
  fromLonLat,
  fromUserExtent,
  get
} from "./chunk-JXQAEIDL.js";
import "./chunk-EICDL4AO.js";
import {
  wrapX
} from "./chunk-LHS2CK4K.js";
import {
  Circle_default,
  Fill_default,
  Icon_default,
  Stroke_default,
  Style_default,
  Text_default
} from "./chunk-YBMBQTVC.js";
import "./chunk-5VKD2OW7.js";
import {
  ImageState_default
} from "./chunk-BH46YA6A.js";
import {
  asArray,
  isStringColor,
  labelCache
} from "./chunk-SXNOEVN6.js";
import {
  toSize
} from "./chunk-RV5QOKWV.js";
import "./chunk-DZUBOF3Z.js";
import {
  createCanvasContext2D
} from "./chunk-R7IGQKZX.js";
import {
  GeometryType_default
} from "./chunk-IE72MASW.js";
import {
  clamp,
  log2
} from "./chunk-LZTVAMAD.js";
import "./chunk-KYXP4QQS.js";
import {
  Disposable_default,
  EventType_default,
  Event_default,
  Target_default,
  equals as equals2,
  extend,
  listen,
  numberSafeCompareFunction,
  unByKey,
  unlistenByKey
} from "./chunk-XYO5KJKP.js";
import {
  assign,
  clear,
  isEmpty
} from "./chunk-WONFBMYW.js";
import {
  abstract,
  assert,
  boundingExtent,
  buffer,
  containsExtent,
  createEmpty,
  createOrUpdateFromCoordinate,
  createOrUpdateFromFlatCoordinates,
  equals,
  getCenter,
  getHeight,
  getIntersection,
  getTopLeft,
  getUid,
  getWidth,
  intersects,
  isEmpty as isEmpty2,
  scaleFromCenter
} from "./chunk-V7OLV3U6.js";
import {
  __commonJS,
  __toModule
} from "./chunk-RITGDPBK.js";

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer2, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer2[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer2[offset + i], i += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer2[offset + i], i += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer2, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer2[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer2[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
      }
      buffer2[offset + i - d] |= s * 128;
    };
  }
});

// node_modules/pbf/index.js
var require_pbf = __commonJS({
  "node_modules/pbf/index.js"(exports, module) {
    "use strict";
    module.exports = Pbf;
    var ieee754 = require_ieee754();
    function Pbf(buf) {
      this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
      this.pos = 0;
      this.type = 0;
      this.length = this.buf.length;
    }
    Pbf.Varint = 0;
    Pbf.Fixed64 = 1;
    Pbf.Bytes = 2;
    Pbf.Fixed32 = 5;
    var SHIFT_LEFT_32 = (1 << 16) * (1 << 16);
    var SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;
    var TEXT_DECODER_MIN_LENGTH = 12;
    var utf8TextDecoder = typeof TextDecoder === "undefined" ? null : new TextDecoder("utf8");
    Pbf.prototype = {
      destroy: function() {
        this.buf = null;
      },
      readFields: function(readField, result, end) {
        end = end || this.length;
        while (this.pos < end) {
          var val = this.readVarint(), tag = val >> 3, startPos = this.pos;
          this.type = val & 7;
          readField(tag, result, this);
          if (this.pos === startPos)
            this.skip(val);
        }
        return result;
      },
      readMessage: function(readField, result) {
        return this.readFields(readField, result, this.readVarint() + this.pos);
      },
      readFixed32: function() {
        var val = readUInt32(this.buf, this.pos);
        this.pos += 4;
        return val;
      },
      readSFixed32: function() {
        var val = readInt32(this.buf, this.pos);
        this.pos += 4;
        return val;
      },
      readFixed64: function() {
        var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
        this.pos += 8;
        return val;
      },
      readSFixed64: function() {
        var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
        this.pos += 8;
        return val;
      },
      readFloat: function() {
        var val = ieee754.read(this.buf, this.pos, true, 23, 4);
        this.pos += 4;
        return val;
      },
      readDouble: function() {
        var val = ieee754.read(this.buf, this.pos, true, 52, 8);
        this.pos += 8;
        return val;
      },
      readVarint: function(isSigned) {
        var buf = this.buf, val, b;
        b = buf[this.pos++];
        val = b & 127;
        if (b < 128)
          return val;
        b = buf[this.pos++];
        val |= (b & 127) << 7;
        if (b < 128)
          return val;
        b = buf[this.pos++];
        val |= (b & 127) << 14;
        if (b < 128)
          return val;
        b = buf[this.pos++];
        val |= (b & 127) << 21;
        if (b < 128)
          return val;
        b = buf[this.pos];
        val |= (b & 15) << 28;
        return readVarintRemainder(val, isSigned, this);
      },
      readVarint64: function() {
        return this.readVarint(true);
      },
      readSVarint: function() {
        var num = this.readVarint();
        return num % 2 === 1 ? (num + 1) / -2 : num / 2;
      },
      readBoolean: function() {
        return Boolean(this.readVarint());
      },
      readString: function() {
        var end = this.readVarint() + this.pos;
        var pos = this.pos;
        this.pos = end;
        if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
          return readUtf8TextDecoder(this.buf, pos, end);
        }
        return readUtf8(this.buf, pos, end);
      },
      readBytes: function() {
        var end = this.readVarint() + this.pos, buffer2 = this.buf.subarray(this.pos, end);
        this.pos = end;
        return buffer2;
      },
      readPackedVarint: function(arr, isSigned) {
        if (this.type !== Pbf.Bytes)
          return arr.push(this.readVarint(isSigned));
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end)
          arr.push(this.readVarint(isSigned));
        return arr;
      },
      readPackedSVarint: function(arr) {
        if (this.type !== Pbf.Bytes)
          return arr.push(this.readSVarint());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end)
          arr.push(this.readSVarint());
        return arr;
      },
      readPackedBoolean: function(arr) {
        if (this.type !== Pbf.Bytes)
          return arr.push(this.readBoolean());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end)
          arr.push(this.readBoolean());
        return arr;
      },
      readPackedFloat: function(arr) {
        if (this.type !== Pbf.Bytes)
          return arr.push(this.readFloat());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end)
          arr.push(this.readFloat());
        return arr;
      },
      readPackedDouble: function(arr) {
        if (this.type !== Pbf.Bytes)
          return arr.push(this.readDouble());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end)
          arr.push(this.readDouble());
        return arr;
      },
      readPackedFixed32: function(arr) {
        if (this.type !== Pbf.Bytes)
          return arr.push(this.readFixed32());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end)
          arr.push(this.readFixed32());
        return arr;
      },
      readPackedSFixed32: function(arr) {
        if (this.type !== Pbf.Bytes)
          return arr.push(this.readSFixed32());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end)
          arr.push(this.readSFixed32());
        return arr;
      },
      readPackedFixed64: function(arr) {
        if (this.type !== Pbf.Bytes)
          return arr.push(this.readFixed64());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end)
          arr.push(this.readFixed64());
        return arr;
      },
      readPackedSFixed64: function(arr) {
        if (this.type !== Pbf.Bytes)
          return arr.push(this.readSFixed64());
        var end = readPackedEnd(this);
        arr = arr || [];
        while (this.pos < end)
          arr.push(this.readSFixed64());
        return arr;
      },
      skip: function(val) {
        var type = val & 7;
        if (type === Pbf.Varint)
          while (this.buf[this.pos++] > 127) {
          }
        else if (type === Pbf.Bytes)
          this.pos = this.readVarint() + this.pos;
        else if (type === Pbf.Fixed32)
          this.pos += 4;
        else if (type === Pbf.Fixed64)
          this.pos += 8;
        else
          throw new Error("Unimplemented type: " + type);
      },
      writeTag: function(tag, type) {
        this.writeVarint(tag << 3 | type);
      },
      realloc: function(min) {
        var length = this.length || 16;
        while (length < this.pos + min)
          length *= 2;
        if (length !== this.length) {
          var buf = new Uint8Array(length);
          buf.set(this.buf);
          this.buf = buf;
          this.length = length;
        }
      },
      finish: function() {
        this.length = this.pos;
        this.pos = 0;
        return this.buf.subarray(0, this.length);
      },
      writeFixed32: function(val) {
        this.realloc(4);
        writeInt32(this.buf, val, this.pos);
        this.pos += 4;
      },
      writeSFixed32: function(val) {
        this.realloc(4);
        writeInt32(this.buf, val, this.pos);
        this.pos += 4;
      },
      writeFixed64: function(val) {
        this.realloc(8);
        writeInt32(this.buf, val & -1, this.pos);
        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
        this.pos += 8;
      },
      writeSFixed64: function(val) {
        this.realloc(8);
        writeInt32(this.buf, val & -1, this.pos);
        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
        this.pos += 8;
      },
      writeVarint: function(val) {
        val = +val || 0;
        if (val > 268435455 || val < 0) {
          writeBigVarint(val, this);
          return;
        }
        this.realloc(4);
        this.buf[this.pos++] = val & 127 | (val > 127 ? 128 : 0);
        if (val <= 127)
          return;
        this.buf[this.pos++] = (val >>>= 7) & 127 | (val > 127 ? 128 : 0);
        if (val <= 127)
          return;
        this.buf[this.pos++] = (val >>>= 7) & 127 | (val > 127 ? 128 : 0);
        if (val <= 127)
          return;
        this.buf[this.pos++] = val >>> 7 & 127;
      },
      writeSVarint: function(val) {
        this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
      },
      writeBoolean: function(val) {
        this.writeVarint(Boolean(val));
      },
      writeString: function(str) {
        str = String(str);
        this.realloc(str.length * 4);
        this.pos++;
        var startPos = this.pos;
        this.pos = writeUtf8(this.buf, str, this.pos);
        var len = this.pos - startPos;
        if (len >= 128)
          makeRoomForExtraLength(startPos, len, this);
        this.pos = startPos - 1;
        this.writeVarint(len);
        this.pos += len;
      },
      writeFloat: function(val) {
        this.realloc(4);
        ieee754.write(this.buf, val, this.pos, true, 23, 4);
        this.pos += 4;
      },
      writeDouble: function(val) {
        this.realloc(8);
        ieee754.write(this.buf, val, this.pos, true, 52, 8);
        this.pos += 8;
      },
      writeBytes: function(buffer2) {
        var len = buffer2.length;
        this.writeVarint(len);
        this.realloc(len);
        for (var i = 0; i < len; i++)
          this.buf[this.pos++] = buffer2[i];
      },
      writeRawMessage: function(fn, obj) {
        this.pos++;
        var startPos = this.pos;
        fn(obj, this);
        var len = this.pos - startPos;
        if (len >= 128)
          makeRoomForExtraLength(startPos, len, this);
        this.pos = startPos - 1;
        this.writeVarint(len);
        this.pos += len;
      },
      writeMessage: function(tag, fn, obj) {
        this.writeTag(tag, Pbf.Bytes);
        this.writeRawMessage(fn, obj);
      },
      writePackedVarint: function(tag, arr) {
        if (arr.length)
          this.writeMessage(tag, writePackedVarint, arr);
      },
      writePackedSVarint: function(tag, arr) {
        if (arr.length)
          this.writeMessage(tag, writePackedSVarint, arr);
      },
      writePackedBoolean: function(tag, arr) {
        if (arr.length)
          this.writeMessage(tag, writePackedBoolean, arr);
      },
      writePackedFloat: function(tag, arr) {
        if (arr.length)
          this.writeMessage(tag, writePackedFloat, arr);
      },
      writePackedDouble: function(tag, arr) {
        if (arr.length)
          this.writeMessage(tag, writePackedDouble, arr);
      },
      writePackedFixed32: function(tag, arr) {
        if (arr.length)
          this.writeMessage(tag, writePackedFixed32, arr);
      },
      writePackedSFixed32: function(tag, arr) {
        if (arr.length)
          this.writeMessage(tag, writePackedSFixed32, arr);
      },
      writePackedFixed64: function(tag, arr) {
        if (arr.length)
          this.writeMessage(tag, writePackedFixed64, arr);
      },
      writePackedSFixed64: function(tag, arr) {
        if (arr.length)
          this.writeMessage(tag, writePackedSFixed64, arr);
      },
      writeBytesField: function(tag, buffer2) {
        this.writeTag(tag, Pbf.Bytes);
        this.writeBytes(buffer2);
      },
      writeFixed32Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed32);
        this.writeFixed32(val);
      },
      writeSFixed32Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed32);
        this.writeSFixed32(val);
      },
      writeFixed64Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed64);
        this.writeFixed64(val);
      },
      writeSFixed64Field: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed64);
        this.writeSFixed64(val);
      },
      writeVarintField: function(tag, val) {
        this.writeTag(tag, Pbf.Varint);
        this.writeVarint(val);
      },
      writeSVarintField: function(tag, val) {
        this.writeTag(tag, Pbf.Varint);
        this.writeSVarint(val);
      },
      writeStringField: function(tag, str) {
        this.writeTag(tag, Pbf.Bytes);
        this.writeString(str);
      },
      writeFloatField: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed32);
        this.writeFloat(val);
      },
      writeDoubleField: function(tag, val) {
        this.writeTag(tag, Pbf.Fixed64);
        this.writeDouble(val);
      },
      writeBooleanField: function(tag, val) {
        this.writeVarintField(tag, Boolean(val));
      }
    };
    function readVarintRemainder(l, s, p) {
      var buf = p.buf, h, b;
      b = buf[p.pos++];
      h = (b & 112) >> 4;
      if (b < 128)
        return toNum(l, h, s);
      b = buf[p.pos++];
      h |= (b & 127) << 3;
      if (b < 128)
        return toNum(l, h, s);
      b = buf[p.pos++];
      h |= (b & 127) << 10;
      if (b < 128)
        return toNum(l, h, s);
      b = buf[p.pos++];
      h |= (b & 127) << 17;
      if (b < 128)
        return toNum(l, h, s);
      b = buf[p.pos++];
      h |= (b & 127) << 24;
      if (b < 128)
        return toNum(l, h, s);
      b = buf[p.pos++];
      h |= (b & 1) << 31;
      if (b < 128)
        return toNum(l, h, s);
      throw new Error("Expected varint not more than 10 bytes");
    }
    function readPackedEnd(pbf) {
      return pbf.type === Pbf.Bytes ? pbf.readVarint() + pbf.pos : pbf.pos + 1;
    }
    function toNum(low, high, isSigned) {
      if (isSigned) {
        return high * 4294967296 + (low >>> 0);
      }
      return (high >>> 0) * 4294967296 + (low >>> 0);
    }
    function writeBigVarint(val, pbf) {
      var low, high;
      if (val >= 0) {
        low = val % 4294967296 | 0;
        high = val / 4294967296 | 0;
      } else {
        low = ~(-val % 4294967296);
        high = ~(-val / 4294967296);
        if (low ^ 4294967295) {
          low = low + 1 | 0;
        } else {
          low = 0;
          high = high + 1 | 0;
        }
      }
      if (val >= 18446744073709552e3 || val < -18446744073709552e3) {
        throw new Error("Given varint doesn't fit into 10 bytes");
      }
      pbf.realloc(10);
      writeBigVarintLow(low, high, pbf);
      writeBigVarintHigh(high, pbf);
    }
    function writeBigVarintLow(low, high, pbf) {
      pbf.buf[pbf.pos++] = low & 127 | 128;
      low >>>= 7;
      pbf.buf[pbf.pos++] = low & 127 | 128;
      low >>>= 7;
      pbf.buf[pbf.pos++] = low & 127 | 128;
      low >>>= 7;
      pbf.buf[pbf.pos++] = low & 127 | 128;
      low >>>= 7;
      pbf.buf[pbf.pos] = low & 127;
    }
    function writeBigVarintHigh(high, pbf) {
      var lsb = (high & 7) << 4;
      pbf.buf[pbf.pos++] |= lsb | ((high >>>= 3) ? 128 : 0);
      if (!high)
        return;
      pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
      if (!high)
        return;
      pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
      if (!high)
        return;
      pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
      if (!high)
        return;
      pbf.buf[pbf.pos++] = high & 127 | ((high >>>= 7) ? 128 : 0);
      if (!high)
        return;
      pbf.buf[pbf.pos++] = high & 127;
    }
    function makeRoomForExtraLength(startPos, len, pbf) {
      var extraLen = len <= 16383 ? 1 : len <= 2097151 ? 2 : len <= 268435455 ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));
      pbf.realloc(extraLen);
      for (var i = pbf.pos - 1; i >= startPos; i--)
        pbf.buf[i + extraLen] = pbf.buf[i];
    }
    function writePackedVarint(arr, pbf) {
      for (var i = 0; i < arr.length; i++)
        pbf.writeVarint(arr[i]);
    }
    function writePackedSVarint(arr, pbf) {
      for (var i = 0; i < arr.length; i++)
        pbf.writeSVarint(arr[i]);
    }
    function writePackedFloat(arr, pbf) {
      for (var i = 0; i < arr.length; i++)
        pbf.writeFloat(arr[i]);
    }
    function writePackedDouble(arr, pbf) {
      for (var i = 0; i < arr.length; i++)
        pbf.writeDouble(arr[i]);
    }
    function writePackedBoolean(arr, pbf) {
      for (var i = 0; i < arr.length; i++)
        pbf.writeBoolean(arr[i]);
    }
    function writePackedFixed32(arr, pbf) {
      for (var i = 0; i < arr.length; i++)
        pbf.writeFixed32(arr[i]);
    }
    function writePackedSFixed32(arr, pbf) {
      for (var i = 0; i < arr.length; i++)
        pbf.writeSFixed32(arr[i]);
    }
    function writePackedFixed64(arr, pbf) {
      for (var i = 0; i < arr.length; i++)
        pbf.writeFixed64(arr[i]);
    }
    function writePackedSFixed64(arr, pbf) {
      for (var i = 0; i < arr.length; i++)
        pbf.writeSFixed64(arr[i]);
    }
    function readUInt32(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + buf[pos + 3] * 16777216;
    }
    function writeInt32(buf, val, pos) {
      buf[pos] = val;
      buf[pos + 1] = val >>> 8;
      buf[pos + 2] = val >>> 16;
      buf[pos + 3] = val >>> 24;
    }
    function readInt32(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + (buf[pos + 3] << 24);
    }
    function readUtf8(buf, pos, end) {
      var str = "";
      var i = pos;
      while (i < end) {
        var b0 = buf[i];
        var c = null;
        var bytesPerSequence = b0 > 239 ? 4 : b0 > 223 ? 3 : b0 > 191 ? 2 : 1;
        if (i + bytesPerSequence > end)
          break;
        var b1, b2, b3;
        if (bytesPerSequence === 1) {
          if (b0 < 128) {
            c = b0;
          }
        } else if (bytesPerSequence === 2) {
          b1 = buf[i + 1];
          if ((b1 & 192) === 128) {
            c = (b0 & 31) << 6 | b1 & 63;
            if (c <= 127) {
              c = null;
            }
          }
        } else if (bytesPerSequence === 3) {
          b1 = buf[i + 1];
          b2 = buf[i + 2];
          if ((b1 & 192) === 128 && (b2 & 192) === 128) {
            c = (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63;
            if (c <= 2047 || c >= 55296 && c <= 57343) {
              c = null;
            }
          }
        } else if (bytesPerSequence === 4) {
          b1 = buf[i + 1];
          b2 = buf[i + 2];
          b3 = buf[i + 3];
          if ((b1 & 192) === 128 && (b2 & 192) === 128 && (b3 & 192) === 128) {
            c = (b0 & 15) << 18 | (b1 & 63) << 12 | (b2 & 63) << 6 | b3 & 63;
            if (c <= 65535 || c >= 1114112) {
              c = null;
            }
          }
        }
        if (c === null) {
          c = 65533;
          bytesPerSequence = 1;
        } else if (c > 65535) {
          c -= 65536;
          str += String.fromCharCode(c >>> 10 & 1023 | 55296);
          c = 56320 | c & 1023;
        }
        str += String.fromCharCode(c);
        i += bytesPerSequence;
      }
      return str;
    }
    function readUtf8TextDecoder(buf, pos, end) {
      return utf8TextDecoder.decode(buf.subarray(pos, end));
    }
    function writeUtf8(buf, str, pos) {
      for (var i = 0, c, lead; i < str.length; i++) {
        c = str.charCodeAt(i);
        if (c > 55295 && c < 57344) {
          if (lead) {
            if (c < 56320) {
              buf[pos++] = 239;
              buf[pos++] = 191;
              buf[pos++] = 189;
              lead = c;
              continue;
            } else {
              c = lead - 55296 << 10 | c - 56320 | 65536;
              lead = null;
            }
          } else {
            if (c > 56319 || i + 1 === str.length) {
              buf[pos++] = 239;
              buf[pos++] = 191;
              buf[pos++] = 189;
            } else {
              lead = c;
            }
            continue;
          }
        } else if (lead) {
          buf[pos++] = 239;
          buf[pos++] = 191;
          buf[pos++] = 189;
          lead = null;
        }
        if (c < 128) {
          buf[pos++] = c;
        } else {
          if (c < 2048) {
            buf[pos++] = c >> 6 | 192;
          } else {
            if (c < 65536) {
              buf[pos++] = c >> 12 | 224;
            } else {
              buf[pos++] = c >> 18 | 240;
              buf[pos++] = c >> 12 & 63 | 128;
            }
            buf[pos++] = c >> 6 & 63 | 128;
          }
          buf[pos++] = c & 63 | 128;
        }
      }
      return pos;
    }
  }
});

// node_modules/mapbox-to-css-font/index.js
var require_mapbox_to_css_font = __commonJS({
  "node_modules/mapbox-to-css-font/index.js"(exports, module) {
    var fontWeights = {
      thin: 100,
      hairline: 100,
      "ultra-light": 100,
      "extra-light": 100,
      light: 200,
      book: 300,
      regular: 400,
      normal: 400,
      plain: 400,
      roman: 400,
      standard: 400,
      medium: 500,
      "semi-bold": 600,
      "demi-bold": 600,
      bold: 700,
      heavy: 800,
      black: 800,
      "extra-bold": 800,
      "ultra-black": 900,
      "extra-black": 900,
      "ultra-bold": 900,
      "heavy-black": 900,
      fat: 900,
      poster: 900
    };
    var sp = " ";
    var italicRE = /(italic|oblique)$/i;
    var fontCache = {};
    module.exports = function(fonts, size, lineHeight) {
      var cssData = fontCache[fonts];
      if (!cssData) {
        if (!Array.isArray(fonts)) {
          fonts = [fonts];
        }
        var weight = 400;
        var style = "normal";
        var fontFamilies = [];
        var haveWeight, haveStyle;
        for (var i = 0, ii = fonts.length; i < ii; ++i) {
          var font = fonts[i];
          var parts = font.split(" ");
          var maybeWeight = parts[parts.length - 1].toLowerCase();
          if (maybeWeight == "normal" || maybeWeight == "italic" || maybeWeight == "oblique") {
            style = haveStyle ? style : maybeWeight;
            parts.pop();
            maybeWeight = parts[parts.length - 1].toLowerCase();
          } else if (italicRE.test(maybeWeight)) {
            maybeWeight = maybeWeight.replace(italicRE, "");
            style = haveStyle ? style : parts[parts.length - 1].replace(maybeWeight, "");
          }
          for (var w in fontWeights) {
            if (maybeWeight == w || maybeWeight == w.replace("-", "") || maybeWeight == w.replace("-", sp)) {
              weight = haveWeight ? weight : fontWeights[w];
              parts.pop();
              break;
            }
          }
          if (!haveWeight && typeof maybeWeight == "number") {
            weight = maybeWeight;
          }
          var fontFamily = parts.join(sp).replace("Klokantech Noto Sans", "Noto Sans");
          if (fontFamily.indexOf(sp) !== -1) {
            fontFamily = '"' + fontFamily + '"';
          }
          fontFamilies.push(fontFamily);
        }
        cssData = fontCache[fonts] = [style, weight, fontFamilies];
      }
      return cssData[0] + sp + cssData[1] + sp + size + "px" + (lineHeight ? "/" + lineHeight : "") + sp + cssData[2];
    };
  }
});

// node_modules/webfont-matcher/lib/fonts/google.js
var require_google = __commonJS({
  "node_modules/webfont-matcher/lib/fonts/google.js"(exports, module) {
    (function() {
      var families;
      module.exports = {
        icon: "icons/google.svg",
        name: "google",
        title: "Google Fonts",
        link: "google.com/fonts",
        getNames: function() {
          return families;
        },
        getLink: function(name) {
          return "https://fonts.google.com/specimen/" + name.replace(/( )/g, "+");
        },
        normalizeName: function(name) {
          return name;
        }
      };
      families = ["ABeeZee", "Abel", "Abril Fatface", "Aclonica", "Acme", "Actor", "Adamina", "Advent Pro", "Aguafina Script", "Akronim", "Aladin", "Aldrich", "Alef", "Alegreya", "Alegreya SC", "Alegreya Sans", "Alegreya Sans SC", "Alex Brush", "Alfa Slab One", "Alice", "Alike", "Alike Angular", "Allan", "Allerta", "Allerta Stencil", "Allura", "Almendra", "Almendra Display", "Almendra SC", "Amarante", "Amaranth", "Amatic SC", "Amethysta", "Amiri", "Amita", "Anaheim", "Andada", "Andika", "Angkor", "Annie Use Your Telescope", "Anonymous Pro", "Antic", "Antic Didone", "Antic Slab", "Anton", "Arapey", "Arbutus", "Arbutus Slab", "Architects Daughter", "Archivo Black", "Archivo Narrow", "Arimo", "Arizonia", "Armata", "Artifika", "Arvo", "Arya", "Asap", "Asar", "Asset", "Astloch", "Asul", "Atomic Age", "Aubrey", "Audiowide", "Autour One", "Average", "Average Sans", "Averia Gruesa Libre", "Averia Libre", "Averia Sans Libre", "Averia Serif Libre", "Bad Script", "Balthazar", "Bangers", "Basic", "Battambang", "Baumans", "Bayon", "Belgrano", "Belleza", "BenchNine", "Bentham", "Berkshire Swash", "Bevan", "Bigelow Rules", "Bigshot One", "Bilbo", "Bilbo Swash Caps", "Biryani", "Bitter", "Black Ops One", "Bokor", "Bonbon", "Boogaloo", "Bowlby One", "Bowlby One SC", "Brawler", "Bree Serif", "Bubblegum Sans", "Bubbler One", "Buda", "Buenard", "Butcherman", "Butterfly Kids", "Cabin", "Cabin Condensed", "Cabin Sketch", "Caesar Dressing", "Cagliostro", "Calligraffitti", "Cambay", "Cambo", "Candal", "Cantarell", "Cantata One", "Cantora One", "Capriola", "Cardo", "Carme", "Carrois Gothic", "Carrois Gothic SC", "Carter One", "Catamaran", "Caudex", "Caveat", "Caveat Brush", "Cedarville Cursive", "Ceviche One", "Changa One", "Chango", "Chau Philomene One", "Chela One", "Chelsea Market", "Chenla", "Cherry Cream Soda", "Cherry Swash", "Chewy", "Chicle", "Chivo", "Chonburi", "Cinzel", "Cinzel Decorative", "Clicker Script", "Coda", "Coda Caption", "Codystar", "Combo", "Comfortaa", "Coming Soon", "Concert One", "Condiment", "Content", "Contrail One", "Convergence", "Cookie", "Copse", "Corben", "Courgette", "Cousine", "Coustard", "Covered By Your Grace", "Crafty Girls", "Creepster", "Crete Round", "Crimson Text", "Croissant One", "Crushed", "Cuprum", "Cutive", "Cutive Mono", "Damion", "Dancing Script", "Dangrek", "Dawning of a New Day", "Days One", "Dekko", "Delius", "Delius Swash Caps", "Delius Unicase", "Della Respira", "Denk One", "Devonshire", "Dhurjati", "Didact Gothic", "Diplomata", "Diplomata SC", "Domine", "Donegal One", "Doppio One", "Dorsa", "Dosis", "Dr Sugiyama", "Droid Sans", "Droid Sans Mono", "Droid Serif", "Duru Sans", "Dynalight", "EB Garamond", "Eagle Lake", "Eater", "Economica", "Eczar", "Ek Mukta", "Electrolize", "Elsie", "Elsie Swash Caps", "Emblema One", "Emilys Candy", "Engagement", "Englebert", "Enriqueta", "Erica One", "Esteban", "Euphoria Script", "Ewert", "Exo", "Exo 2", "Expletus Sans", "Fanwood Text", "Fascinate", "Fascinate Inline", "Faster One", "Fasthand", "Fauna One", "Federant", "Federo", "Felipa", "Fenix", "Finger Paint", "Fira Mono", "Fira Sans", "Fjalla One", "Fjord One", "Flamenco", "Flavors", "Fondamento", "Fontdiner Swanky", "Forum", "Francois One", "Freckle Face", "Fredericka the Great", "Fredoka One", "Freehand", "Fresca", "Frijole", "Fruktur", "Fugaz One", "GFS Didot", "GFS Neohellenic", "Gabriela", "Gafata", "Galdeano", "Galindo", "Gentium Basic", "Gentium Book Basic", "Geo", "Geostar", "Geostar Fill", "Germania One", "Gidugu", "Gilda Display", "Give You Glory", "Glass Antiqua", "Glegoo", "Gloria Hallelujah", "Goblin One", "Gochi Hand", "Gorditas", "Goudy Bookletter 1911", "Graduate", "Grand Hotel", "Gravitas One", "Great Vibes", "Griffy", "Gruppo", "Gudea", "Gurajada", "Habibi", "Halant", "Hammersmith One", "Hanalei", "Hanalei Fill", "Handlee", "Hanuman", "Happy Monkey", "Headland One", "Henny Penny", "Herr Von Muellerhoff", "Hind", "Hind Siliguri", "Hind Vadodara", "Holtwood One SC", "Homemade Apple", "Homenaje", "IM Fell DW Pica", "IM Fell DW Pica SC", "IM Fell Double Pica", "IM Fell Double Pica SC", "IM Fell English", "IM Fell English SC", "IM Fell French Canon", "IM Fell French Canon SC", "IM Fell Great Primer", "IM Fell Great Primer SC", "Iceberg", "Iceland", "Imprima", "Inconsolata", "Inder", "Indie Flower", "Inika", "Inknut Antiqua", "Irish Grover", "Istok Web", "Italiana", "Italianno", "Itim", "Jacques Francois", "Jacques Francois Shadow", "Jaldi", "Jim Nightshade", "Jockey One", "Jolly Lodger", "Josefin Sans", "Josefin Slab", "Joti One", "Judson", "Julee", "Julius Sans One", "Junge", "Jura", "Just Another Hand", "Just Me Again Down Here", "Kadwa", "Kalam", "Kameron", "Kantumruy", "Karla", "Karma", "Kaushan Script", "Kavoon", "Kdam Thmor", "Keania One", "Kelly Slab", "Kenia", "Khand", "Khmer", "Khula", "Kite One", "Knewave", "Kotta One", "Koulen", "Kranky", "Kreon", "Kristi", "Krona One", "Kurale", "La Belle Aurore", "Laila", "Lakki Reddy", "Lancelot", "Lateef", "Lato", "League Script", "Leckerli One", "Ledger", "Lekton", "Lemon", "Libre Baskerville", "Life Savers", "Lilita One", "Lily Script One", "Limelight", "Linden Hill", "Lobster", "Lobster Two", "Londrina Outline", "Londrina Shadow", "Londrina Sketch", "Londrina Solid", "Lora", "Love Ya Like A Sister", "Loved by the King", "Lovers Quarrel", "Luckiest Guy", "Lusitana", "Lustria", "Macondo", "Macondo Swash Caps", "Magra", "Maiden Orange", "Mako", "Mallanna", "Mandali", "Marcellus", "Marcellus SC", "Marck Script", "Margarine", "Marko One", "Marmelad", "Martel", "Martel Sans", "Marvel", "Mate", "Mate SC", "Maven Pro", "McLaren", "Meddon", "MedievalSharp", "Medula One", "Megrim", "Meie Script", "Merienda", "Merienda One", "Merriweather", "Merriweather Sans", "Metal", "Metal Mania", "Metamorphous", "Metrophobic", "Michroma", "Milonga", "Miltonian", "Miltonian Tattoo", "Miniver", "Miss Fajardose", "Modak", "Modern Antiqua", "Molengo", "Molle", "Monda", "Monofett", "Monoton", "Monsieur La Doulaise", "Montaga", "Montez", "Montserrat", "Montserrat Alternates", "Montserrat Subrayada", "Moul", "Moulpali", "Mountains of Christmas", "Mouse Memoirs", "Mr Bedfort", "Mr Dafoe", "Mr De Haviland", "Mrs Saint Delafield", "Mrs Sheppards", "Muli", "Mystery Quest", "NTR", "Neucha", "Neuton", "New Rocker", "News Cycle", "Niconne", "Nixie One", "Nobile", "Nokora", "Norican", "Nosifer", "Nothing You Could Do", "Noticia Text", "Noto Sans", "Noto Serif", "Nova Cut", "Nova Flat", "Nova Mono", "Nova Oval", "Nova Round", "Nova Script", "Nova Slim", "Nova Square", "Numans", "Nunito", "Odor Mean Chey", "Offside", "Old Standard TT", "Oldenburg", "Oleo Script", "Oleo Script Swash Caps", "Open Sans", "Open Sans Condensed", "Oranienbaum", "Orbitron", "Oregano", "Orienta", "Original Surfer", "Oswald", "Over the Rainbow", "Overlock", "Overlock SC", "Ovo", "Oxygen", "Oxygen Mono", "PT Mono", "PT Sans", "PT Sans Caption", "PT Sans Narrow", "PT Serif", "PT Serif Caption", "Pacifico", "Palanquin", "Palanquin Dark", "Paprika", "Parisienne", "Passero One", "Passion One", "Pathway Gothic One", "Patrick Hand", "Patrick Hand SC", "Patua One", "Paytone One", "Peddana", "Peralta", "Permanent Marker", "Petit Formal Script", "Petrona", "Philosopher", "Piedra", "Pinyon Script", "Pirata One", "Plaster", "Play", "Playball", "Playfair Display", "Playfair Display SC", "Podkova", "Poiret One", "Poller One", "Poly", "Pompiere", "Pontano Sans", "Poppins", "Port Lligat Sans", "Port Lligat Slab", "Pragati Narrow", "Prata", "Preahvihear", "Press Start 2P", "Princess Sofia", "Prociono", "Prosto One", "Puritan", "Purple Purse", "Quando", "Quantico", "Quattrocento", "Quattrocento Sans", "Questrial", "Quicksand", "Quintessential", "Qwigley", "Racing Sans One", "Radley", "Rajdhani", "Raleway", "Raleway Dots", "Ramabhadra", "Ramaraja", "Rambla", "Rammetto One", "Ranchers", "Rancho", "Ranga", "Rationale", "Ravi Prakash", "Redressed", "Reenie Beanie", "Revalia", "Rhodium Libre", "Ribeye", "Ribeye Marrow", "Righteous", "Risque", "Roboto", "Roboto Condensed", "Roboto Mono", "Roboto Slab", "Rochester", "Rock Salt", "Rokkitt", "Romanesco", "Ropa Sans", "Rosario", "Rosarivo", "Rouge Script", "Rozha One", "Rubik", "Rubik Mono One", "Rubik One", "Ruda", "Rufina", "Ruge Boogie", "Ruluko", "Rum Raisin", "Ruslan Display", "Russo One", "Ruthie", "Rye", "Sacramento", "Sahitya", "Sail", "Salsa", "Sanchez", "Sancreek", "Sansita One", "Sarala", "Sarina", "Sarpanch", "Satisfy", "Scada", "Scheherazade", "Schoolbell", "Seaweed Script", "Sevillana", "Seymour One", "Shadows Into Light", "Shadows Into Light Two", "Shanti", "Share", "Share Tech", "Share Tech Mono", "Shojumaru", "Short Stack", "Siemreap", "Sigmar One", "Signika", "Signika Negative", "Simonetta", "Sintony", "Sirin Stencil", "Six Caps", "Skranji", "Slabo 13px", "Slabo 27px", "Slackey", "Smokum", "Smythe", "Sniglet", "Snippet", "Snowburst One", "Sofadi One", "Sofia", "Sonsie One", "Sorts Mill Goudy", "Source Code Pro", "Source Sans Pro", "Source Serif Pro", "Special Elite", "Spicy Rice", "Spinnaker", "Spirax", "Squada One", "Sree Krushnadevaraya", "Stalemate", "Stalinist One", "Stardos Stencil", "Stint Ultra Condensed", "Stint Ultra Expanded", "Stoke", "Strait", "Sue Ellen Francisco", "Sumana", "Sunshiney", "Supermercado One", "Sura", "Suranna", "Suravaram", "Suwannaphum", "Swanky and Moo Moo", "Syncopate", "Tangerine", "Taprom", "Tauri", "Teko", "Telex", "Tenali Ramakrishna", "Tenor Sans", "Text Me One", "The Girl Next Door", "Tienne", "Tillana", "Timmana", "Tinos", "Titan One", "Titillium Web", "Trade Winds", "Trocchi", "Trochut", "Trykker", "Tulpen One", "Ubuntu", "Ubuntu Condensed", "Ubuntu Mono", "Ultra", "Uncial Antiqua", "Underdog", "Unica One", "UnifrakturCook", "UnifrakturMaguntia", "Unkempt", "Unlock", "Unna", "VT323", "Vampiro One", "Varela", "Varela Round", "Vast Shadow", "Vesper Libre", "Vibur", "Vidaloka", "Viga", "Voces", "Volkhov", "Vollkorn", "Voltaire", "Waiting for the Sunrise", "Wallpoet", "Walter Turncoat", "Warnes", "Wellfleet", "Wendy One", "Wire One", "Work Sans", "Yanone Kaffeesatz", "Yantramanav", "Yellowtail", "Yeseva One", "Yesteryear", "Zeyada"];
    }).call(exports);
  }
});

// node_modules/ol/webgl.js
var ARRAY_BUFFER = 34962;
var ELEMENT_ARRAY_BUFFER = 34963;
var STREAM_DRAW = 35040;
var STATIC_DRAW = 35044;
var DYNAMIC_DRAW = 35048;
var UNSIGNED_BYTE = 5121;
var UNSIGNED_SHORT = 5123;
var UNSIGNED_INT = 5125;
var FLOAT = 5126;
var CONTEXT_IDS = ["experimental-webgl", "webgl", "webkit-3d", "moz-webgl"];
function getContext(canvas, opt_attributes) {
  var ii = CONTEXT_IDS.length;
  for (var i = 0; i < ii; ++i) {
    try {
      var context = canvas.getContext(CONTEXT_IDS[i], opt_attributes);
      if (context) {
        return context;
      }
    } catch (e) {
    }
  }
  return null;
}

// node_modules/ol/webgl/Buffer.js
var BufferUsage = {
  STATIC_DRAW,
  STREAM_DRAW,
  DYNAMIC_DRAW
};
var WebGLArrayBuffer = function() {
  function WebGLArrayBuffer2(type, opt_usage) {
    this.array = null;
    this.type = type;
    assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);
    this.usage = opt_usage !== void 0 ? opt_usage : BufferUsage.STATIC_DRAW;
  }
  WebGLArrayBuffer2.prototype.ofSize = function(size) {
    this.array = new (getArrayClassForType(this.type))(size);
  };
  WebGLArrayBuffer2.prototype.fromArray = function(array2) {
    var arrayClass = getArrayClassForType(this.type);
    this.array = arrayClass.from ? arrayClass.from(array2) : new arrayClass(array2);
  };
  WebGLArrayBuffer2.prototype.fromArrayBuffer = function(buffer2) {
    this.array = new (getArrayClassForType(this.type))(buffer2);
  };
  WebGLArrayBuffer2.prototype.getType = function() {
    return this.type;
  };
  WebGLArrayBuffer2.prototype.getArray = function() {
    return this.array;
  };
  WebGLArrayBuffer2.prototype.getUsage = function() {
    return this.usage;
  };
  WebGLArrayBuffer2.prototype.getSize = function() {
    return this.array ? this.array.length : 0;
  };
  return WebGLArrayBuffer2;
}();
function getArrayClassForType(type) {
  switch (type) {
    case ARRAY_BUFFER:
      return Float32Array;
    case ELEMENT_ARRAY_BUFFER:
      return Uint32Array;
    default:
      return Float32Array;
  }
}
var Buffer_default = WebGLArrayBuffer;

// node_modules/ol/webgl/ContextEventType.js
var ContextEventType_default = {
  LOST: "webglcontextlost",
  RESTORED: "webglcontextrestored"
};

// node_modules/ol/webgl/PostProcessingPass.js
var DEFAULT_VERTEX_SHADER = "\n  precision mediump float;\n  \n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n  \n  uniform vec2 u_screenSize;\n   \n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n";
var DEFAULT_FRAGMENT_SHADER = "\n  precision mediump float;\n   \n  uniform sampler2D u_image;\n   \n  varying vec2 v_texCoord;\n   \n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord);\n  }\n";
var WebGLPostProcessingPass = function() {
  function WebGLPostProcessingPass2(options) {
    this.gl_ = options.webGlContext;
    var gl = this.gl_;
    this.scaleRatio_ = options.scaleRatio || 1;
    this.renderTargetTexture_ = gl.createTexture();
    this.renderTargetTextureSize_ = null;
    this.frameBuffer_ = gl.createFramebuffer();
    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);
    gl.compileShader(vertexShader);
    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);
    gl.compileShader(fragmentShader);
    this.renderTargetProgram_ = gl.createProgram();
    gl.attachShader(this.renderTargetProgram_, vertexShader);
    gl.attachShader(this.renderTargetProgram_, fragmentShader);
    gl.linkProgram(this.renderTargetProgram_);
    this.renderTargetVerticesBuffer_ = gl.createBuffer();
    var verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];
    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);
    this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, "a_position");
    this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, "u_screenSize");
    this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, "u_image");
    this.uniforms_ = [];
    options.uniforms && Object.keys(options.uniforms).forEach(function(name) {
      this.uniforms_.push({
        value: options.uniforms[name],
        location: gl.getUniformLocation(this.renderTargetProgram_, name)
      });
    }.bind(this));
  }
  WebGLPostProcessingPass2.prototype.getGL = function() {
    return this.gl_;
  };
  WebGLPostProcessingPass2.prototype.init = function(frameState) {
    var gl = this.getGL();
    var textureSize = [
      gl.drawingBufferWidth * this.scaleRatio_,
      gl.drawingBufferHeight * this.scaleRatio_
    ];
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());
    gl.viewport(0, 0, textureSize[0], textureSize[1]);
    if (!this.renderTargetTextureSize_ || this.renderTargetTextureSize_[0] !== textureSize[0] || this.renderTargetTextureSize_[1] !== textureSize[1]) {
      this.renderTargetTextureSize_ = textureSize;
      var level = 0;
      var internalFormat = gl.RGBA;
      var border = 0;
      var format = gl.RGBA;
      var type = gl.UNSIGNED_BYTE;
      var data = null;
      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);
      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);
    }
  };
  WebGLPostProcessingPass2.prototype.apply = function(frameState, nextPass) {
    var gl = this.getGL();
    var size = frameState.size;
    gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);
    gl.clearColor(0, 0, 0, 0);
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);
    gl.useProgram(this.renderTargetProgram_);
    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);
    gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);
    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);
    gl.uniform1i(this.renderTargetTextureLocation_, 0);
    this.applyUniforms(frameState);
    gl.drawArrays(gl.TRIANGLES, 0, 6);
  };
  WebGLPostProcessingPass2.prototype.getFrameBuffer = function() {
    return this.frameBuffer_;
  };
  WebGLPostProcessingPass2.prototype.applyUniforms = function(frameState) {
    var gl = this.getGL();
    var value;
    var textureSlot = 1;
    this.uniforms_.forEach(function(uniform) {
      value = typeof uniform.value === "function" ? uniform.value(frameState) : uniform.value;
      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {
        if (!uniform.texture) {
          uniform.texture = gl.createTexture();
        }
        gl.activeTexture(gl["TEXTURE" + textureSlot]);
        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        if (value instanceof ImageData) {
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));
        } else {
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);
        }
        gl.uniform1i(uniform.location, textureSlot++);
      } else if (Array.isArray(value)) {
        switch (value.length) {
          case 2:
            gl.uniform2f(uniform.location, value[0], value[1]);
            return;
          case 3:
            gl.uniform3f(uniform.location, value[0], value[1], value[2]);
            return;
          case 4:
            gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);
            return;
          default:
            return;
        }
      } else if (typeof value === "number") {
        gl.uniform1f(uniform.location, value);
      }
    });
  };
  return WebGLPostProcessingPass2;
}();
var PostProcessingPass_default = WebGLPostProcessingPass;

// node_modules/ol/vec/mat4.js
function create2() {
  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
}
function fromTransform(mat4, transform) {
  mat4[0] = transform[0];
  mat4[1] = transform[1];
  mat4[4] = transform[2];
  mat4[5] = transform[3];
  mat4[12] = transform[4];
  mat4[13] = transform[5];
  return mat4;
}

// node_modules/ol/webgl/Helper.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DefaultUniform = {
  PROJECTION_MATRIX: "u_projectionMatrix",
  OFFSET_SCALE_MATRIX: "u_offsetScaleMatrix",
  OFFSET_ROTATION_MATRIX: "u_offsetRotateMatrix",
  TIME: "u_time",
  ZOOM: "u_zoom",
  RESOLUTION: "u_resolution"
};
var AttributeType = {
  UNSIGNED_BYTE,
  UNSIGNED_SHORT,
  UNSIGNED_INT,
  FLOAT
};
var WebGLHelper = function(_super) {
  __extends(WebGLHelper2, _super);
  function WebGLHelper2(opt_options) {
    var _this = _super.call(this) || this;
    var options = opt_options || {};
    _this.boundHandleWebGLContextLost_ = _this.handleWebGLContextLost.bind(_this);
    _this.boundHandleWebGLContextRestored_ = _this.handleWebGLContextRestored.bind(_this);
    _this.canvas_ = document.createElement("canvas");
    _this.canvas_.style.position = "absolute";
    _this.canvas_.style.left = "0";
    _this.gl_ = getContext(_this.canvas_);
    var gl = _this.getGL();
    _this.bufferCache_ = {};
    _this.extensionCache_ = {};
    _this.currentProgram_ = null;
    _this.canvas_.addEventListener(ContextEventType_default.LOST, _this.boundHandleWebGLContextLost_);
    _this.canvas_.addEventListener(ContextEventType_default.RESTORED, _this.boundHandleWebGLContextRestored_);
    _this.offsetRotateMatrix_ = create();
    _this.offsetScaleMatrix_ = create();
    _this.tmpMat4_ = create2();
    _this.uniformLocations_ = {};
    _this.attribLocations_ = {};
    _this.uniforms_ = [];
    if (options.uniforms) {
      for (var name_1 in options.uniforms) {
        _this.uniforms_.push({
          name: name_1,
          value: options.uniforms[name_1]
        });
      }
    }
    _this.postProcessPasses_ = options.postProcesses ? options.postProcesses.map(function(options2) {
      return new PostProcessingPass_default({
        webGlContext: gl,
        scaleRatio: options2.scaleRatio,
        vertexShader: options2.vertexShader,
        fragmentShader: options2.fragmentShader,
        uniforms: options2.uniforms
      });
    }) : [new PostProcessingPass_default({ webGlContext: gl })];
    _this.shaderCompileErrors_ = null;
    _this.startTime_ = Date.now();
    return _this;
  }
  WebGLHelper2.prototype.getExtension = function(name) {
    if (name in this.extensionCache_) {
      return this.extensionCache_[name];
    }
    var extension = this.gl_.getExtension(name);
    this.extensionCache_[name] = extension;
    return extension;
  };
  WebGLHelper2.prototype.bindBuffer = function(buffer2) {
    var gl = this.getGL();
    var bufferKey = getUid(buffer2);
    var bufferCache = this.bufferCache_[bufferKey];
    if (!bufferCache) {
      var webGlBuffer = gl.createBuffer();
      bufferCache = {
        buffer: buffer2,
        webGlBuffer
      };
      this.bufferCache_[bufferKey] = bufferCache;
    }
    gl.bindBuffer(buffer2.getType(), bufferCache.webGlBuffer);
  };
  WebGLHelper2.prototype.flushBufferData = function(buffer2) {
    var gl = this.getGL();
    this.bindBuffer(buffer2);
    gl.bufferData(buffer2.getType(), buffer2.getArray(), buffer2.getUsage());
  };
  WebGLHelper2.prototype.deleteBuffer = function(buf) {
    var gl = this.getGL();
    var bufferKey = getUid(buf);
    var bufferCacheEntry = this.bufferCache_[bufferKey];
    if (bufferCacheEntry && !gl.isContextLost()) {
      gl.deleteBuffer(bufferCacheEntry.webGlBuffer);
    }
    delete this.bufferCache_[bufferKey];
  };
  WebGLHelper2.prototype.disposeInternal = function() {
    this.canvas_.removeEventListener(ContextEventType_default.LOST, this.boundHandleWebGLContextLost_);
    this.canvas_.removeEventListener(ContextEventType_default.RESTORED, this.boundHandleWebGLContextRestored_);
    var extension = this.gl_.getExtension("WEBGL_lose_context");
    if (extension) {
      extension.loseContext();
    }
    delete this.gl_;
    delete this.canvas_;
  };
  WebGLHelper2.prototype.prepareDraw = function(frameState, opt_disableAlphaBlend) {
    var gl = this.getGL();
    var canvas = this.getCanvas();
    var size = frameState.size;
    var pixelRatio = frameState.pixelRatio;
    canvas.width = size[0] * pixelRatio;
    canvas.height = size[1] * pixelRatio;
    canvas.style.width = size[0] + "px";
    canvas.style.height = size[1] + "px";
    gl.useProgram(this.currentProgram_);
    for (var i = this.postProcessPasses_.length - 1; i >= 0; i--) {
      this.postProcessPasses_[i].init(frameState);
    }
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.clearColor(0, 0, 0, 0);
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);
    gl.useProgram(this.currentProgram_);
    this.applyFrameState(frameState);
    this.applyUniforms(frameState);
  };
  WebGLHelper2.prototype.prepareDrawToRenderTarget = function(frameState, renderTarget, opt_disableAlphaBlend) {
    var gl = this.getGL();
    var size = renderTarget.getSize();
    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());
    gl.viewport(0, 0, size[0], size[1]);
    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());
    gl.clearColor(0, 0, 0, 0);
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);
    gl.useProgram(this.currentProgram_);
    this.applyFrameState(frameState);
    this.applyUniforms(frameState);
  };
  WebGLHelper2.prototype.drawElements = function(start, end) {
    var gl = this.getGL();
    this.getExtension("OES_element_index_uint");
    var elementType = gl.UNSIGNED_INT;
    var elementSize = 4;
    var numItems = end - start;
    var offsetInBytes = start * elementSize;
    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);
  };
  WebGLHelper2.prototype.finalizeDraw = function(frameState) {
    for (var i = 0; i < this.postProcessPasses_.length; i++) {
      this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1] || null);
    }
  };
  WebGLHelper2.prototype.getCanvas = function() {
    return this.canvas_;
  };
  WebGLHelper2.prototype.getGL = function() {
    return this.gl_;
  };
  WebGLHelper2.prototype.applyFrameState = function(frameState) {
    var size = frameState.size;
    var rotation = frameState.viewState.rotation;
    var offsetScaleMatrix = reset(this.offsetScaleMatrix_);
    scale(offsetScaleMatrix, 2 / size[0], 2 / size[1]);
    var offsetRotateMatrix = reset(this.offsetRotateMatrix_);
    if (rotation !== 0) {
      rotate(offsetRotateMatrix, -rotation);
    }
    this.setUniformMatrixValue(DefaultUniform.OFFSET_SCALE_MATRIX, fromTransform(this.tmpMat4_, offsetScaleMatrix));
    this.setUniformMatrixValue(DefaultUniform.OFFSET_ROTATION_MATRIX, fromTransform(this.tmpMat4_, offsetRotateMatrix));
    this.setUniformFloatValue(DefaultUniform.TIME, (Date.now() - this.startTime_) * 1e-3);
    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);
    this.setUniformFloatValue(DefaultUniform.RESOLUTION, frameState.viewState.resolution);
  };
  WebGLHelper2.prototype.applyUniforms = function(frameState) {
    var gl = this.getGL();
    var value;
    var textureSlot = 0;
    this.uniforms_.forEach(function(uniform) {
      value = typeof uniform.value === "function" ? uniform.value(frameState) : uniform.value;
      if (value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof ImageData) {
        if (!uniform.texture) {
          uniform.prevValue = void 0;
          uniform.texture = gl.createTexture();
        }
        gl.activeTexture(gl["TEXTURE" + textureSlot]);
        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        var imageReady = !(value instanceof HTMLImageElement) || value.complete;
        if (imageReady && uniform.prevValue !== value) {
          uniform.prevValue = value;
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);
        }
        gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);
      } else if (Array.isArray(value) && value.length === 6) {
        this.setUniformMatrixValue(uniform.name, fromTransform(this.tmpMat4_, value));
      } else if (Array.isArray(value) && value.length <= 4) {
        switch (value.length) {
          case 2:
            gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);
            return;
          case 3:
            gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);
            return;
          case 4:
            gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);
            return;
          default:
            return;
        }
      } else if (typeof value === "number") {
        gl.uniform1f(this.getUniformLocation(uniform.name), value);
      }
    }.bind(this));
  };
  WebGLHelper2.prototype.useProgram = function(program) {
    if (program == this.currentProgram_) {
      return false;
    } else {
      var gl = this.getGL();
      gl.useProgram(program);
      this.currentProgram_ = program;
      this.uniformLocations_ = {};
      this.attribLocations_ = {};
      return true;
    }
  };
  WebGLHelper2.prototype.compileShader = function(source3, type) {
    var gl = this.getGL();
    var shader = gl.createShader(type);
    gl.shaderSource(shader, source3);
    gl.compileShader(shader);
    return shader;
  };
  WebGLHelper2.prototype.getProgram = function(fragmentShaderSource, vertexShaderSource) {
    var gl = this.getGL();
    var fragmentShader = this.compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);
    var vertexShader = this.compileShader(vertexShaderSource, gl.VERTEX_SHADER);
    var program = gl.createProgram();
    gl.attachShader(program, fragmentShader);
    gl.attachShader(program, vertexShader);
    gl.linkProgram(program);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
      var message = "Fragment shader compliation failed: " + gl.getShaderInfoLog(fragmentShader);
      throw new Error(message);
    }
    gl.deleteShader(fragmentShader);
    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
      var message = "Vertex shader compilation failed: " + gl.getShaderInfoLog(vertexShader);
      throw new Error(message);
    }
    gl.deleteShader(vertexShader);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      var message = "GL program linking failed: " + gl.getShaderInfoLog(vertexShader);
      throw new Error(message);
    }
    return program;
  };
  WebGLHelper2.prototype.getUniformLocation = function(name) {
    if (this.uniformLocations_[name] === void 0) {
      this.uniformLocations_[name] = this.getGL().getUniformLocation(this.currentProgram_, name);
    }
    return this.uniformLocations_[name];
  };
  WebGLHelper2.prototype.getAttributeLocation = function(name) {
    if (this.attribLocations_[name] === void 0) {
      this.attribLocations_[name] = this.getGL().getAttribLocation(this.currentProgram_, name);
    }
    return this.attribLocations_[name];
  };
  WebGLHelper2.prototype.makeProjectionTransform = function(frameState, transform) {
    var size = frameState.size;
    var rotation = frameState.viewState.rotation;
    var resolution = frameState.viewState.resolution;
    var center = frameState.viewState.center;
    reset(transform);
    compose(transform, 0, 0, 2 / (resolution * size[0]), 2 / (resolution * size[1]), -rotation, -center[0], -center[1]);
    return transform;
  };
  WebGLHelper2.prototype.setUniformFloatValue = function(uniform, value) {
    this.getGL().uniform1f(this.getUniformLocation(uniform), value);
  };
  WebGLHelper2.prototype.setUniformMatrixValue = function(uniform, value) {
    this.getGL().uniformMatrix4fv(this.getUniformLocation(uniform), false, value);
  };
  WebGLHelper2.prototype.enableAttributeArray_ = function(attribName, size, type, stride, offset) {
    var location = this.getAttributeLocation(attribName);
    if (location < 0) {
      return;
    }
    this.getGL().enableVertexAttribArray(location);
    this.getGL().vertexAttribPointer(location, size, type, false, stride, offset);
  };
  WebGLHelper2.prototype.enableAttributes = function(attributes) {
    var stride = computeAttributesStride(attributes);
    var offset = 0;
    for (var i = 0; i < attributes.length; i++) {
      var attr = attributes[i];
      this.enableAttributeArray_(attr.name, attr.size, attr.type || FLOAT, stride, offset);
      offset += attr.size * getByteSizeFromType(attr.type);
    }
  };
  WebGLHelper2.prototype.handleWebGLContextLost = function() {
    clear(this.bufferCache_);
    this.currentProgram_ = null;
  };
  WebGLHelper2.prototype.handleWebGLContextRestored = function() {
  };
  WebGLHelper2.prototype.createTexture = function(size, opt_data, opt_texture) {
    var gl = this.getGL();
    var texture = opt_texture || gl.createTexture();
    var level = 0;
    var internalFormat = gl.RGBA;
    var border = 0;
    var format = gl.RGBA;
    var type = gl.UNSIGNED_BYTE;
    gl.bindTexture(gl.TEXTURE_2D, texture);
    if (opt_data) {
      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, opt_data);
    } else {
      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, null);
    }
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    return texture;
  };
  return WebGLHelper2;
}(Disposable_default);
function computeAttributesStride(attributes) {
  var stride = 0;
  for (var i = 0; i < attributes.length; i++) {
    var attr = attributes[i];
    stride += attr.size * getByteSizeFromType(attr.type);
  }
  return stride;
}
function getByteSizeFromType(type) {
  switch (type) {
    case AttributeType.UNSIGNED_BYTE:
      return Uint8Array.BYTES_PER_ELEMENT;
    case AttributeType.UNSIGNED_SHORT:
      return Uint16Array.BYTES_PER_ELEMENT;
    case AttributeType.UNSIGNED_INT:
      return Uint32Array.BYTES_PER_ELEMENT;
    case AttributeType.FLOAT:
    default:
      return Float32Array.BYTES_PER_ELEMENT;
  }
}
var Helper_default = WebGLHelper;

// node_modules/ol/renderer/webgl/Layer.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var WebGLWorkerMessageType = {
  GENERATE_BUFFERS: "GENERATE_BUFFERS"
};
var WebGLLayerRenderer = function(_super) {
  __extends2(WebGLLayerRenderer2, _super);
  function WebGLLayerRenderer2(layer2, opt_options) {
    var _this = _super.call(this, layer2) || this;
    var options = opt_options || {};
    _this.helper = new Helper_default({
      postProcesses: options.postProcesses,
      uniforms: options.uniforms
    });
    if (options.className !== void 0) {
      _this.helper.getCanvas().className = options.className;
    }
    return _this;
  }
  WebGLLayerRenderer2.prototype.disposeInternal = function() {
    this.helper.dispose();
    delete this.helper;
    _super.prototype.disposeInternal.call(this);
  };
  WebGLLayerRenderer2.prototype.dispatchRenderEvent_ = function(type, frameState) {
    var layer2 = this.getLayer();
    if (layer2.hasListener(type)) {
      var event_1 = new Event_default2(type, null, frameState, null);
      layer2.dispatchEvent(event_1);
    }
  };
  WebGLLayerRenderer2.prototype.preRender = function(frameState) {
    this.dispatchRenderEvent_(EventType_default2.PRERENDER, frameState);
  };
  WebGLLayerRenderer2.prototype.postRender = function(frameState) {
    this.dispatchRenderEvent_(EventType_default2.POSTRENDER, frameState);
  };
  return WebGLLayerRenderer2;
}(Layer_default2);
function colorEncodeId(id, opt_array) {
  var array2 = opt_array || [];
  var radix = 256;
  var divide = radix - 1;
  array2[0] = Math.floor(id / radix / radix / radix) / divide;
  array2[1] = Math.floor(id / radix / radix) % radix / divide;
  array2[2] = Math.floor(id / radix) % radix / divide;
  array2[3] = id % radix / divide;
  return array2;
}
function colorDecodeId(color2) {
  var id = 0;
  var radix = 256;
  var mult = radix - 1;
  id += Math.round(color2[0] * radix * radix * radix * mult);
  id += Math.round(color2[1] * radix * radix * mult);
  id += Math.round(color2[2] * radix * mult);
  id += Math.round(color2[3] * mult);
  return id;
}
var Layer_default3 = WebGLLayerRenderer;

// node_modules/ol/webgl/RenderTarget.js
var tmpArray4 = new Uint8Array(4);
var WebGLRenderTarget = function() {
  function WebGLRenderTarget2(helper, opt_size) {
    this.helper_ = helper;
    var gl = helper.getGL();
    this.texture_ = gl.createTexture();
    this.framebuffer_ = gl.createFramebuffer();
    this.size_ = opt_size || [1, 1];
    this.data_ = new Uint8Array(0);
    this.dataCacheDirty_ = true;
    this.updateSize_();
  }
  WebGLRenderTarget2.prototype.setSize = function(size) {
    if (equals2(size, this.size_)) {
      return;
    }
    this.size_[0] = size[0];
    this.size_[1] = size[1];
    this.updateSize_();
  };
  WebGLRenderTarget2.prototype.getSize = function() {
    return this.size_;
  };
  WebGLRenderTarget2.prototype.clearCachedData = function() {
    this.dataCacheDirty_ = true;
  };
  WebGLRenderTarget2.prototype.readAll = function() {
    if (this.dataCacheDirty_) {
      var size = this.size_;
      var gl = this.helper_.getGL();
      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);
      gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);
      this.dataCacheDirty_ = false;
    }
    return this.data_;
  };
  WebGLRenderTarget2.prototype.readPixel = function(x, y) {
    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {
      tmpArray4[0] = 0;
      tmpArray4[1] = 0;
      tmpArray4[2] = 0;
      tmpArray4[3] = 0;
      return tmpArray4;
    }
    this.readAll();
    var index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];
    tmpArray4[0] = this.data_[index * 4];
    tmpArray4[1] = this.data_[index * 4 + 1];
    tmpArray4[2] = this.data_[index * 4 + 2];
    tmpArray4[3] = this.data_[index * 4 + 3];
    return tmpArray4;
  };
  WebGLRenderTarget2.prototype.getTexture = function() {
    return this.texture_;
  };
  WebGLRenderTarget2.prototype.getFramebuffer = function() {
    return this.framebuffer_;
  };
  WebGLRenderTarget2.prototype.updateSize_ = function() {
    var size = this.size_;
    var gl = this.helper_.getGL();
    this.texture_ = this.helper_.createTexture(size, null, this.texture_);
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);
    gl.viewport(0, 0, size[0], size[1]);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);
    this.data_ = new Uint8Array(size[0] * size[1] * 4);
  };
  return WebGLRenderTarget2;
}();
var RenderTarget_default = WebGLRenderTarget;

// node_modules/ol/worker/webgl.js
var source = 'var e="function"==typeof Object.assign?Object.assign:function(e,n){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),r=1,o=arguments.length;r<o;++r){var i=arguments[r];if(null!=i)for(var f in i)i.hasOwnProperty(f)&&(t[f]=i[f])}return t},n="GENERATE_BUFFERS",t=[],r={vertexPosition:0,indexPosition:0};function o(e,n,t,r,o){e[n+0]=t,e[n+1]=r,e[n+2]=o}function i(e,n,i,f,s,u){var a=3+s,l=e[n+0],v=e[n+1],c=t;c.length=s;for(var g=0;g<c.length;g++)c[g]=e[n+2+g];var b=u?u.vertexPosition:0,h=u?u.indexPosition:0,d=b/a;return o(i,b,l,v,0),c.length&&i.set(c,b+3),o(i,b+=a,l,v,1),c.length&&i.set(c,b+3),o(i,b+=a,l,v,2),c.length&&i.set(c,b+3),o(i,b+=a,l,v,3),c.length&&i.set(c,b+3),b+=a,f[h++]=d,f[h++]=d+1,f[h++]=d+3,f[h++]=d+1,f[h++]=d+2,f[h++]=d+3,r.vertexPosition=b,r.indexPosition=h,r}var f=self;f.onmessage=function(t){var r=t.data;if(r.type===n){for(var o=r.customAttributesCount,s=2+o,u=new Float32Array(r.renderInstructions),a=u.length/s,l=4*a*(o+3),v=new Uint32Array(6*a),c=new Float32Array(l),g=null,b=0;b<u.length;b+=s)g=i(u,b,c,v,o,g);var h=e({vertexBuffer:c.buffer,indexBuffer:v.buffer,renderInstructions:u.buffer},r);f.postMessage(h,[c.buffer,v.buffer,u.buffer])}};';
var blob = new Blob([source], { type: "application/javascript" });
var url = URL.createObjectURL(blob);
function create3() {
  return new Worker(url);
}

// node_modules/ol/renderer/webgl/PointsLayer.js
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var WebGLPointsLayerRenderer = function(_super) {
  __extends3(WebGLPointsLayerRenderer2, _super);
  function WebGLPointsLayerRenderer2(layer2, options) {
    var _this = this;
    var uniforms = options.uniforms || {};
    var projectionMatrixTransform = create();
    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;
    _this = _super.call(this, layer2, {
      className: options.className,
      uniforms,
      postProcesses: options.postProcesses
    }) || this;
    _this.sourceRevision_ = -1;
    _this.verticesBuffer_ = new Buffer_default(ARRAY_BUFFER, DYNAMIC_DRAW);
    _this.hitVerticesBuffer_ = new Buffer_default(ARRAY_BUFFER, DYNAMIC_DRAW);
    _this.indicesBuffer_ = new Buffer_default(ELEMENT_ARRAY_BUFFER, DYNAMIC_DRAW);
    _this.program_ = _this.helper.getProgram(options.fragmentShader, options.vertexShader);
    _this.hitDetectionEnabled_ = options.hitFragmentShader && options.hitVertexShader ? true : false;
    _this.hitProgram_ = _this.hitDetectionEnabled_ && _this.helper.getProgram(options.hitFragmentShader, options.hitVertexShader);
    var customAttributes = options.attributes ? options.attributes.map(function(attribute) {
      return {
        name: "a_" + attribute.name,
        size: 1,
        type: AttributeType.FLOAT
      };
    }) : [];
    _this.attributes = [
      {
        name: "a_position",
        size: 2,
        type: AttributeType.FLOAT
      },
      {
        name: "a_index",
        size: 1,
        type: AttributeType.FLOAT
      }
    ].concat(customAttributes);
    _this.hitDetectionAttributes = [
      {
        name: "a_position",
        size: 2,
        type: AttributeType.FLOAT
      },
      {
        name: "a_index",
        size: 1,
        type: AttributeType.FLOAT
      },
      {
        name: "a_hitColor",
        size: 4,
        type: AttributeType.FLOAT
      },
      {
        name: "a_featureUid",
        size: 1,
        type: AttributeType.FLOAT
      }
    ].concat(customAttributes);
    _this.customAttributes = options.attributes ? options.attributes : [];
    _this.previousExtent_ = createEmpty();
    _this.currentTransform_ = projectionMatrixTransform;
    _this.renderTransform_ = create();
    _this.invertRenderTransform_ = create();
    _this.renderInstructions_ = new Float32Array(0);
    _this.hitRenderInstructions_ = new Float32Array(0);
    _this.hitRenderTarget_ = _this.hitDetectionEnabled_ && new RenderTarget_default(_this.helper);
    _this.worker_ = create3();
    _this.worker_.addEventListener("message", function(event) {
      var received = event.data;
      if (received.type === WebGLWorkerMessageType.GENERATE_BUFFERS) {
        var projectionTransform = received.projectionTransform;
        if (received.hitDetection) {
          this.hitVerticesBuffer_.fromArrayBuffer(received.vertexBuffer);
          this.helper.flushBufferData(this.hitVerticesBuffer_);
        } else {
          this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);
          this.helper.flushBufferData(this.verticesBuffer_);
        }
        this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);
        this.helper.flushBufferData(this.indicesBuffer_);
        this.renderTransform_ = projectionTransform;
        makeInverse(this.invertRenderTransform_, this.renderTransform_);
        if (received.hitDetection) {
          this.hitRenderInstructions_ = new Float32Array(event.data.renderInstructions);
        } else {
          this.renderInstructions_ = new Float32Array(event.data.renderInstructions);
        }
        this.getLayer().changed();
      }
    }.bind(_this));
    _this.featureCache_ = {};
    _this.featureCount_ = 0;
    var source3 = _this.getLayer().getSource();
    _this.sourceListenKeys_ = [
      listen(source3, VectorEventType_default.ADDFEATURE, _this.handleSourceFeatureAdded_, _this),
      listen(source3, VectorEventType_default.CHANGEFEATURE, _this.handleSourceFeatureChanged_, _this),
      listen(source3, VectorEventType_default.REMOVEFEATURE, _this.handleSourceFeatureDelete_, _this),
      listen(source3, VectorEventType_default.CLEAR, _this.handleSourceFeatureClear_, _this)
    ];
    source3.forEachFeature(function(feature) {
      this.featureCache_[getUid(feature)] = {
        feature,
        properties: feature.getProperties(),
        geometry: feature.getGeometry()
      };
      this.featureCount_++;
    }.bind(_this));
    return _this;
  }
  WebGLPointsLayerRenderer2.prototype.handleSourceFeatureAdded_ = function(event) {
    var feature = event.feature;
    this.featureCache_[getUid(feature)] = {
      feature,
      properties: feature.getProperties(),
      geometry: feature.getGeometry()
    };
    this.featureCount_++;
  };
  WebGLPointsLayerRenderer2.prototype.handleSourceFeatureChanged_ = function(event) {
    var feature = event.feature;
    this.featureCache_[getUid(feature)] = {
      feature,
      properties: feature.getProperties(),
      geometry: feature.getGeometry()
    };
  };
  WebGLPointsLayerRenderer2.prototype.handleSourceFeatureDelete_ = function(event) {
    var feature = event.feature;
    delete this.featureCache_[getUid(feature)];
    this.featureCount_--;
  };
  WebGLPointsLayerRenderer2.prototype.handleSourceFeatureClear_ = function() {
    this.featureCache_ = {};
    this.featureCount_ = 0;
  };
  WebGLPointsLayerRenderer2.prototype.renderFrame = function(frameState) {
    this.preRender(frameState);
    var renderCount = this.indicesBuffer_.getSize();
    this.helper.drawElements(0, renderCount);
    this.helper.finalizeDraw(frameState);
    var canvas = this.helper.getCanvas();
    var layerState = frameState.layerStatesArray[frameState.layerIndex];
    var opacity = layerState.opacity;
    if (opacity !== parseFloat(canvas.style.opacity)) {
      canvas.style.opacity = String(opacity);
    }
    if (this.hitDetectionEnabled_) {
      this.renderHitDetection(frameState);
      this.hitRenderTarget_.clearCachedData();
    }
    this.postRender(frameState);
    return canvas;
  };
  WebGLPointsLayerRenderer2.prototype.prepareFrame = function(frameState) {
    var layer2 = this.getLayer();
    var vectorSource = layer2.getSource();
    var viewState = frameState.viewState;
    var viewNotMoving = !frameState.viewHints[ViewHint_default.ANIMATING] && !frameState.viewHints[ViewHint_default.INTERACTING];
    var extentChanged = !equals(this.previousExtent_, frameState.extent);
    var sourceChanged = this.sourceRevision_ < vectorSource.getRevision();
    if (sourceChanged) {
      this.sourceRevision_ = vectorSource.getRevision();
    }
    if (viewNotMoving && (extentChanged || sourceChanged)) {
      var projection = viewState.projection;
      var resolution = viewState.resolution;
      var renderBuffer = layer2 instanceof BaseVector_default ? layer2.getRenderBuffer() : 0;
      var extent = buffer(frameState.extent, renderBuffer * resolution);
      vectorSource.loadFeatures(extent, resolution, projection);
      this.rebuildBuffers_(frameState);
      this.previousExtent_ = frameState.extent.slice();
    }
    this.helper.makeProjectionTransform(frameState, this.currentTransform_);
    multiply(this.currentTransform_, this.invertRenderTransform_);
    this.helper.useProgram(this.program_);
    this.helper.prepareDraw(frameState);
    this.helper.bindBuffer(this.verticesBuffer_);
    this.helper.bindBuffer(this.indicesBuffer_);
    this.helper.enableAttributes(this.attributes);
    return true;
  };
  WebGLPointsLayerRenderer2.prototype.rebuildBuffers_ = function(frameState) {
    var projectionTransform = create();
    this.helper.makeProjectionTransform(frameState, projectionTransform);
    var totalInstructionsCount = (2 + this.customAttributes.length) * this.featureCount_;
    if (!this.renderInstructions_ || this.renderInstructions_.length !== totalInstructionsCount) {
      this.renderInstructions_ = new Float32Array(totalInstructionsCount);
    }
    if (this.hitDetectionEnabled_) {
      var totalHitInstructionsCount = (7 + this.customAttributes.length) * this.featureCount_;
      if (!this.hitRenderInstructions_ || this.hitRenderInstructions_.length !== totalHitInstructionsCount) {
        this.hitRenderInstructions_ = new Float32Array(totalHitInstructionsCount);
      }
    }
    var featureCache, geometry;
    var tmpCoords = [];
    var tmpColor = [];
    var renderIndex = 0;
    var hitIndex = 0;
    var hitColor;
    for (var featureUid in this.featureCache_) {
      featureCache = this.featureCache_[featureUid];
      geometry = featureCache.geometry;
      if (!geometry || geometry.getType() !== GeometryType_default.POINT) {
        continue;
      }
      tmpCoords[0] = geometry.getFlatCoordinates()[0];
      tmpCoords[1] = geometry.getFlatCoordinates()[1];
      apply(projectionTransform, tmpCoords);
      hitColor = colorEncodeId(hitIndex + 6, tmpColor);
      this.renderInstructions_[renderIndex++] = tmpCoords[0];
      this.renderInstructions_[renderIndex++] = tmpCoords[1];
      if (this.hitDetectionEnabled_) {
        this.hitRenderInstructions_[hitIndex++] = tmpCoords[0];
        this.hitRenderInstructions_[hitIndex++] = tmpCoords[1];
        this.hitRenderInstructions_[hitIndex++] = hitColor[0];
        this.hitRenderInstructions_[hitIndex++] = hitColor[1];
        this.hitRenderInstructions_[hitIndex++] = hitColor[2];
        this.hitRenderInstructions_[hitIndex++] = hitColor[3];
        this.hitRenderInstructions_[hitIndex++] = Number(featureUid);
      }
      var value = void 0;
      for (var j = 0; j < this.customAttributes.length; j++) {
        value = this.customAttributes[j].callback(featureCache.feature, featureCache.properties);
        this.renderInstructions_[renderIndex++] = value;
        if (this.hitDetectionEnabled_) {
          this.hitRenderInstructions_[hitIndex++] = value;
        }
      }
    }
    var message = {
      type: WebGLWorkerMessageType.GENERATE_BUFFERS,
      renderInstructions: this.renderInstructions_.buffer,
      customAttributesCount: this.customAttributes.length
    };
    message["projectionTransform"] = projectionTransform;
    this.worker_.postMessage(message, [this.renderInstructions_.buffer]);
    this.renderInstructions_ = null;
    if (this.hitDetectionEnabled_) {
      var hitMessage = {
        type: WebGLWorkerMessageType.GENERATE_BUFFERS,
        renderInstructions: this.hitRenderInstructions_.buffer,
        customAttributesCount: 5 + this.customAttributes.length
      };
      hitMessage["projectionTransform"] = projectionTransform;
      hitMessage["hitDetection"] = true;
      this.worker_.postMessage(hitMessage, [
        this.hitRenderInstructions_.buffer
      ]);
      this.hitRenderInstructions_ = null;
    }
  };
  WebGLPointsLayerRenderer2.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, matches) {
    assert(this.hitDetectionEnabled_, 66);
    if (!this.hitRenderInstructions_) {
      return void 0;
    }
    var pixel = apply(frameState.coordinateToPixelTransform, coordinate.slice());
    var data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);
    var color2 = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];
    var index = colorDecodeId(color2);
    var opacity = this.hitRenderInstructions_[index];
    var uid = Math.floor(opacity).toString();
    var source3 = this.getLayer().getSource();
    var feature = source3.getFeatureByUid(uid);
    if (feature) {
      return callback(feature, this.getLayer(), null);
    }
    return void 0;
  };
  WebGLPointsLayerRenderer2.prototype.renderHitDetection = function(frameState) {
    if (!this.hitVerticesBuffer_.getSize()) {
      return;
    }
    this.hitRenderTarget_.setSize([
      Math.floor(frameState.size[0] / 2),
      Math.floor(frameState.size[1] / 2)
    ]);
    this.helper.useProgram(this.hitProgram_);
    this.helper.prepareDrawToRenderTarget(frameState, this.hitRenderTarget_, true);
    this.helper.bindBuffer(this.hitVerticesBuffer_);
    this.helper.bindBuffer(this.indicesBuffer_);
    this.helper.enableAttributes(this.hitDetectionAttributes);
    var renderCount = this.indicesBuffer_.getSize();
    this.helper.drawElements(0, renderCount);
  };
  WebGLPointsLayerRenderer2.prototype.disposeInternal = function() {
    this.worker_.terminate();
    this.layer_ = null;
    this.sourceListenKeys_.forEach(function(key) {
      unlistenByKey(key);
    });
    this.sourceListenKeys_ = null;
    _super.prototype.disposeInternal.call(this);
  };
  return WebGLPointsLayerRenderer2;
}(Layer_default3);
var PointsLayer_default = WebGLPointsLayerRenderer;

// node_modules/ol/layer/Heatmap.js
var __extends4 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Property = {
  BLUR: "blur",
  GRADIENT: "gradient",
  RADIUS: "radius"
};
var DEFAULT_GRADIENT = ["#00f", "#0ff", "#0f0", "#ff0", "#f00"];
var Heatmap = function(_super) {
  __extends4(Heatmap2, _super);
  function Heatmap2(opt_options) {
    var _this = this;
    var options = opt_options ? opt_options : {};
    var baseOptions = assign({}, options);
    delete baseOptions.gradient;
    delete baseOptions.radius;
    delete baseOptions.blur;
    delete baseOptions.weight;
    _this = _super.call(this, baseOptions) || this;
    _this.gradient_ = null;
    _this.addChangeListener(Property.GRADIENT, _this.handleGradientChanged_);
    _this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);
    _this.setBlur(options.blur !== void 0 ? options.blur : 15);
    _this.setRadius(options.radius !== void 0 ? options.radius : 8);
    var weight = options.weight ? options.weight : "weight";
    if (typeof weight === "string") {
      _this.weightFunction_ = function(feature) {
        return feature.get(weight);
      };
    } else {
      _this.weightFunction_ = weight;
    }
    _this.setRenderOrder(null);
    return _this;
  }
  Heatmap2.prototype.getBlur = function() {
    return this.get(Property.BLUR);
  };
  Heatmap2.prototype.getGradient = function() {
    return this.get(Property.GRADIENT);
  };
  Heatmap2.prototype.getRadius = function() {
    return this.get(Property.RADIUS);
  };
  Heatmap2.prototype.handleGradientChanged_ = function() {
    this.gradient_ = createGradient(this.getGradient());
  };
  Heatmap2.prototype.setBlur = function(blur) {
    this.set(Property.BLUR, blur);
  };
  Heatmap2.prototype.setGradient = function(colors) {
    this.set(Property.GRADIENT, colors);
  };
  Heatmap2.prototype.setRadius = function(radius) {
    this.set(Property.RADIUS, radius);
  };
  Heatmap2.prototype.createRenderer = function() {
    return new PointsLayer_default(this, {
      className: this.getClassName(),
      attributes: [
        {
          name: "weight",
          callback: function(feature) {
            var weight = this.weightFunction_(feature);
            return weight !== void 0 ? clamp(weight, 0, 1) : 1;
          }.bind(this)
        }
      ],
      vertexShader: "\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_weight = a_weight;\n        }",
      fragmentShader: "\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\n        }",
      hitVertexShader: "\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n        attribute vec4 a_hitColor;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_hitColor = a_hitColor;\n          v_weight = a_weight;\n        }",
      hitFragmentShader: "\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          if (alpha < 0.05) {\n            discard;\n          }\n\n          gl_FragColor = v_hitColor;\n        }",
      uniforms: {
        u_size: function() {
          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;
        }.bind(this),
        u_blurSlope: function() {
          return this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR));
        }.bind(this)
      },
      postProcesses: [
        {
          fragmentShader: "\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }",
          uniforms: {
            u_gradientTexture: function() {
              return this.gradient_;
            }.bind(this)
          }
        }
      ]
    });
  };
  Heatmap2.prototype.renderDeclutter = function() {
  };
  return Heatmap2;
}(Vector_default);
function createGradient(colors) {
  var width = 1;
  var height = 256;
  var context = createCanvasContext2D(width, height);
  var gradient = context.createLinearGradient(0, 0, width, height);
  var step = 1 / (colors.length - 1);
  for (var i = 0, ii = colors.length; i < ii; ++i) {
    gradient.addColorStop(i * step, colors[i]);
  }
  context.fillStyle = gradient;
  context.fillRect(0, 0, width, height);
  return context.canvas;
}
var Heatmap_default = Heatmap;

// node_modules/ol/format/Feature.js
var FeatureFormat = function() {
  function FeatureFormat2() {
    this.dataProjection = void 0;
    this.defaultFeatureProjection = void 0;
    this.supportedMediaTypes = null;
  }
  FeatureFormat2.prototype.getReadOptions = function(source3, opt_options) {
    var options;
    if (opt_options) {
      var dataProjection = opt_options.dataProjection ? get(opt_options.dataProjection) : this.readProjection(source3);
      if (opt_options.extent && dataProjection && dataProjection.getUnits() === Units_default.TILE_PIXELS) {
        dataProjection = get(dataProjection);
        dataProjection.setWorldExtent(opt_options.extent);
      }
      options = {
        dataProjection,
        featureProjection: opt_options.featureProjection
      };
    }
    return this.adaptOptions(options);
  };
  FeatureFormat2.prototype.adaptOptions = function(options) {
    return assign({
      dataProjection: this.dataProjection,
      featureProjection: this.defaultFeatureProjection
    }, options);
  };
  FeatureFormat2.prototype.getType = function() {
    return abstract();
  };
  FeatureFormat2.prototype.readFeature = function(source3, opt_options) {
    return abstract();
  };
  FeatureFormat2.prototype.readFeatures = function(source3, opt_options) {
    return abstract();
  };
  FeatureFormat2.prototype.readGeometry = function(source3, opt_options) {
    return abstract();
  };
  FeatureFormat2.prototype.readProjection = function(source3) {
    return abstract();
  };
  FeatureFormat2.prototype.writeFeature = function(feature, opt_options) {
    return abstract();
  };
  FeatureFormat2.prototype.writeFeatures = function(features, opt_options) {
    return abstract();
  };
  FeatureFormat2.prototype.writeGeometry = function(geometry, opt_options) {
    return abstract();
  };
  return FeatureFormat2;
}();
var Feature_default2 = FeatureFormat;
function transformGeometryWithOptions(geometry, write, opt_options) {
  var featureProjection = opt_options ? get(opt_options.featureProjection) : null;
  var dataProjection = opt_options ? get(opt_options.dataProjection) : null;
  var transformed;
  if (featureProjection && dataProjection && !equivalent(featureProjection, dataProjection)) {
    transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);
  } else {
    transformed = geometry;
  }
  if (write && opt_options && opt_options.decimals !== void 0) {
    var power_1 = Math.pow(10, opt_options.decimals);
    var transform = function(coordinates) {
      for (var i = 0, ii = coordinates.length; i < ii; ++i) {
        coordinates[i] = Math.round(coordinates[i] * power_1) / power_1;
      }
      return coordinates;
    };
    if (transformed === geometry) {
      transformed = geometry.clone();
    }
    transformed.applyTransform(transform);
  }
  return transformed;
}

// node_modules/ol/format/MVT.js
var import_pbf = __toModule(require_pbf());

// node_modules/ol/render/Feature.js
var tmpTransform = create();
var RenderFeature = function() {
  function RenderFeature2(type, flatCoordinates, ends, properties, id) {
    this.extent_;
    this.id_ = id;
    this.type_ = type;
    this.flatCoordinates_ = flatCoordinates;
    this.flatInteriorPoints_ = null;
    this.flatMidpoints_ = null;
    this.ends_ = ends;
    this.properties_ = properties;
  }
  RenderFeature2.prototype.get = function(key) {
    return this.properties_[key];
  };
  RenderFeature2.prototype.getExtent = function() {
    if (!this.extent_) {
      this.extent_ = this.type_ === GeometryType_default.POINT ? createOrUpdateFromCoordinate(this.flatCoordinates_) : createOrUpdateFromFlatCoordinates(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);
    }
    return this.extent_;
  };
  RenderFeature2.prototype.getFlatInteriorPoint = function() {
    if (!this.flatInteriorPoints_) {
      var flatCenter = getCenter(this.getExtent());
      this.flatInteriorPoints_ = getInteriorPointOfArray(this.flatCoordinates_, 0, this.ends_, 2, flatCenter, 0);
    }
    return this.flatInteriorPoints_;
  };
  RenderFeature2.prototype.getFlatInteriorPoints = function() {
    if (!this.flatInteriorPoints_) {
      var flatCenters = linearRingss(this.flatCoordinates_, 0, this.ends_, 2);
      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.flatCoordinates_, 0, this.ends_, 2, flatCenters);
    }
    return this.flatInteriorPoints_;
  };
  RenderFeature2.prototype.getFlatMidpoint = function() {
    if (!this.flatMidpoints_) {
      this.flatMidpoints_ = interpolatePoint(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);
    }
    return this.flatMidpoints_;
  };
  RenderFeature2.prototype.getFlatMidpoints = function() {
    if (!this.flatMidpoints_) {
      this.flatMidpoints_ = [];
      var flatCoordinates = this.flatCoordinates_;
      var offset = 0;
      var ends = this.ends_;
      for (var i = 0, ii = ends.length; i < ii; ++i) {
        var end = ends[i];
        var midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);
        extend(this.flatMidpoints_, midpoint);
        offset = end;
      }
    }
    return this.flatMidpoints_;
  };
  RenderFeature2.prototype.getId = function() {
    return this.id_;
  };
  RenderFeature2.prototype.getOrientedFlatCoordinates = function() {
    return this.flatCoordinates_;
  };
  RenderFeature2.prototype.getGeometry = function() {
    return this;
  };
  RenderFeature2.prototype.getSimplifiedGeometry = function(squaredTolerance) {
    return this;
  };
  RenderFeature2.prototype.simplifyTransformed = function(squaredTolerance, opt_transform) {
    return this;
  };
  RenderFeature2.prototype.getProperties = function() {
    return this.properties_;
  };
  RenderFeature2.prototype.getStride = function() {
    return 2;
  };
  RenderFeature2.prototype.getStyleFunction = function() {
    return void 0;
  };
  RenderFeature2.prototype.getType = function() {
    return this.type_;
  };
  RenderFeature2.prototype.transform = function(projection) {
    projection = get(projection);
    var pixelExtent = projection.getExtent();
    var projectedExtent = projection.getWorldExtent();
    if (pixelExtent && projectedExtent) {
      var scale2 = getHeight(projectedExtent) / getHeight(pixelExtent);
      compose(tmpTransform, projectedExtent[0], projectedExtent[3], scale2, -scale2, 0, 0, 0);
      transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_);
    }
  };
  RenderFeature2.prototype.getEnds = function() {
    return this.ends_;
  };
  return RenderFeature2;
}();
RenderFeature.prototype.getEndss = RenderFeature.prototype.getEnds;
RenderFeature.prototype.getFlatCoordinates = RenderFeature.prototype.getOrientedFlatCoordinates;
var Feature_default3 = RenderFeature;

// node_modules/ol/format/MVT.js
var __extends5 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MVT = function(_super) {
  __extends5(MVT2, _super);
  function MVT2(opt_options) {
    var _this = _super.call(this) || this;
    var options = opt_options ? opt_options : {};
    _this.dataProjection = new Projection_default({
      code: "",
      units: Units_default.TILE_PIXELS
    });
    _this.featureClass_ = options.featureClass ? options.featureClass : Feature_default3;
    _this.geometryName_ = options.geometryName;
    _this.layerName_ = options.layerName ? options.layerName : "layer";
    _this.layers_ = options.layers ? options.layers : null;
    _this.idProperty_ = options.idProperty;
    _this.supportedMediaTypes = [
      "application/vnd.mapbox-vector-tile",
      "application/x-protobuf"
    ];
    return _this;
  }
  MVT2.prototype.readRawGeometry_ = function(pbf, feature, flatCoordinates, ends) {
    pbf.pos = feature.geometry;
    var end = pbf.readVarint() + pbf.pos;
    var cmd = 1;
    var length = 0;
    var x = 0;
    var y = 0;
    var coordsLen = 0;
    var currentEnd = 0;
    while (pbf.pos < end) {
      if (!length) {
        var cmdLen = pbf.readVarint();
        cmd = cmdLen & 7;
        length = cmdLen >> 3;
      }
      length--;
      if (cmd === 1 || cmd === 2) {
        x += pbf.readSVarint();
        y += pbf.readSVarint();
        if (cmd === 1) {
          if (coordsLen > currentEnd) {
            ends.push(coordsLen);
            currentEnd = coordsLen;
          }
        }
        flatCoordinates.push(x, y);
        coordsLen += 2;
      } else if (cmd === 7) {
        if (coordsLen > currentEnd) {
          flatCoordinates.push(flatCoordinates[currentEnd], flatCoordinates[currentEnd + 1]);
          coordsLen += 2;
        }
      } else {
        assert(false, 59);
      }
    }
    if (coordsLen > currentEnd) {
      ends.push(coordsLen);
      currentEnd = coordsLen;
    }
  };
  MVT2.prototype.createFeature_ = function(pbf, rawFeature, options) {
    var type = rawFeature.type;
    if (type === 0) {
      return null;
    }
    var feature;
    var values = rawFeature.properties;
    var id;
    if (!this.idProperty_) {
      id = rawFeature.id;
    } else {
      id = values[this.idProperty_];
      delete values[this.idProperty_];
    }
    values[this.layerName_] = rawFeature.layer.name;
    var flatCoordinates = [];
    var ends = [];
    this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);
    var geometryType = getGeometryType(type, ends.length);
    if (this.featureClass_ === Feature_default3) {
      feature = new this.featureClass_(geometryType, flatCoordinates, ends, values, id);
      feature.transform(options.dataProjection);
    } else {
      var geom = void 0;
      if (geometryType == GeometryType_default.POLYGON) {
        var endss = [];
        var offset = 0;
        var prevEndIndex = 0;
        for (var i = 0, ii = ends.length; i < ii; ++i) {
          var end = ends[i];
          if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {
            endss.push(ends.slice(prevEndIndex, i + 1));
          } else {
            if (endss.length === 0) {
              continue;
            }
            endss[endss.length - 1].push(ends[prevEndIndex]);
          }
          prevEndIndex = i + 1;
          offset = end;
        }
        if (endss.length > 1) {
          geom = new MultiPolygon_default(flatCoordinates, GeometryLayout_default.XY, endss);
        } else {
          geom = new Polygon_default(flatCoordinates, GeometryLayout_default.XY, ends);
        }
      } else {
        geom = geometryType === GeometryType_default.POINT ? new Point_default(flatCoordinates, GeometryLayout_default.XY) : geometryType === GeometryType_default.LINE_STRING ? new LineString_default(flatCoordinates, GeometryLayout_default.XY) : geometryType === GeometryType_default.POLYGON ? new Polygon_default(flatCoordinates, GeometryLayout_default.XY, ends) : geometryType === GeometryType_default.MULTI_POINT ? new MultiPoint_default(flatCoordinates, GeometryLayout_default.XY) : geometryType === GeometryType_default.MULTI_LINE_STRING ? new MultiLineString_default(flatCoordinates, GeometryLayout_default.XY, ends) : null;
      }
      var ctor = this.featureClass_;
      feature = new ctor();
      if (this.geometryName_) {
        feature.setGeometryName(this.geometryName_);
      }
      var geometry = transformGeometryWithOptions(geom, false, options);
      feature.setGeometry(geometry);
      feature.setId(id);
      feature.setProperties(values, true);
    }
    return feature;
  };
  MVT2.prototype.getType = function() {
    return FormatType_default.ARRAY_BUFFER;
  };
  MVT2.prototype.readFeatures = function(source3, opt_options) {
    var layers = this.layers_;
    var options = this.adaptOptions(opt_options);
    var dataProjection = get(options.dataProjection);
    dataProjection.setWorldExtent(options.extent);
    options.dataProjection = dataProjection;
    var pbf = new import_pbf.default(source3);
    var pbfLayers = pbf.readFields(layersPBFReader, {});
    var features = [];
    for (var name_1 in pbfLayers) {
      if (layers && layers.indexOf(name_1) == -1) {
        continue;
      }
      var pbfLayer = pbfLayers[name_1];
      var extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
      dataProjection.setExtent(extent);
      for (var i = 0, ii = pbfLayer.length; i < ii; ++i) {
        var rawFeature = readRawFeature(pbf, pbfLayer, i);
        features.push(this.createFeature_(pbf, rawFeature, options));
      }
    }
    return features;
  };
  MVT2.prototype.readProjection = function(source3) {
    return this.dataProjection;
  };
  MVT2.prototype.setLayers = function(layers) {
    this.layers_ = layers;
  };
  return MVT2;
}(Feature_default2);
function layersPBFReader(tag, layers, pbf) {
  if (tag === 3) {
    var layer2 = {
      keys: [],
      values: [],
      features: []
    };
    var end = pbf.readVarint() + pbf.pos;
    pbf.readFields(layerPBFReader, layer2, end);
    layer2.length = layer2.features.length;
    if (layer2.length) {
      layers[layer2.name] = layer2;
    }
  }
}
function layerPBFReader(tag, layer2, pbf) {
  if (tag === 15) {
    layer2.version = pbf.readVarint();
  } else if (tag === 1) {
    layer2.name = pbf.readString();
  } else if (tag === 5) {
    layer2.extent = pbf.readVarint();
  } else if (tag === 2) {
    layer2.features.push(pbf.pos);
  } else if (tag === 3) {
    layer2.keys.push(pbf.readString());
  } else if (tag === 4) {
    var value = null;
    var end = pbf.readVarint() + pbf.pos;
    while (pbf.pos < end) {
      tag = pbf.readVarint() >> 3;
      value = tag === 1 ? pbf.readString() : tag === 2 ? pbf.readFloat() : tag === 3 ? pbf.readDouble() : tag === 4 ? pbf.readVarint64() : tag === 5 ? pbf.readVarint() : tag === 6 ? pbf.readSVarint() : tag === 7 ? pbf.readBoolean() : null;
    }
    layer2.values.push(value);
  }
}
function featurePBFReader(tag, feature, pbf) {
  if (tag == 1) {
    feature.id = pbf.readVarint();
  } else if (tag == 2) {
    var end = pbf.readVarint() + pbf.pos;
    while (pbf.pos < end) {
      var key = feature.layer.keys[pbf.readVarint()];
      var value = feature.layer.values[pbf.readVarint()];
      feature.properties[key] = value;
    }
  } else if (tag == 3) {
    feature.type = pbf.readVarint();
  } else if (tag == 4) {
    feature.geometry = pbf.pos;
  }
}
function readRawFeature(pbf, layer2, i) {
  pbf.pos = layer2.features[i];
  var end = pbf.readVarint() + pbf.pos;
  var feature = {
    layer: layer2,
    type: 0,
    properties: {}
  };
  pbf.readFields(featurePBFReader, feature, end);
  return feature;
}
function getGeometryType(type, numEnds) {
  var geometryType;
  if (type === 1) {
    geometryType = numEnds === 1 ? GeometryType_default.POINT : GeometryType_default.MULTI_POINT;
  } else if (type === 2) {
    geometryType = numEnds === 1 ? GeometryType_default.LINE_STRING : GeometryType_default.MULTI_LINE_STRING;
  } else if (type === 3) {
    geometryType = GeometryType_default.POLYGON;
  }
  return geometryType;
}
var MVT_default = MVT;

// node_modules/ol/layer/VectorTileRenderType.js
var VectorTileRenderType_default = {
  IMAGE: "image",
  HYBRID: "hybrid",
  VECTOR: "vector"
};

// node_modules/ol/renderer/canvas/VectorTileLayer.js
var __extends6 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var IMAGE_REPLAYS = {
  "image": [
    BuilderType_default.POLYGON,
    BuilderType_default.CIRCLE,
    BuilderType_default.LINE_STRING,
    BuilderType_default.IMAGE,
    BuilderType_default.TEXT
  ],
  "hybrid": [BuilderType_default.POLYGON, BuilderType_default.LINE_STRING],
  "vector": []
};
var VECTOR_REPLAYS = {
  "hybrid": [BuilderType_default.IMAGE, BuilderType_default.TEXT, BuilderType_default.DEFAULT],
  "vector": [
    BuilderType_default.POLYGON,
    BuilderType_default.CIRCLE,
    BuilderType_default.LINE_STRING,
    BuilderType_default.IMAGE,
    BuilderType_default.TEXT,
    BuilderType_default.DEFAULT
  ]
};
var CanvasVectorTileLayerRenderer = function(_super) {
  __extends6(CanvasVectorTileLayerRenderer2, _super);
  function CanvasVectorTileLayerRenderer2(layer2) {
    var _this = _super.call(this, layer2) || this;
    _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);
    _this.dirty_ = false;
    _this.renderedLayerRevision_;
    _this.renderedPixelToCoordinateTransform_ = null;
    _this.renderedRotation_;
    _this.tmpTransform_ = create();
    return _this;
  }
  CanvasVectorTileLayerRenderer2.prototype.prepareTile = function(tile, pixelRatio, projection) {
    var render;
    var state = tile.getState();
    if (state === TileState_default.LOADED || state === TileState_default.ERROR) {
      this.updateExecutorGroup_(tile, pixelRatio, projection);
      if (this.tileImageNeedsRender_(tile)) {
        render = true;
      }
    }
    return render;
  };
  CanvasVectorTileLayerRenderer2.prototype.getTile = function(z, x, y, frameState) {
    var pixelRatio = frameState.pixelRatio;
    var viewState = frameState.viewState;
    var resolution = viewState.resolution;
    var projection = viewState.projection;
    var layer2 = this.getLayer();
    var tile = layer2.getSource().getTile(z, x, y, pixelRatio, projection);
    var viewHints = frameState.viewHints;
    var hifi = !(viewHints[ViewHint_default.ANIMATING] || viewHints[ViewHint_default.INTERACTING]);
    if (hifi || !tile.wantedResolution) {
      tile.wantedResolution = resolution;
    }
    var render = this.prepareTile(tile, pixelRatio, projection);
    if (render && (hifi || Date.now() - frameState.time < 8) && layer2.getRenderMode() !== VectorTileRenderType_default.VECTOR) {
      this.renderTileImage_(tile, frameState);
    }
    return _super.prototype.getTile.call(this, z, x, y, frameState);
  };
  CanvasVectorTileLayerRenderer2.prototype.isDrawableTile = function(tile) {
    var layer2 = this.getLayer();
    return _super.prototype.isDrawableTile.call(this, tile) && (layer2.getRenderMode() === VectorTileRenderType_default.VECTOR ? getUid(layer2) in tile.executorGroups : tile.hasContext(layer2));
  };
  CanvasVectorTileLayerRenderer2.prototype.getTileImage = function(tile) {
    return tile.getImage(this.getLayer());
  };
  CanvasVectorTileLayerRenderer2.prototype.prepareFrame = function(frameState) {
    var layerRevision = this.getLayer().getRevision();
    if (this.renderedLayerRevision_ != layerRevision) {
      this.renderedTiles.length = 0;
    }
    this.renderedLayerRevision_ = layerRevision;
    return _super.prototype.prepareFrame.call(this, frameState);
  };
  CanvasVectorTileLayerRenderer2.prototype.updateExecutorGroup_ = function(tile, pixelRatio, projection) {
    var layer2 = this.getLayer();
    var revision = layer2.getRevision();
    var renderOrder = layer2.getRenderOrder() || null;
    var resolution = tile.wantedResolution;
    var builderState = tile.getReplayState(layer2);
    if (!builderState.dirty && builderState.renderedResolution === resolution && builderState.renderedRevision == revision && builderState.renderedRenderOrder == renderOrder) {
      return;
    }
    var source3 = layer2.getSource();
    var declutter = layer2.getDeclutter();
    var sourceTileGrid = source3.getTileGrid();
    var tileGrid = source3.getTileGridForProjection(projection);
    var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
    var sourceTiles = source3.getSourceTiles(pixelRatio, projection, tile);
    var layerUid = getUid(layer2);
    delete tile.hitDetectionImageData[layerUid];
    tile.executorGroups[layerUid] = [];
    if (declutter) {
      tile.declutterExecutorGroups[layerUid] = [];
    }
    var _loop_1 = function(t4, tt2) {
      var sourceTile = sourceTiles[t4];
      if (sourceTile.getState() != TileState_default.LOADED) {
        return "continue";
      }
      var sourceTileCoord = sourceTile.tileCoord;
      var sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
      var sharedExtent = getIntersection(tileExtent, sourceTileExtent);
      var builderExtent = buffer(sharedExtent, layer2.getRenderBuffer() * resolution, this_1.tmpExtent);
      var bufferedExtent = equals(sourceTileExtent, sharedExtent) ? null : builderExtent;
      builderState.dirty = false;
      var builderGroup = new BuilderGroup_default(0, builderExtent, resolution, pixelRatio);
      var declutterBuilderGroup = declutter ? new BuilderGroup_default(0, sharedExtent, resolution, pixelRatio) : void 0;
      var squaredTolerance = getSquaredTolerance(resolution, pixelRatio);
      var render = function(feature2) {
        var styles;
        var styleFunction2 = feature2.getStyleFunction() || layer2.getStyleFunction();
        if (styleFunction2) {
          styles = styleFunction2(feature2, resolution);
        }
        if (styles) {
          var dirty = this.renderFeature(feature2, squaredTolerance, styles, builderGroup, declutterBuilderGroup);
          this.dirty_ = this.dirty_ || dirty;
          builderState.dirty = builderState.dirty || dirty;
        }
      };
      var features = sourceTile.getFeatures();
      if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {
        features.sort(renderOrder);
      }
      for (var i = 0, ii = features.length; i < ii; ++i) {
        var feature = features[i];
        if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {
          render.call(this_1, feature);
        }
      }
      var executorGroupInstructions = builderGroup.finish();
      var replayExtent = layer2.getRenderMode() !== VectorTileRenderType_default.VECTOR && declutter && sourceTiles.length === 1 ? null : sharedExtent;
      var renderingReplayGroup = new ExecutorGroup_default(replayExtent, resolution, pixelRatio, source3.getOverlaps(), executorGroupInstructions, layer2.getRenderBuffer());
      tile.executorGroups[layerUid].push(renderingReplayGroup);
      if (declutterBuilderGroup) {
        var declutterExecutorGroup = new ExecutorGroup_default(null, resolution, pixelRatio, source3.getOverlaps(), declutterBuilderGroup.finish(), layer2.getRenderBuffer());
        tile.declutterExecutorGroups[layerUid].push(declutterExecutorGroup);
      }
    };
    var this_1 = this;
    for (var t = 0, tt = sourceTiles.length; t < tt; ++t) {
      _loop_1(t, tt);
    }
    builderState.renderedRevision = revision;
    builderState.renderedRenderOrder = renderOrder;
    builderState.renderedResolution = resolution;
  };
  CanvasVectorTileLayerRenderer2.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, matches) {
    var resolution = frameState.viewState.resolution;
    var rotation = frameState.viewState.rotation;
    hitTolerance = hitTolerance == void 0 ? 0 : hitTolerance;
    var layer2 = this.getLayer();
    var source3 = layer2.getSource();
    var tileGrid = source3.getTileGridForProjection(frameState.viewState.projection);
    var hitExtent = boundingExtent([coordinate]);
    buffer(hitExtent, resolution * hitTolerance, hitExtent);
    var features = {};
    var featureCallback = function(feature, geometry, distanceSq) {
      var key = feature.getId();
      if (key === void 0) {
        key = getUid(feature);
      }
      var match = features[key];
      if (!match) {
        if (distanceSq === 0) {
          features[key] = true;
          return callback(feature, layer2, geometry);
        }
        matches.push(features[key] = {
          feature,
          layer: layer2,
          geometry,
          distanceSq,
          callback
        });
      } else if (match !== true && distanceSq < match.distanceSq) {
        if (distanceSq === 0) {
          features[key] = true;
          matches.splice(matches.lastIndexOf(match), 1);
          return callback(feature, layer2, geometry);
        }
        match.geometry = geometry;
        match.distanceSq = distanceSq;
      }
      return void 0;
    };
    var renderedTiles = this.renderedTiles;
    var found;
    var _loop_2 = function(i2, ii2) {
      var tile = renderedTiles[i2];
      var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
      if (!intersects(tileExtent, hitExtent)) {
        return "continue";
      }
      var layerUid = getUid(layer2);
      var executorGroups = [tile.executorGroups[layerUid]];
      var declutterExecutorGroups = tile.declutterExecutorGroups[layerUid];
      if (declutterExecutorGroups) {
        executorGroups.push(declutterExecutorGroups);
      }
      executorGroups.some(function(executorGroups2) {
        var declutteredFeatures = executorGroups2 === declutterExecutorGroups ? frameState.declutterTree.all().map(function(item) {
          return item.value;
        }) : null;
        for (var t = 0, tt = executorGroups2.length; t < tt; ++t) {
          var executorGroup = executorGroups2[t];
          found = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, declutteredFeatures);
          if (found) {
            return true;
          }
        }
      });
    };
    for (var i = 0, ii = renderedTiles.length; !found && i < ii; ++i) {
      _loop_2(i, ii);
    }
    return found;
  };
  CanvasVectorTileLayerRenderer2.prototype.getFeatures = function(pixel) {
    return new Promise(function(resolve, reject) {
      var layer2 = this.getLayer();
      var layerUid = getUid(layer2);
      var source3 = layer2.getSource();
      var projection = this.renderedProjection;
      var projectionExtent = projection.getExtent();
      var resolution = this.renderedResolution;
      var tileGrid = source3.getTileGridForProjection(projection);
      var coordinate = apply(this.renderedPixelToCoordinateTransform_, pixel.slice());
      var tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);
      var tile;
      for (var i = 0, ii = this.renderedTiles.length; i < ii; ++i) {
        if (tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()) {
          tile = this.renderedTiles[i];
          if (tile.getState() === TileState_default.LOADED) {
            var extent_1 = tileGrid.getTileCoordExtent(tile.tileCoord);
            if (source3.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent_1)) {
              wrapX(coordinate, projection);
            }
            break;
          }
          tile = void 0;
        }
      }
      if (!tile || tile.loadingSourceTiles > 0) {
        resolve([]);
        return;
      }
      var extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
      var corner = getTopLeft(extent);
      var tilePixel = [
        (coordinate[0] - corner[0]) / resolution,
        (corner[1] - coordinate[1]) / resolution
      ];
      var features = tile.getSourceTiles().reduce(function(accumulator, sourceTile) {
        return accumulator.concat(sourceTile.getFeatures());
      }, []);
      var hitDetectionImageData = tile.hitDetectionImageData[layerUid];
      if (!hitDetectionImageData && !this.animatingOrInteracting_) {
        var tileSize = toSize(tileGrid.getTileSize(tileGrid.getZForResolution(resolution)));
        var rotation = this.renderedRotation_;
        var transforms = [
          this.getRenderTransform(tileGrid.getTileCoordCenter(tile.wrappedTileCoord), resolution, 0, HIT_DETECT_RESOLUTION, tileSize[0] * HIT_DETECT_RESOLUTION, tileSize[1] * HIT_DETECT_RESOLUTION, 0)
        ];
        hitDetectionImageData = createHitDetectionImageData(tileSize, transforms, features, layer2.getStyleFunction(), tileGrid.getTileCoordExtent(tile.wrappedTileCoord), tile.getReplayState(layer2).renderedResolution, rotation);
        tile.hitDetectionImageData[layerUid] = hitDetectionImageData;
      }
      resolve(hitDetect(tilePixel, features, hitDetectionImageData));
    }.bind(this));
  };
  CanvasVectorTileLayerRenderer2.prototype.handleFontsChanged = function() {
    var layer2 = this.getLayer();
    if (layer2.getVisible() && this.renderedLayerRevision_ !== void 0) {
      layer2.changed();
    }
  };
  CanvasVectorTileLayerRenderer2.prototype.handleStyleImageChange_ = function(event) {
    this.renderIfReadyAndVisible();
  };
  CanvasVectorTileLayerRenderer2.prototype.renderDeclutter = function(frameState) {
    var context = this.context;
    var alpha = context.globalAlpha;
    context.globalAlpha = this.getLayer().getOpacity();
    var viewHints = frameState.viewHints;
    var hifi = !(viewHints[ViewHint_default.ANIMATING] || viewHints[ViewHint_default.INTERACTING]);
    var tiles = this.renderedTiles;
    for (var i = 0, ii = tiles.length; i < ii; ++i) {
      var tile = tiles[i];
      var declutterExecutorGroups = tile.declutterExecutorGroups[getUid(this.getLayer())];
      if (declutterExecutorGroups) {
        for (var j = declutterExecutorGroups.length - 1; j >= 0; --j) {
          declutterExecutorGroups[j].execute(this.context, 1, this.getTileRenderTransform(tile, frameState), frameState.viewState.rotation, hifi, void 0, frameState.declutterTree);
        }
      }
    }
    context.globalAlpha = alpha;
  };
  CanvasVectorTileLayerRenderer2.prototype.getTileRenderTransform = function(tile, frameState) {
    var pixelRatio = frameState.pixelRatio;
    var viewState = frameState.viewState;
    var center = viewState.center;
    var resolution = viewState.resolution;
    var rotation = viewState.rotation;
    var size = frameState.size;
    var width = Math.round(size[0] * pixelRatio);
    var height = Math.round(size[1] * pixelRatio);
    var source3 = this.getLayer().getSource();
    var tileGrid = source3.getTileGridForProjection(frameState.viewState.projection);
    var tileCoord = tile.tileCoord;
    var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
    var worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];
    var transform = multiply(scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio), this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, worldOffset));
    return transform;
  };
  CanvasVectorTileLayerRenderer2.prototype.renderFrame = function(frameState, target) {
    var viewHints = frameState.viewHints;
    var hifi = !(viewHints[ViewHint_default.ANIMATING] || viewHints[ViewHint_default.INTERACTING]);
    _super.prototype.renderFrame.call(this, frameState, target);
    this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();
    this.renderedRotation_ = frameState.viewState.rotation;
    var layer2 = this.getLayer();
    var renderMode = layer2.getRenderMode();
    var context = this.context;
    var alpha = context.globalAlpha;
    context.globalAlpha = layer2.getOpacity();
    var replayTypes = VECTOR_REPLAYS[renderMode];
    var viewState = frameState.viewState;
    var rotation = viewState.rotation;
    var tiles = this.renderedTiles;
    var clips = [];
    var clipZs = [];
    for (var i = tiles.length - 1; i >= 0; --i) {
      var tile = tiles[i];
      var transform = this.getTileRenderTransform(tile, frameState);
      var executorGroups = tile.executorGroups[getUid(layer2)];
      var clipped = false;
      for (var t = 0, tt = executorGroups.length; t < tt; ++t) {
        var executorGroup = executorGroups[t];
        if (!executorGroup.hasExecutors(replayTypes)) {
          continue;
        }
        var currentZ = tile.tileCoord[0];
        var currentClip = void 0;
        if (!clipped) {
          currentClip = executorGroup.getClipCoords(transform);
          if (currentClip) {
            context.save();
            for (var j = 0, jj = clips.length; j < jj; ++j) {
              var clip = clips[j];
              if (currentZ < clipZs[j]) {
                context.beginPath();
                context.moveTo(currentClip[0], currentClip[1]);
                context.lineTo(currentClip[2], currentClip[3]);
                context.lineTo(currentClip[4], currentClip[5]);
                context.lineTo(currentClip[6], currentClip[7]);
                context.moveTo(clip[6], clip[7]);
                context.lineTo(clip[4], clip[5]);
                context.lineTo(clip[2], clip[3]);
                context.lineTo(clip[0], clip[1]);
                context.clip();
              }
            }
          }
        }
        executorGroup.execute(context, 1, transform, rotation, hifi, replayTypes);
        if (!clipped && currentClip) {
          context.restore();
          clips.push(currentClip);
          clipZs.push(currentZ);
          clipped = true;
        }
      }
    }
    context.globalAlpha = alpha;
    return this.container;
  };
  CanvasVectorTileLayerRenderer2.prototype.renderFeature = function(feature, squaredTolerance, styles, builderGroup, opt_declutterBuilderGroup) {
    if (!styles) {
      return false;
    }
    var loading = false;
    if (Array.isArray(styles)) {
      for (var i = 0, ii = styles.length; i < ii; ++i) {
        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, void 0, opt_declutterBuilderGroup) || loading;
      }
    } else {
      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, void 0, opt_declutterBuilderGroup);
    }
    return loading;
  };
  CanvasVectorTileLayerRenderer2.prototype.tileImageNeedsRender_ = function(tile) {
    var layer2 = this.getLayer();
    if (layer2.getRenderMode() === VectorTileRenderType_default.VECTOR) {
      return false;
    }
    var replayState = tile.getReplayState(layer2);
    var revision = layer2.getRevision();
    var resolution = tile.wantedResolution;
    return replayState.renderedTileResolution !== resolution || replayState.renderedTileRevision !== revision;
  };
  CanvasVectorTileLayerRenderer2.prototype.renderTileImage_ = function(tile, frameState) {
    var layer2 = this.getLayer();
    var replayState = tile.getReplayState(layer2);
    var revision = layer2.getRevision();
    var executorGroups = tile.executorGroups[getUid(layer2)];
    replayState.renderedTileRevision = revision;
    var tileCoord = tile.wrappedTileCoord;
    var z = tileCoord[0];
    var source3 = layer2.getSource();
    var pixelRatio = frameState.pixelRatio;
    var viewState = frameState.viewState;
    var projection = viewState.projection;
    var tileGrid = source3.getTileGridForProjection(projection);
    var tileResolution = tileGrid.getResolution(tile.tileCoord[0]);
    var renderPixelRatio = frameState.pixelRatio / tile.wantedResolution * tileResolution;
    var resolution = tileGrid.getResolution(z);
    var context = tile.getContext(layer2);
    pixelRatio = Math.round(Math.max(pixelRatio, renderPixelRatio / pixelRatio));
    var size = source3.getTilePixelSize(z, pixelRatio, projection);
    context.canvas.width = size[0];
    context.canvas.height = size[1];
    var renderScale = pixelRatio / renderPixelRatio;
    if (renderScale !== 1) {
      var canvasTransform = reset(this.tmpTransform_);
      scale(canvasTransform, renderScale, renderScale);
      context.setTransform.apply(context, canvasTransform);
    }
    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
    var pixelScale = renderPixelRatio / resolution;
    var transform = reset(this.tmpTransform_);
    scale(transform, pixelScale, -pixelScale);
    translate(transform, -tileExtent[0], -tileExtent[3]);
    for (var i = 0, ii = executorGroups.length; i < ii; ++i) {
      var executorGroup = executorGroups[i];
      executorGroup.execute(context, renderScale, transform, 0, true, IMAGE_REPLAYS[layer2.getRenderMode()]);
    }
    replayState.renderedTileResolution = tile.wantedResolution;
  };
  return CanvasVectorTileLayerRenderer2;
}(TileLayer_default);
var VectorTileLayer_default = CanvasVectorTileLayerRenderer;

// node_modules/ol/layer/VectorTile.js
var __extends7 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VectorTileLayer = function(_super) {
  __extends7(VectorTileLayer2, _super);
  function VectorTileLayer2(opt_options) {
    var _this = this;
    var options = opt_options ? opt_options : {};
    var baseOptions = assign({}, options);
    delete baseOptions.preload;
    delete baseOptions.useInterimTilesOnError;
    _this = _super.call(this, baseOptions) || this;
    _this.on;
    _this.once;
    _this.un;
    if (options.renderMode === VectorTileRenderType_default.IMAGE) {
      console.warn('renderMode: "image" is deprecated. Option ignored.');
      options.renderMode = void 0;
    }
    var renderMode = options.renderMode || VectorTileRenderType_default.HYBRID;
    assert(renderMode == VectorTileRenderType_default.HYBRID || renderMode == VectorTileRenderType_default.VECTOR, 28);
    _this.renderMode_ = renderMode;
    _this.setPreload(options.preload ? options.preload : 0);
    _this.setUseInterimTilesOnError(options.useInterimTilesOnError !== void 0 ? options.useInterimTilesOnError : true);
    return _this;
  }
  VectorTileLayer2.prototype.createRenderer = function() {
    return new VectorTileLayer_default(this);
  };
  VectorTileLayer2.prototype.getFeatures = function(pixel) {
    return _super.prototype.getFeatures.call(this, pixel);
  };
  VectorTileLayer2.prototype.getRenderMode = function() {
    return this.renderMode_;
  };
  VectorTileLayer2.prototype.getPreload = function() {
    return this.get(TileProperty_default.PRELOAD);
  };
  VectorTileLayer2.prototype.getUseInterimTilesOnError = function() {
    return this.get(TileProperty_default.USE_INTERIM_TILES_ON_ERROR);
  };
  VectorTileLayer2.prototype.setPreload = function(preload) {
    this.set(TileProperty_default.PRELOAD, preload);
  };
  VectorTileLayer2.prototype.setUseInterimTilesOnError = function(useInterimTilesOnError) {
    this.set(TileProperty_default.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
  };
  return VectorTileLayer2;
}(BaseVector_default);
var VectorTile_default2 = VectorTileLayer;

// node_modules/ol/format/JSONFeature.js
var __extends8 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var JSONFeature = function(_super) {
  __extends8(JSONFeature2, _super);
  function JSONFeature2() {
    return _super.call(this) || this;
  }
  JSONFeature2.prototype.getType = function() {
    return FormatType_default.JSON;
  };
  JSONFeature2.prototype.readFeature = function(source3, opt_options) {
    return this.readFeatureFromObject(getObject(source3), this.getReadOptions(source3, opt_options));
  };
  JSONFeature2.prototype.readFeatures = function(source3, opt_options) {
    return this.readFeaturesFromObject(getObject(source3), this.getReadOptions(source3, opt_options));
  };
  JSONFeature2.prototype.readFeatureFromObject = function(object, opt_options) {
    return abstract();
  };
  JSONFeature2.prototype.readFeaturesFromObject = function(object, opt_options) {
    return abstract();
  };
  JSONFeature2.prototype.readGeometry = function(source3, opt_options) {
    return this.readGeometryFromObject(getObject(source3), this.getReadOptions(source3, opt_options));
  };
  JSONFeature2.prototype.readGeometryFromObject = function(object, opt_options) {
    return abstract();
  };
  JSONFeature2.prototype.readProjection = function(source3) {
    return this.readProjectionFromObject(getObject(source3));
  };
  JSONFeature2.prototype.readProjectionFromObject = function(object) {
    return abstract();
  };
  JSONFeature2.prototype.writeFeature = function(feature, opt_options) {
    return JSON.stringify(this.writeFeatureObject(feature, opt_options));
  };
  JSONFeature2.prototype.writeFeatureObject = function(feature, opt_options) {
    return abstract();
  };
  JSONFeature2.prototype.writeFeatures = function(features, opt_options) {
    return JSON.stringify(this.writeFeaturesObject(features, opt_options));
  };
  JSONFeature2.prototype.writeFeaturesObject = function(features, opt_options) {
    return abstract();
  };
  JSONFeature2.prototype.writeGeometry = function(geometry, opt_options) {
    return JSON.stringify(this.writeGeometryObject(geometry, opt_options));
  };
  JSONFeature2.prototype.writeGeometryObject = function(geometry, opt_options) {
    return abstract();
  };
  return JSONFeature2;
}(Feature_default2);
function getObject(source3) {
  if (typeof source3 === "string") {
    var object = JSON.parse(source3);
    return object ? object : null;
  } else if (source3 !== null) {
    return source3;
  } else {
    return null;
  }
}
var JSONFeature_default = JSONFeature;

// node_modules/ol/format/GeoJSON.js
var __extends9 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var GeoJSON = function(_super) {
  __extends9(GeoJSON2, _super);
  function GeoJSON2(opt_options) {
    var _this = this;
    var options = opt_options ? opt_options : {};
    _this = _super.call(this) || this;
    _this.dataProjection = get(options.dataProjection ? options.dataProjection : "EPSG:4326");
    if (options.featureProjection) {
      _this.defaultFeatureProjection = get(options.featureProjection);
    }
    _this.geometryName_ = options.geometryName;
    _this.extractGeometryName_ = options.extractGeometryName;
    _this.supportedMediaTypes = [
      "application/geo+json",
      "application/vnd.geo+json"
    ];
    return _this;
  }
  GeoJSON2.prototype.readFeatureFromObject = function(object, opt_options) {
    var geoJSONFeature = null;
    if (object["type"] === "Feature") {
      geoJSONFeature = object;
    } else {
      geoJSONFeature = {
        "type": "Feature",
        "geometry": object,
        "properties": null
      };
    }
    var geometry = readGeometry(geoJSONFeature["geometry"], opt_options);
    var feature = new Feature_default();
    if (this.geometryName_) {
      feature.setGeometryName(this.geometryName_);
    } else if (this.extractGeometryName_ && "geometry_name" in geoJSONFeature !== void 0) {
      feature.setGeometryName(geoJSONFeature["geometry_name"]);
    }
    feature.setGeometry(geometry);
    if ("id" in geoJSONFeature) {
      feature.setId(geoJSONFeature["id"]);
    }
    if (geoJSONFeature["properties"]) {
      feature.setProperties(geoJSONFeature["properties"], true);
    }
    return feature;
  };
  GeoJSON2.prototype.readFeaturesFromObject = function(object, opt_options) {
    var geoJSONObject = object;
    var features = null;
    if (geoJSONObject["type"] === "FeatureCollection") {
      var geoJSONFeatureCollection = object;
      features = [];
      var geoJSONFeatures = geoJSONFeatureCollection["features"];
      for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {
        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));
      }
    } else {
      features = [this.readFeatureFromObject(object, opt_options)];
    }
    return features;
  };
  GeoJSON2.prototype.readGeometryFromObject = function(object, opt_options) {
    return readGeometry(object, opt_options);
  };
  GeoJSON2.prototype.readProjectionFromObject = function(object) {
    var crs = object["crs"];
    var projection;
    if (crs) {
      if (crs["type"] == "name") {
        projection = get(crs["properties"]["name"]);
      } else if (crs["type"] === "EPSG") {
        projection = get("EPSG:" + crs["properties"]["code"]);
      } else {
        assert(false, 36);
      }
    } else {
      projection = this.dataProjection;
    }
    return projection;
  };
  GeoJSON2.prototype.writeFeatureObject = function(feature, opt_options) {
    opt_options = this.adaptOptions(opt_options);
    var object = {
      "type": "Feature",
      geometry: null,
      properties: null
    };
    var id = feature.getId();
    if (id !== void 0) {
      object.id = id;
    }
    if (!feature.hasProperties()) {
      return object;
    }
    var properties = feature.getProperties();
    var geometry = feature.getGeometry();
    if (geometry) {
      object.geometry = writeGeometry(geometry, opt_options);
      delete properties[feature.getGeometryName()];
    }
    if (!isEmpty(properties)) {
      object.properties = properties;
    }
    return object;
  };
  GeoJSON2.prototype.writeFeaturesObject = function(features, opt_options) {
    opt_options = this.adaptOptions(opt_options);
    var objects = [];
    for (var i = 0, ii = features.length; i < ii; ++i) {
      objects.push(this.writeFeatureObject(features[i], opt_options));
    }
    return {
      type: "FeatureCollection",
      features: objects
    };
  };
  GeoJSON2.prototype.writeGeometryObject = function(geometry, opt_options) {
    return writeGeometry(geometry, this.adaptOptions(opt_options));
  };
  return GeoJSON2;
}(JSONFeature_default);
function readGeometry(object, opt_options) {
  if (!object) {
    return null;
  }
  var geometry;
  switch (object["type"]) {
    case GeometryType_default.POINT: {
      geometry = readPointGeometry(object);
      break;
    }
    case GeometryType_default.LINE_STRING: {
      geometry = readLineStringGeometry(object);
      break;
    }
    case GeometryType_default.POLYGON: {
      geometry = readPolygonGeometry(object);
      break;
    }
    case GeometryType_default.MULTI_POINT: {
      geometry = readMultiPointGeometry(object);
      break;
    }
    case GeometryType_default.MULTI_LINE_STRING: {
      geometry = readMultiLineStringGeometry(object);
      break;
    }
    case GeometryType_default.MULTI_POLYGON: {
      geometry = readMultiPolygonGeometry(object);
      break;
    }
    case GeometryType_default.GEOMETRY_COLLECTION: {
      geometry = readGeometryCollectionGeometry(object);
      break;
    }
    default: {
      throw new Error("Unsupported GeoJSON type: " + object.type);
    }
  }
  return transformGeometryWithOptions(geometry, false, opt_options);
}
function readGeometryCollectionGeometry(object, opt_options) {
  var geometries = object["geometries"].map(function(geometry) {
    return readGeometry(geometry, opt_options);
  });
  return new GeometryCollection_default(geometries);
}
function readPointGeometry(object) {
  return new Point_default(object["coordinates"]);
}
function readLineStringGeometry(object) {
  return new LineString_default(object["coordinates"]);
}
function readMultiLineStringGeometry(object) {
  return new MultiLineString_default(object["coordinates"]);
}
function readMultiPointGeometry(object) {
  return new MultiPoint_default(object["coordinates"]);
}
function readMultiPolygonGeometry(object) {
  return new MultiPolygon_default(object["coordinates"]);
}
function readPolygonGeometry(object) {
  return new Polygon_default(object["coordinates"]);
}
function writeGeometry(geometry, opt_options) {
  geometry = transformGeometryWithOptions(geometry, true, opt_options);
  var type = geometry.getType();
  var geoJSON;
  switch (type) {
    case GeometryType_default.POINT: {
      geoJSON = writePointGeometry(geometry, opt_options);
      break;
    }
    case GeometryType_default.LINE_STRING: {
      geoJSON = writeLineStringGeometry(geometry, opt_options);
      break;
    }
    case GeometryType_default.POLYGON: {
      geoJSON = writePolygonGeometry(geometry, opt_options);
      break;
    }
    case GeometryType_default.MULTI_POINT: {
      geoJSON = writeMultiPointGeometry(geometry, opt_options);
      break;
    }
    case GeometryType_default.MULTI_LINE_STRING: {
      geoJSON = writeMultiLineStringGeometry(geometry, opt_options);
      break;
    }
    case GeometryType_default.MULTI_POLYGON: {
      geoJSON = writeMultiPolygonGeometry(geometry, opt_options);
      break;
    }
    case GeometryType_default.GEOMETRY_COLLECTION: {
      geoJSON = writeGeometryCollectionGeometry(geometry, opt_options);
      break;
    }
    case GeometryType_default.CIRCLE: {
      geoJSON = {
        type: "GeometryCollection",
        geometries: []
      };
      break;
    }
    default: {
      throw new Error("Unsupported geometry type: " + type);
    }
  }
  return geoJSON;
}
function writeGeometryCollectionGeometry(geometry, opt_options) {
  var geometries = geometry.getGeometriesArray().map(function(geometry2) {
    var options = assign({}, opt_options);
    delete options.featureProjection;
    return writeGeometry(geometry2, options);
  });
  return {
    type: "GeometryCollection",
    geometries
  };
}
function writeLineStringGeometry(geometry, opt_options) {
  return {
    type: "LineString",
    coordinates: geometry.getCoordinates()
  };
}
function writeMultiLineStringGeometry(geometry, opt_options) {
  return {
    type: "MultiLineString",
    coordinates: geometry.getCoordinates()
  };
}
function writeMultiPointGeometry(geometry, opt_options) {
  return {
    type: "MultiPoint",
    coordinates: geometry.getCoordinates()
  };
}
function writeMultiPolygonGeometry(geometry, opt_options) {
  var right;
  if (opt_options) {
    right = opt_options.rightHanded;
  }
  return {
    type: "MultiPolygon",
    coordinates: geometry.getCoordinates(right)
  };
}
function writePointGeometry(geometry, opt_options) {
  return {
    type: "Point",
    coordinates: geometry.getCoordinates()
  };
}
function writePolygonGeometry(geometry, opt_options) {
  var right;
  if (opt_options) {
    right = opt_options.rightHanded;
  }
  return {
    type: "Polygon",
    coordinates: geometry.getCoordinates(right)
  };
}
var GeoJSON_default = GeoJSON;

// node_modules/ol-mapbox-style/dist/stylefunction.js
var import_mapbox_to_css_font = __toModule(require_mapbox_to_css_font());

// node_modules/@mapbox/mapbox-gl-style-spec/dist/index.es.js
var $version = 8;
var $root = {
  version: {
    required: true,
    type: "enum",
    values: [
      8
    ],
    doc: "Style specification version number. Must be 8.",
    example: 8
  },
  name: {
    type: "string",
    doc: "A human-readable name for the style.",
    example: "Bright"
  },
  metadata: {
    type: "*",
    doc: "Arbitrary properties useful to track with the stylesheet, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."
  },
  center: {
    type: "array",
    value: "number",
    doc: "Default map center in longitude and latitude.  The style center will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
    example: [
      -73.9749,
      40.7736
    ]
  },
  zoom: {
    type: "number",
    doc: "Default zoom level.  The style zoom will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
    example: 12.5
  },
  bearing: {
    type: "number",
    "default": 0,
    period: 360,
    units: "degrees",
    doc: 'Default bearing, in degrees. The bearing is the compass direction that is "up"; for example, a bearing of 90\xB0 orients the map so that east is up. This value will be used only if the map has not been positioned by other means (e.g. map options or user interaction).',
    example: 29
  },
  pitch: {
    type: "number",
    "default": 0,
    units: "degrees",
    doc: "Default pitch, in degrees. Zero is perpendicular to the surface, for a look straight down at the map, while a greater value like 60 looks ahead towards the horizon. The style pitch will be used only if the map has not been positioned by other means (e.g. map options or user interaction).",
    example: 50
  },
  light: {
    type: "light",
    doc: "The global light source.",
    example: {
      anchor: "viewport",
      color: "white",
      intensity: 0.4
    }
  },
  terrain: {
    type: "terrain",
    doc: "A global modifier that elevates layers and markers based on a DEM data source."
  },
  fog: {
    type: "fog",
    doc: "A global effect that fades layers and markers based on their distance to the camera. The fog can be used to approximate the effect of atmosphere on distant objects and enhance the depth perception of the map when used with terrain or 3D features."
  },
  sources: {
    required: true,
    type: "sources",
    doc: "Data source specifications.",
    example: {
      "mapbox-streets": {
        type: "vector",
        url: "mapbox://mapbox.mapbox-streets-v6"
      }
    }
  },
  sprite: {
    type: "string",
    doc: "A base URL for retrieving the sprite image and metadata. The extensions `.png`, `.json` and scale factor `@2x.png` will be automatically appended. This property is required if any layer uses the `background-pattern`, `fill-pattern`, `line-pattern`, `fill-extrusion-pattern`, or `icon-image` properties. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",
    example: "mapbox://sprites/mapbox/bright-v8"
  },
  glyphs: {
    type: "string",
    doc: "A URL template for loading signed-distance-field glyph sets in PBF format. The URL must include `{fontstack}` and `{range}` tokens. This property is required if any layer uses the `text-field` layout property. The URL must be absolute, containing the [scheme, authority and path components](https://en.wikipedia.org/wiki/URL#Syntax).",
    example: "mapbox://fonts/mapbox/{fontstack}/{range}.pbf"
  },
  transition: {
    type: "transition",
    doc: "A global transition definition to use as a default across properties, to be used for timing transitions between one value and the next when no property-specific transition is set. Collision-based symbol fading is controlled independently of the style's `transition` property.",
    example: {
      duration: 300,
      delay: 0
    }
  },
  layers: {
    required: true,
    type: "array",
    value: "layer",
    doc: "Layers will be drawn in the order of this array.",
    example: [
      {
        id: "water",
        source: "mapbox-streets",
        "source-layer": "water",
        type: "fill",
        paint: {
          "fill-color": "#00ffff"
        }
      }
    ]
  }
};
var sources = {
  "*": {
    type: "source",
    doc: "Specification of a data source. For vector and raster sources, either TileJSON or a URL to a TileJSON must be provided. For image and video sources, a URL must be provided. For GeoJSON sources, a URL or inline GeoJSON must be provided."
  }
};
var source2 = [
  "source_vector",
  "source_raster",
  "source_raster_dem",
  "source_geojson",
  "source_video",
  "source_image"
];
var source_vector = {
  type: {
    required: true,
    type: "enum",
    values: {
      vector: {
        doc: "A vector tile source."
      }
    },
    doc: "The type of the source."
  },
  url: {
    type: "string",
    doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."
  },
  tiles: {
    type: "array",
    value: "string",
    doc: "An array of one or more tile source URLs, as in the TileJSON spec."
  },
  bounds: {
    type: "array",
    value: "number",
    length: 4,
    "default": [
      -180,
      -85.051129,
      180,
      85.051129
    ],
    doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
  },
  scheme: {
    type: "enum",
    values: {
      xyz: {
        doc: "Slippy map tilenames scheme."
      },
      tms: {
        doc: "OSGeo spec scheme."
      }
    },
    "default": "xyz",
    doc: "Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."
  },
  minzoom: {
    type: "number",
    "default": 0,
    doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."
  },
  maxzoom: {
    type: "number",
    "default": 22,
    doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
  },
  attribution: {
    type: "string",
    doc: "Contains an attribution to be displayed when the map is shown to a user."
  },
  promoteId: {
    type: "promoteId",
    doc: "A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`. If specified as a string for a vector tile source, the same property is used across all its source layers."
  },
  volatile: {
    type: "boolean",
    "default": false,
    doc: "A setting to determine whether a source's tiles are cached locally.",
    "sdk-support": {
      "basic functionality": {
        android: "9.3.0",
        ios: "5.10.0"
      }
    }
  },
  "*": {
    type: "*",
    doc: "Other keys to configure the data source."
  }
};
var source_raster = {
  type: {
    required: true,
    type: "enum",
    values: {
      raster: {
        doc: "A raster tile source."
      }
    },
    doc: "The type of the source."
  },
  url: {
    type: "string",
    doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."
  },
  tiles: {
    type: "array",
    value: "string",
    doc: "An array of one or more tile source URLs, as in the TileJSON spec."
  },
  bounds: {
    type: "array",
    value: "number",
    length: 4,
    "default": [
      -180,
      -85.051129,
      180,
      85.051129
    ],
    doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
  },
  minzoom: {
    type: "number",
    "default": 0,
    doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."
  },
  maxzoom: {
    type: "number",
    "default": 22,
    doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
  },
  tileSize: {
    type: "number",
    "default": 512,
    units: "pixels",
    doc: "The minimum visual size to display tiles for this layer. Only configurable for raster layers."
  },
  scheme: {
    type: "enum",
    values: {
      xyz: {
        doc: "Slippy map tilenames scheme."
      },
      tms: {
        doc: "OSGeo spec scheme."
      }
    },
    "default": "xyz",
    doc: "Influences the y direction of the tile coordinates. The global-mercator (aka Spherical Mercator) profile is assumed."
  },
  attribution: {
    type: "string",
    doc: "Contains an attribution to be displayed when the map is shown to a user."
  },
  volatile: {
    type: "boolean",
    "default": false,
    doc: "A setting to determine whether a source's tiles are cached locally.",
    "sdk-support": {
      "basic functionality": {
        android: "9.3.0",
        ios: "5.10.0"
      }
    }
  },
  "*": {
    type: "*",
    doc: "Other keys to configure the data source."
  }
};
var source_raster_dem = {
  type: {
    required: true,
    type: "enum",
    values: {
      "raster-dem": {
        doc: "A RGB-encoded raster DEM source"
      }
    },
    doc: "The type of the source."
  },
  url: {
    type: "string",
    doc: "A URL to a TileJSON resource. Supported protocols are `http:`, `https:`, and `mapbox://<Tileset ID>`."
  },
  tiles: {
    type: "array",
    value: "string",
    doc: "An array of one or more tile source URLs, as in the TileJSON spec."
  },
  bounds: {
    type: "array",
    value: "number",
    length: 4,
    "default": [
      -180,
      -85.051129,
      180,
      85.051129
    ],
    doc: "An array containing the longitude and latitude of the southwest and northeast corners of the source's bounding box in the following order: `[sw.lng, sw.lat, ne.lng, ne.lat]`. When this property is included in a source, no tiles outside of the given bounds are requested by Mapbox GL."
  },
  minzoom: {
    type: "number",
    "default": 0,
    doc: "Minimum zoom level for which tiles are available, as in the TileJSON spec."
  },
  maxzoom: {
    type: "number",
    "default": 22,
    doc: "Maximum zoom level for which tiles are available, as in the TileJSON spec. Data from tiles at the maxzoom are used when displaying the map at higher zoom levels."
  },
  tileSize: {
    type: "number",
    "default": 512,
    units: "pixels",
    doc: "The minimum visual size to display tiles for this layer. Only configurable for raster layers."
  },
  attribution: {
    type: "string",
    doc: "Contains an attribution to be displayed when the map is shown to a user."
  },
  encoding: {
    type: "enum",
    values: {
      terrarium: {
        doc: "Terrarium format PNG tiles. See https://aws.amazon.com/es/public-datasets/terrain/ for more info."
      },
      mapbox: {
        doc: "Mapbox Terrain RGB tiles. See https://www.mapbox.com/help/access-elevation-data/#mapbox-terrain-rgb for more info."
      }
    },
    "default": "mapbox",
    doc: "The encoding used by this source. Mapbox Terrain RGB is used by default"
  },
  volatile: {
    type: "boolean",
    "default": false,
    doc: "A setting to determine whether a source's tiles are cached locally.",
    "sdk-support": {
      "basic functionality": {
        android: "9.3.0",
        ios: "5.10.0"
      }
    }
  },
  "*": {
    type: "*",
    doc: "Other keys to configure the data source."
  }
};
var source_geojson = {
  type: {
    required: true,
    type: "enum",
    values: {
      geojson: {
        doc: "A GeoJSON data source."
      }
    },
    doc: "The data type of the GeoJSON source."
  },
  data: {
    type: "*",
    doc: "A URL to a GeoJSON file, or inline GeoJSON."
  },
  maxzoom: {
    type: "number",
    "default": 18,
    doc: "Maximum zoom level at which to create vector tiles (higher means greater detail at high zoom levels)."
  },
  attribution: {
    type: "string",
    doc: "Contains an attribution to be displayed when the map is shown to a user."
  },
  buffer: {
    type: "number",
    "default": 128,
    maximum: 512,
    minimum: 0,
    doc: "Size of the tile buffer on each side. A value of 0 produces no buffer. A value of 512 produces a buffer as wide as the tile itself. Larger values produce fewer rendering artifacts near tile edges and slower performance."
  },
  filter: {
    type: "*",
    doc: "An expression for filtering features prior to processing them for rendering."
  },
  tolerance: {
    type: "number",
    "default": 0.375,
    doc: "Douglas-Peucker simplification tolerance (higher means simpler geometries and faster performance)."
  },
  cluster: {
    type: "boolean",
    "default": false,
    doc: "If the data is a collection of point features, setting this to true clusters the points by radius into groups. Cluster groups become new `Point` features in the source with additional properties:\n * `cluster` Is `true` if the point is a cluster \n * `cluster_id` A unqiue id for the cluster to be used in conjunction with the [cluster inspection methods](https://www.mapbox.com/mapbox-gl-js/api/#geojsonsource#getclusterexpansionzoom)\n * `point_count` Number of original points grouped into this cluster\n * `point_count_abbreviated` An abbreviated point count"
  },
  clusterRadius: {
    type: "number",
    "default": 50,
    minimum: 0,
    doc: "Radius of each cluster if clustering is enabled. A value of 512 indicates a radius equal to the width of a tile."
  },
  clusterMaxZoom: {
    type: "number",
    doc: "Max zoom on which to cluster points if clustering is enabled. Defaults to one zoom less than maxzoom (so that last zoom features are not clustered). Clusters are re-evaluated at integer zoom levels so setting clusterMaxZoom to 14 means the clusters will be displayed until z15."
  },
  clusterMinPoints: {
    type: "number",
    doc: "Minimum number of points necessary to form a cluster if clustering is enabled. Defaults to `2`."
  },
  clusterProperties: {
    type: "*",
    doc: 'An object defining custom properties on the generated clusters if clustering is enabled, aggregating values from clustered points. Has the form `{"property_name": [operator, map_expression]}`. `operator` is any expression function that accepts at least 2 operands (e.g. `"+"` or `"max"`) \u2014 it accumulates the property value from clusters/points the cluster contains; `map_expression` produces the value of a single point.\n\nExample: `{"sum": ["+", ["get", "scalerank"]]}`.\n\nFor more advanced use cases, in place of `operator`, you can use a custom reduce expression that references a special `["accumulated"]` value, e.g.:\n`{"sum": [["+", ["accumulated"], ["get", "sum"]], ["get", "scalerank"]]}`'
  },
  lineMetrics: {
    type: "boolean",
    "default": false,
    doc: "Whether to calculate line distance metrics. This is required for line layers that specify `line-gradient` values."
  },
  generateId: {
    type: "boolean",
    "default": false,
    doc: "Whether to generate ids for the geojson features. When enabled, the `feature.id` property will be auto assigned based on its index in the `features` array, over-writing any previous values."
  },
  promoteId: {
    type: "promoteId",
    doc: "A property to use as a feature id (for feature state). Either a property name, or an object of the form `{<sourceLayer>: <propertyName>}`."
  }
};
var source_video = {
  type: {
    required: true,
    type: "enum",
    values: {
      video: {
        doc: "A video data source."
      }
    },
    doc: "The data type of the video source."
  },
  urls: {
    required: true,
    type: "array",
    value: "string",
    doc: "URLs to video content in order of preferred format."
  },
  coordinates: {
    required: true,
    doc: "Corners of video specified in longitude, latitude pairs.",
    type: "array",
    length: 4,
    value: {
      type: "array",
      length: 2,
      value: "number",
      doc: "A single longitude, latitude pair."
    }
  }
};
var source_image = {
  type: {
    required: true,
    type: "enum",
    values: {
      image: {
        doc: "An image data source."
      }
    },
    doc: "The data type of the image source."
  },
  url: {
    required: true,
    type: "string",
    doc: "URL that points to an image."
  },
  coordinates: {
    required: true,
    doc: "Corners of image specified in longitude, latitude pairs.",
    type: "array",
    length: 4,
    value: {
      type: "array",
      length: 2,
      value: "number",
      doc: "A single longitude, latitude pair."
    }
  }
};
var layer = {
  id: {
    type: "string",
    doc: "Unique layer name.",
    required: true
  },
  type: {
    type: "enum",
    values: {
      fill: {
        doc: "A filled polygon with an optional stroked border.",
        "sdk-support": {
          "basic functionality": {
            js: "0.10.0",
            android: "2.0.1",
            ios: "2.0.0",
            macos: "0.1.0"
          }
        }
      },
      line: {
        doc: "A stroked line.",
        "sdk-support": {
          "basic functionality": {
            js: "0.10.0",
            android: "2.0.1",
            ios: "2.0.0",
            macos: "0.1.0"
          }
        }
      },
      symbol: {
        doc: "An icon or a text label.",
        "sdk-support": {
          "basic functionality": {
            js: "0.10.0",
            android: "2.0.1",
            ios: "2.0.0",
            macos: "0.1.0"
          }
        }
      },
      circle: {
        doc: "A filled circle.",
        "sdk-support": {
          "basic functionality": {
            js: "0.10.0",
            android: "2.0.1",
            ios: "2.0.0",
            macos: "0.1.0"
          }
        }
      },
      heatmap: {
        doc: "A heatmap.",
        "sdk-support": {
          "basic functionality": {
            js: "0.41.0",
            android: "6.0.0",
            ios: "4.0.0",
            macos: "0.7.0"
          }
        }
      },
      "fill-extrusion": {
        doc: "An extruded (3D) polygon.",
        "sdk-support": {
          "basic functionality": {
            js: "0.27.0",
            android: "5.1.0",
            ios: "3.6.0",
            macos: "0.5.0"
          }
        }
      },
      raster: {
        doc: "Raster map textures such as satellite imagery.",
        "sdk-support": {
          "basic functionality": {
            js: "0.10.0",
            android: "2.0.1",
            ios: "2.0.0",
            macos: "0.1.0"
          }
        }
      },
      hillshade: {
        doc: "Client-side hillshading visualization based on DEM data. Currently, the implementation only supports Mapbox Terrain RGB and Mapzen Terrarium tiles.",
        "sdk-support": {
          "basic functionality": {
            js: "0.43.0",
            android: "6.0.0",
            ios: "4.0.0",
            macos: "0.7.0"
          }
        }
      },
      background: {
        doc: "The background color or pattern of the map.",
        "sdk-support": {
          "basic functionality": {
            js: "0.10.0",
            android: "2.0.1",
            ios: "2.0.0",
            macos: "0.1.0"
          }
        }
      },
      sky: {
        doc: "A spherical dome around the map that is always rendered behind all other layers.",
        "sdk-support": {
          "basic functionality": {
            js: "2.0.0",
            ios: "10.0.0",
            android: "10.0.0"
          }
        }
      }
    },
    doc: "Rendering type of this layer.",
    required: true
  },
  metadata: {
    type: "*",
    doc: "Arbitrary properties useful to track with the layer, but do not influence rendering. Properties should be prefixed to avoid collisions, like 'mapbox:'."
  },
  source: {
    type: "string",
    doc: "Name of a source description to be used for this layer. Required for all layer types except `background`."
  },
  "source-layer": {
    type: "string",
    doc: "Layer to use from a vector tile source. Required for vector tile sources; prohibited for all other source types, including GeoJSON sources."
  },
  minzoom: {
    type: "number",
    minimum: 0,
    maximum: 24,
    doc: "The minimum zoom level for the layer. At zoom levels less than the minzoom, the layer will be hidden."
  },
  maxzoom: {
    type: "number",
    minimum: 0,
    maximum: 24,
    doc: "The maximum zoom level for the layer. At zoom levels equal to or greater than the maxzoom, the layer will be hidden."
  },
  filter: {
    type: "filter",
    doc: "A expression specifying conditions on source features. Only features that match the filter are displayed. Zoom expressions in filters are only evaluated at integer zoom levels. The `feature-state` expression is not supported in filter expressions."
  },
  layout: {
    type: "layout",
    doc: "Layout properties for the layer."
  },
  paint: {
    type: "paint",
    doc: "Default paint properties for this layer."
  }
};
var layout = [
  "layout_fill",
  "layout_line",
  "layout_circle",
  "layout_heatmap",
  "layout_fill-extrusion",
  "layout_symbol",
  "layout_raster",
  "layout_hillshade",
  "layout_background",
  "layout_sky"
];
var layout_background = {
  visibility: {
    type: "enum",
    values: {
      visible: {
        doc: "The layer is shown."
      },
      none: {
        doc: "The layer is not shown."
      }
    },
    "default": "visible",
    doc: "Whether this layer is displayed.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    "property-type": "constant"
  }
};
var layout_sky = {
  visibility: {
    type: "enum",
    values: {
      visible: {
        doc: "The layer is shown."
      },
      none: {
        doc: "The layer is not shown."
      }
    },
    "default": "visible",
    doc: "Whether this layer is displayed.",
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    },
    "property-type": "constant"
  }
};
var layout_fill = {
  "fill-sort-key": {
    type: "number",
    doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
    "sdk-support": {
      "basic functionality": {
        js: "1.2.0",
        android: "9.1.0",
        ios: "5.8.0",
        macos: "0.15.0"
      },
      "data-driven styling": {
        js: "1.2.0",
        android: "9.1.0",
        ios: "5.8.0",
        macos: "0.15.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {
        doc: "The layer is shown."
      },
      none: {
        doc: "The layer is not shown."
      }
    },
    "default": "visible",
    doc: "Whether this layer is displayed.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    "property-type": "constant"
  }
};
var layout_circle = {
  "circle-sort-key": {
    type: "number",
    doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
    "sdk-support": {
      "basic functionality": {
        js: "1.2.0",
        android: "9.2.0",
        ios: "5.9.0",
        macos: "0.16.0"
      },
      "data-driven styling": {
        js: "1.2.0",
        android: "9.2.0",
        ios: "5.9.0",
        macos: "0.16.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {
        doc: "The layer is shown."
      },
      none: {
        doc: "The layer is not shown."
      }
    },
    "default": "visible",
    doc: "Whether this layer is displayed.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    "property-type": "constant"
  }
};
var layout_heatmap = {
  visibility: {
    type: "enum",
    values: {
      visible: {
        doc: "The layer is shown."
      },
      none: {
        doc: "The layer is not shown."
      }
    },
    "default": "visible",
    doc: "Whether this layer is displayed.",
    "sdk-support": {
      "basic functionality": {
        js: "0.41.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    "property-type": "constant"
  }
};
var layout_line = {
  "line-cap": {
    type: "enum",
    values: {
      butt: {
        doc: "A cap with a squared-off end which is drawn to the exact endpoint of the line."
      },
      round: {
        doc: "A cap with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."
      },
      square: {
        doc: "A cap with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."
      }
    },
    "default": "butt",
    doc: "The display of line endings.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "2.3.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "line-join": {
    type: "enum",
    values: {
      bevel: {
        doc: "A join with a squared-off end which is drawn beyond the endpoint of the line at a distance of one-half of the line's width."
      },
      round: {
        doc: "A join with a rounded end which is drawn beyond the endpoint of the line at a radius of one-half of the line's width and centered on the endpoint of the line."
      },
      miter: {
        doc: "A join with a sharp, angled corner which is drawn with the outer sides beyond the endpoint of the path until they meet."
      }
    },
    "default": "miter",
    doc: "The display of lines when joining.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.40.0",
        android: "5.2.0",
        ios: "3.7.0",
        macos: "0.6.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "line-miter-limit": {
    type: "number",
    "default": 2,
    doc: "Used to automatically convert miter joins to bevel joins for sharp angles.",
    requires: [
      {
        "line-join": "miter"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-round-limit": {
    type: "number",
    "default": 1.05,
    doc: "Used to automatically convert round joins to miter joins for shallow angles.",
    requires: [
      {
        "line-join": "round"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-sort-key": {
    type: "number",
    doc: "Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key.",
    "sdk-support": {
      "basic functionality": {
        js: "1.2.0",
        android: "9.1.0",
        ios: "5.8.0",
        macos: "0.15.0"
      },
      "data-driven styling": {
        js: "1.2.0",
        android: "9.1.0",
        ios: "5.8.0",
        macos: "0.15.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {
        doc: "The layer is shown."
      },
      none: {
        doc: "The layer is not shown."
      }
    },
    "default": "visible",
    doc: "Whether this layer is displayed.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    "property-type": "constant"
  }
};
var layout_symbol = {
  "symbol-placement": {
    type: "enum",
    values: {
      point: {
        doc: "The label is placed at the point where the geometry is located."
      },
      line: {
        doc: "The label is placed along the line of the geometry. Can only be used on `LineString` and `Polygon` geometries."
      },
      "line-center": {
        doc: "The label is placed at the center of the line of the geometry. Can only be used on `LineString` and `Polygon` geometries. Note that a single feature in a vector tile may contain multiple line geometries."
      }
    },
    "default": "point",
    doc: "Label placement relative to its geometry.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "`line-center` value": {
        js: "0.47.0",
        android: "6.4.0",
        ios: "4.3.0",
        macos: "0.10.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "symbol-spacing": {
    type: "number",
    "default": 250,
    minimum: 1,
    units: "pixels",
    doc: "Distance between two symbol anchors.",
    requires: [
      {
        "symbol-placement": "line"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "symbol-avoid-edges": {
    type: "boolean",
    "default": false,
    doc: "If true, the symbols will not cross tile edges to avoid mutual collisions. Recommended in layers that don't have enough padding in the vector tile to prevent collisions, or if it is a point symbol layer placed after a line symbol layer. When using a client that supports global collision detection, like Mapbox GL JS version 0.42.0 or greater, enabling this property is not needed to prevent clipped labels at tile boundaries.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "symbol-sort-key": {
    type: "number",
    doc: "Sorts features in ascending order based on this value. Features with lower sort keys are drawn and placed first.  When `icon-allow-overlap` or `text-allow-overlap` is `false`, features with a lower sort key will have priority during placement. When `icon-allow-overlap` or `text-allow-overlap` is set to `true`, features with a higher sort key will overlap over features with a lower sort key.",
    "sdk-support": {
      "basic functionality": {
        js: "0.53.0",
        android: "7.4.0",
        ios: "4.11.0",
        macos: "0.14.0"
      },
      "data-driven styling": {
        js: "0.53.0",
        android: "7.4.0",
        ios: "4.11.0",
        macos: "0.14.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "symbol-z-order": {
    type: "enum",
    values: {
      auto: {
        doc: "Sorts symbols by `symbol-sort-key` if set. Otherwise, sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."
      },
      "viewport-y": {
        doc: "Sorts symbols by their y-position relative to the viewport if `icon-allow-overlap` or `text-allow-overlap` is set to `true` or `icon-ignore-placement` or `text-ignore-placement` is `false`."
      },
      source: {
        doc: "Sorts symbols by `symbol-sort-key` if set. Otherwise, no sorting is applied; symbols are rendered in the same order as the source data."
      }
    },
    "default": "auto",
    doc: "Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use `symbol-sort-key`.",
    "sdk-support": {
      "basic functionality": {
        js: "0.49.0",
        android: "6.6.0",
        ios: "4.5.0",
        macos: "0.12.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-allow-overlap": {
    type: "boolean",
    "default": false,
    doc: "If true, the icon will be visible even if it collides with other previously drawn symbols.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-ignore-placement": {
    type: "boolean",
    "default": false,
    doc: "If true, other symbols can be visible even if they collide with the icon.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-optional": {
    type: "boolean",
    "default": false,
    doc: "If true, text will display without their corresponding icons when the icon collides with other symbols and the text does not.",
    requires: [
      "icon-image",
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-rotation-alignment": {
    type: "enum",
    values: {
      map: {
        doc: "When `symbol-placement` is set to `point`, aligns icons east-west. When `symbol-placement` is set to `line` or `line-center`, aligns icon x-axes with the line."
      },
      viewport: {
        doc: "Produces icons whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."
      },
      auto: {
        doc: "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."
      }
    },
    "default": "auto",
    doc: "In combination with `symbol-placement`, determines the rotation behavior of icons.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "`auto` value": {
        js: "0.25.0",
        android: "4.2.0",
        ios: "3.4.0",
        macos: "0.3.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-size": {
    type: "number",
    "default": 1,
    minimum: 0,
    units: "factor of the original icon size",
    doc: "Scales the original size of the icon by the provided factor. The new pixel size of the image will be the original pixel size multiplied by `icon-size`. 1 is the original size; 3 triples the size of the image.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.35.0",
        android: "5.1.0",
        ios: "3.6.0",
        macos: "0.5.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-text-fit": {
    type: "enum",
    values: {
      none: {
        doc: "The icon is displayed at its intrinsic aspect ratio."
      },
      width: {
        doc: "The icon is scaled in the x-dimension to fit the width of the text."
      },
      height: {
        doc: "The icon is scaled in the y-dimension to fit the height of the text."
      },
      both: {
        doc: "The icon is scaled in both x- and y-dimensions."
      }
    },
    "default": "none",
    doc: "Scales the icon to fit around the associated text.",
    requires: [
      "icon-image",
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.21.0",
        android: "4.2.0",
        ios: "3.4.0",
        macos: "0.2.1"
      },
      "stretchable icons": {
        js: "1.6.0",
        android: "9.2.0",
        ios: "5.8.0",
        macos: "0.15.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-text-fit-padding": {
    type: "array",
    value: "number",
    length: 4,
    "default": [
      0,
      0,
      0,
      0
    ],
    units: "pixels",
    doc: "Size of the additional area added to dimensions determined by `icon-text-fit`, in clockwise order: top, right, bottom, left.",
    requires: [
      "icon-image",
      "text-field",
      {
        "icon-text-fit": [
          "both",
          "width",
          "height"
        ]
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.21.0",
        android: "4.2.0",
        ios: "3.4.0",
        macos: "0.2.1"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-image": {
    type: "resolvedImage",
    doc: "Name of image in sprite to use for drawing an image background.",
    tokens: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.35.0",
        android: "5.1.0",
        ios: "3.6.0",
        macos: "0.5.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-rotate": {
    type: "number",
    "default": 0,
    period: 360,
    units: "degrees",
    doc: "Rotates the icon clockwise.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.21.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-padding": {
    type: "number",
    "default": 2,
    minimum: 0,
    units: "pixels",
    doc: "Size of the additional area around the icon bounding box used for detecting symbol collisions.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-keep-upright": {
    type: "boolean",
    "default": false,
    doc: "If true, the icon may be flipped to prevent it from being rendered upside-down.",
    requires: [
      "icon-image",
      {
        "icon-rotation-alignment": "map"
      },
      {
        "symbol-placement": [
          "line",
          "line-center"
        ]
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-offset": {
    type: "array",
    value: "number",
    length: 2,
    "default": [
      0,
      0
    ],
    doc: "Offset distance of icon from its anchor. Positive values indicate right and down, while negative values indicate left and up. Each component is multiplied by the value of `icon-size` to obtain the final offset in pixels. When combined with `icon-rotate` the offset will be as if the rotated direction was up.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-anchor": {
    type: "enum",
    values: {
      center: {
        doc: "The center of the icon is placed closest to the anchor."
      },
      left: {
        doc: "The left side of the icon is placed closest to the anchor."
      },
      right: {
        doc: "The right side of the icon is placed closest to the anchor."
      },
      top: {
        doc: "The top of the icon is placed closest to the anchor."
      },
      bottom: {
        doc: "The bottom of the icon is placed closest to the anchor."
      },
      "top-left": {
        doc: "The top left corner of the icon is placed closest to the anchor."
      },
      "top-right": {
        doc: "The top right corner of the icon is placed closest to the anchor."
      },
      "bottom-left": {
        doc: "The bottom left corner of the icon is placed closest to the anchor."
      },
      "bottom-right": {
        doc: "The bottom right corner of the icon is placed closest to the anchor."
      }
    },
    "default": "center",
    doc: "Part of the icon placed closest to the anchor.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.40.0",
        android: "5.2.0",
        ios: "3.7.0",
        macos: "0.6.0"
      },
      "data-driven styling": {
        js: "0.40.0",
        android: "5.2.0",
        ios: "3.7.0",
        macos: "0.6.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-pitch-alignment": {
    type: "enum",
    values: {
      map: {
        doc: "The icon is aligned to the plane of the map."
      },
      viewport: {
        doc: "The icon is aligned to the plane of the viewport."
      },
      auto: {
        doc: "Automatically matches the value of `icon-rotation-alignment`."
      }
    },
    "default": "auto",
    doc: "Orientation of icon when map is pitched.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.39.0",
        android: "5.2.0",
        ios: "3.7.0",
        macos: "0.6.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-pitch-alignment": {
    type: "enum",
    values: {
      map: {
        doc: "The text is aligned to the plane of the map."
      },
      viewport: {
        doc: "The text is aligned to the plane of the viewport."
      },
      auto: {
        doc: "Automatically matches the value of `text-rotation-alignment`."
      }
    },
    "default": "auto",
    doc: "Orientation of text when map is pitched.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.21.0",
        android: "4.2.0",
        ios: "3.4.0",
        macos: "0.2.1"
      },
      "`auto` value": {
        js: "0.25.0",
        android: "4.2.0",
        ios: "3.4.0",
        macos: "0.3.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-rotation-alignment": {
    type: "enum",
    values: {
      map: {
        doc: "When `symbol-placement` is set to `point`, aligns text east-west. When `symbol-placement` is set to `line` or `line-center`, aligns text x-axes with the line."
      },
      viewport: {
        doc: "Produces glyphs whose x-axes are aligned with the x-axis of the viewport, regardless of the value of `symbol-placement`."
      },
      auto: {
        doc: "When `symbol-placement` is set to `point`, this is equivalent to `viewport`. When `symbol-placement` is set to `line` or `line-center`, this is equivalent to `map`."
      }
    },
    "default": "auto",
    doc: "In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "`auto` value": {
        js: "0.25.0",
        android: "4.2.0",
        ios: "3.4.0",
        macos: "0.3.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-field": {
    type: "formatted",
    "default": "",
    tokens: true,
    doc: "Value to use for a text label. If a plain `string` is provided, it will be treated as a `formatted` with default/inherited formatting options. SDF images are not supported in formatted text and will be ignored.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-font": {
    type: "array",
    value: "string",
    "default": [
      "Open Sans Regular",
      "Arial Unicode MS Regular"
    ],
    doc: "Font stack to use for displaying text.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.43.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-size": {
    type: "number",
    "default": 16,
    minimum: 0,
    units: "pixels",
    doc: "Font size.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.35.0",
        android: "5.1.0",
        ios: "3.6.0",
        macos: "0.5.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-max-width": {
    type: "number",
    "default": 10,
    minimum: 0,
    units: "ems",
    doc: "The maximum line width for text wrapping.",
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "point"
        ]
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.40.0",
        android: "5.2.0",
        ios: "3.7.0",
        macos: "0.6.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-line-height": {
    type: "number",
    "default": 1.2,
    units: "ems",
    doc: "Text leading value for multi-line text.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "2.3.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-letter-spacing": {
    type: "number",
    "default": 0,
    units: "ems",
    doc: "Text tracking amount.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.40.0",
        android: "5.2.0",
        ios: "3.7.0",
        macos: "0.6.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-justify": {
    type: "enum",
    values: {
      auto: {
        doc: "The text is aligned towards the anchor position."
      },
      left: {
        doc: "The text is aligned to the left."
      },
      center: {
        doc: "The text is centered."
      },
      right: {
        doc: "The text is aligned to the right."
      }
    },
    "default": "center",
    doc: "Text justification options.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.39.0",
        android: "5.2.0",
        ios: "3.7.0",
        macos: "0.6.0"
      },
      auto: {
        js: "0.54.0",
        android: "7.4.0",
        ios: "4.10.0",
        macos: "0.14.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-radial-offset": {
    type: "number",
    units: "ems",
    "default": 0,
    doc: "Radial offset of text, in the direction of the symbol's anchor. Useful in combination with `text-variable-anchor`, which defaults to using the two-dimensional `text-offset` if present.",
    "sdk-support": {
      "basic functionality": {
        js: "0.54.0",
        android: "7.4.0",
        ios: "4.10.0",
        macos: "0.14.0"
      },
      "data-driven styling": {
        js: "0.54.0",
        android: "7.4.0",
        ios: "4.10.0",
        macos: "0.14.0"
      }
    },
    requires: [
      "text-field"
    ],
    "property-type": "data-driven",
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature"
      ]
    }
  },
  "text-variable-anchor": {
    type: "array",
    value: "enum",
    values: {
      center: {
        doc: "The center of the text is placed closest to the anchor."
      },
      left: {
        doc: "The left side of the text is placed closest to the anchor."
      },
      right: {
        doc: "The right side of the text is placed closest to the anchor."
      },
      top: {
        doc: "The top of the text is placed closest to the anchor."
      },
      bottom: {
        doc: "The bottom of the text is placed closest to the anchor."
      },
      "top-left": {
        doc: "The top left corner of the text is placed closest to the anchor."
      },
      "top-right": {
        doc: "The top right corner of the text is placed closest to the anchor."
      },
      "bottom-left": {
        doc: "The bottom left corner of the text is placed closest to the anchor."
      },
      "bottom-right": {
        doc: "The bottom right corner of the text is placed closest to the anchor."
      }
    },
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "point"
        ]
      }
    ],
    doc: "To increase the chance of placing high-priority labels on the map, you can provide an array of `text-anchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `text-justify: auto` to choose justification based on anchor position. To apply an offset, use the `text-radial-offset` or the two-dimensional `text-offset`.",
    "sdk-support": {
      "basic functionality": {
        js: "0.54.0",
        android: "7.4.0",
        ios: "4.10.0",
        macos: "0.14.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-anchor": {
    type: "enum",
    values: {
      center: {
        doc: "The center of the text is placed closest to the anchor."
      },
      left: {
        doc: "The left side of the text is placed closest to the anchor."
      },
      right: {
        doc: "The right side of the text is placed closest to the anchor."
      },
      top: {
        doc: "The top of the text is placed closest to the anchor."
      },
      bottom: {
        doc: "The bottom of the text is placed closest to the anchor."
      },
      "top-left": {
        doc: "The top left corner of the text is placed closest to the anchor."
      },
      "top-right": {
        doc: "The top right corner of the text is placed closest to the anchor."
      },
      "bottom-left": {
        doc: "The bottom left corner of the text is placed closest to the anchor."
      },
      "bottom-right": {
        doc: "The bottom right corner of the text is placed closest to the anchor."
      }
    },
    "default": "center",
    doc: "Part of the text placed closest to the anchor.",
    requires: [
      "text-field",
      {
        "!": "text-variable-anchor"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.39.0",
        android: "5.2.0",
        ios: "3.7.0",
        macos: "0.6.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-max-angle": {
    type: "number",
    "default": 45,
    units: "degrees",
    doc: "Maximum angle change between adjacent characters.",
    requires: [
      "text-field",
      {
        "symbol-placement": [
          "line",
          "line-center"
        ]
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-writing-mode": {
    type: "array",
    value: "enum",
    values: {
      horizontal: {
        doc: "If a text's language supports horizontal writing mode, symbols would be laid out horizontally."
      },
      vertical: {
        doc: "If a text's language supports vertical writing mode, symbols would be laid out vertically."
      }
    },
    doc: "The property allows control over a symbol's orientation. Note that the property values act as a hint, so that a symbol whose language doesn\u2019t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single 'vertical' enum value. For symbol with point placement, the order of elements in an array define priority order for the placement of an orientation variant. For symbol with line placement, the default text writing mode is either ['horizontal', 'vertical'] or ['vertical', 'horizontal'], the order doesn't affect the placement.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "1.3.0",
        android: "8.3.0",
        ios: "5.3.0",
        macos: "0.15.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-rotate": {
    type: "number",
    "default": 0,
    period: 360,
    units: "degrees",
    doc: "Rotates the text clockwise.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.35.0",
        android: "5.1.0",
        ios: "3.6.0",
        macos: "0.5.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-padding": {
    type: "number",
    "default": 2,
    minimum: 0,
    units: "pixels",
    doc: "Size of the additional area around the text bounding box used for detecting symbol collisions.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-keep-upright": {
    type: "boolean",
    "default": true,
    doc: "If true, the text may be flipped vertically to prevent it from being rendered upside-down.",
    requires: [
      "text-field",
      {
        "text-rotation-alignment": "map"
      },
      {
        "symbol-placement": [
          "line",
          "line-center"
        ]
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-transform": {
    type: "enum",
    values: {
      none: {
        doc: "The text is not altered."
      },
      uppercase: {
        doc: "Forces all letters to be displayed in uppercase."
      },
      lowercase: {
        doc: "Forces all letters to be displayed in lowercase."
      }
    },
    "default": "none",
    doc: "Specifies how to capitalize text, similar to the CSS `text-transform` property.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-offset": {
    type: "array",
    doc: "Offset distance of text from its anchor. Positive values indicate right and down, while negative values indicate left and up. If used with text-variable-anchor, input values will be taken as absolute values. Offsets along the x- and y-axis will be applied automatically based on the anchor position.",
    value: "number",
    units: "ems",
    length: 2,
    "default": [
      0,
      0
    ],
    requires: [
      "text-field",
      {
        "!": "text-radial-offset"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.35.0",
        android: "5.1.0",
        ios: "3.6.0",
        macos: "0.5.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "data-driven"
  },
  "text-allow-overlap": {
    type: "boolean",
    "default": false,
    doc: "If true, the text will be visible even if it collides with other previously drawn symbols.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-ignore-placement": {
    type: "boolean",
    "default": false,
    doc: "If true, other symbols can be visible even if they collide with the text.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-optional": {
    type: "boolean",
    "default": false,
    doc: "If true, icons will display without their corresponding text when the text collides with other symbols and the icon does not.",
    requires: [
      "text-field",
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  visibility: {
    type: "enum",
    values: {
      visible: {
        doc: "The layer is shown."
      },
      none: {
        doc: "The layer is not shown."
      }
    },
    "default": "visible",
    doc: "Whether this layer is displayed.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    "property-type": "constant"
  }
};
var layout_raster = {
  visibility: {
    type: "enum",
    values: {
      visible: {
        doc: "The layer is shown."
      },
      none: {
        doc: "The layer is not shown."
      }
    },
    "default": "visible",
    doc: "Whether this layer is displayed.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    "property-type": "constant"
  }
};
var layout_hillshade = {
  visibility: {
    type: "enum",
    values: {
      visible: {
        doc: "The layer is shown."
      },
      none: {
        doc: "The layer is not shown."
      }
    },
    "default": "visible",
    doc: "Whether this layer is displayed.",
    "sdk-support": {
      "basic functionality": {
        js: "0.43.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    "property-type": "constant"
  }
};
var filter = {
  type: "array",
  value: "*",
  doc: "A filter selects specific features from a layer."
};
var filter_operator = {
  type: "enum",
  values: {
    "==": {
      doc: '`["==", key, value]` equality: `feature[key] = value`'
    },
    "!=": {
      doc: '`["!=", key, value]` inequality: `feature[key] \u2260 value`'
    },
    ">": {
      doc: '`[">", key, value]` greater than: `feature[key] > value`'
    },
    ">=": {
      doc: '`[">=", key, value]` greater than or equal: `feature[key] \u2265 value`'
    },
    "<": {
      doc: '`["<", key, value]` less than: `feature[key] < value`'
    },
    "<=": {
      doc: '`["<=", key, value]` less than or equal: `feature[key] \u2264 value`'
    },
    "in": {
      doc: '`["in", key, v0, ..., vn]` set inclusion: `feature[key] \u2208 {v0, ..., vn}`'
    },
    "!in": {
      doc: '`["!in", key, v0, ..., vn]` set exclusion: `feature[key] \u2209 {v0, ..., vn}`'
    },
    all: {
      doc: '`["all", f0, ..., fn]` logical `AND`: `f0 \u2227 ... \u2227 fn`'
    },
    any: {
      doc: '`["any", f0, ..., fn]` logical `OR`: `f0 \u2228 ... \u2228 fn`'
    },
    none: {
      doc: '`["none", f0, ..., fn]` logical `NOR`: `\xACf0 \u2227 ... \u2227 \xACfn`'
    },
    has: {
      doc: '`["has", key]` `feature[key]` exists'
    },
    "!has": {
      doc: '`["!has", key]` `feature[key]` does not exist'
    },
    within: {
      doc: '`["within", object]` feature geometry is within object geometry'
    }
  },
  doc: "The filter operator."
};
var geometry_type = {
  type: "enum",
  values: {
    Point: {
      doc: "Filter to point geometries."
    },
    LineString: {
      doc: "Filter to line geometries."
    },
    Polygon: {
      doc: "Filter to polygon geometries."
    }
  },
  doc: "The geometry type for the filter to select."
};
var function_stop = {
  type: "array",
  minimum: 0,
  maximum: 24,
  value: [
    "number",
    "color"
  ],
  length: 2,
  doc: "Zoom level and value pair."
};
var expression = {
  type: "array",
  value: "*",
  minimum: 1,
  doc: "An expression defines a function that can be used for data-driven style properties or feature filters."
};
var expression_name = {
  doc: "",
  type: "enum",
  values: {
    "let": {
      doc: 'Binds expressions to named variables, which can then be referenced in the result expression using ["var", "variable_name"].',
      group: "Variable binding",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "var": {
      doc: 'References variable bound using "let".',
      group: "Variable binding",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    literal: {
      doc: "Provides a literal array or object value.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    array: {
      doc: "Asserts that the input is an array (optionally with a specific item type and length).  If, when the input expression is evaluated, it is not of the asserted type, then this assertion will cause the whole expression to be aborted.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    at: {
      doc: "Retrieves an item from an array.",
      group: "Lookup",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "in": {
      doc: "Determines whether an item exists in an array or a substring exists in a string. In the specific case when the second and third arguments are string literals, you must wrap at least one of them in a [`literal`](#types-literal) expression to hint correct interpretation to the [type system](#type-system).",
      group: "Lookup",
      "sdk-support": {
        "basic functionality": {
          js: "1.6.0",
          android: "9.1.0",
          ios: "5.8.0",
          macos: "0.15.0"
        }
      }
    },
    "index-of": {
      doc: "Returns the first position at which an item can be found in an array or a substring can be found in a string, or `-1` if the input cannot be found. Accepts an optional index from where to begin the search.",
      group: "Lookup",
      "sdk-support": {
        "basic functionality": {
          js: "1.10.0"
        }
      }
    },
    slice: {
      doc: "Returns an item from an array or a substring from a string from a specified start index, or between a start index and an end index if set. The return value is inclusive of the start index but not of the end index.",
      group: "Lookup",
      "sdk-support": {
        "basic functionality": {
          js: "1.10.0"
        }
      }
    },
    "case": {
      doc: "Selects the first output whose corresponding test condition evaluates to true, or the fallback value otherwise.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    match: {
      doc: 'Selects the output for which the label value matches the input value, or the fallback value if no match is found. The input can be any expression (for example, `["get", "building_type"]`). Each label must be unique, and must be either:\n - a single literal value; or\n - an array of literal values, the values of which must be all strings or all numbers (for example `[100, 101]` or `["c", "b"]`).\n\nThe input matches if any of the values in the array matches using strict equality, similar to the `"in"` operator.\nIf the input type does not match the type of the labels, the result will be the fallback value.',
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    coalesce: {
      doc: "Evaluates each expression in turn until the first valid value is obtained. Invalid values are `null` and [`'image'`](#types-image) expressions that are unavailable in the style. If all values are invalid, `coalesce` returns the first value listed.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    step: {
      doc: 'Produces discrete, stepped results by evaluating a piecewise-constant function defined by pairs of input and output values ("stops"). The `input` may be any numeric expression (e.g., `["get", "population"]`). Stop inputs must be numeric literals in strictly ascending order. Returns the output value of the stop just less than the input, or the first output if the input is less than the first stop.',
      group: "Ramps, scales, curves",
      "sdk-support": {
        "basic functionality": {
          js: "0.42.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    interpolate: {
      doc: 'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). The `input` may be any numeric expression (e.g., `["get", "population"]`). Stop inputs must be numeric literals in strictly ascending order. The output type must be `number`, `array<number>`, or `color`.\n\nInterpolation types:\n- `["linear"]`: Interpolates linearly between the pair of stops just less than and just greater than the input.\n- `["exponential", base]`: Interpolates exponentially between the stops just less than and just greater than the input. `base` controls the rate at which the output increases: higher values make the output increase more towards the high end of the range. With values close to 1 the output increases linearly.\n- `["cubic-bezier", x1, y1, x2, y2]`: Interpolates using the cubic bezier curve defined by the given control points.',
      group: "Ramps, scales, curves",
      "sdk-support": {
        "basic functionality": {
          js: "0.42.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "interpolate-hcl": {
      doc: 'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the Hue-Chroma-Luminance color space.',
      group: "Ramps, scales, curves",
      "sdk-support": {
        "basic functionality": {
          js: "0.49.0"
        }
      }
    },
    "interpolate-lab": {
      doc: 'Produces continuous, smooth results by interpolating between pairs of input and output values ("stops"). Works like `interpolate`, but the output type must be `color`, and the interpolation is performed in the CIELAB color space.',
      group: "Ramps, scales, curves",
      "sdk-support": {
        "basic functionality": {
          js: "0.49.0"
        }
      }
    },
    ln2: {
      doc: "Returns mathematical constant ln(2).",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    pi: {
      doc: "Returns the mathematical constant pi.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    e: {
      doc: "Returns the mathematical constant e.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "typeof": {
      doc: "Returns a string describing the type of the given value.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    string: {
      doc: "Asserts that the input value is a string. If multiple values are provided, each one is evaluated in order until a string is obtained. If none of the inputs are strings, the expression is an error.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    number: {
      doc: "Asserts that the input value is a number. If multiple values are provided, each one is evaluated in order until a number is obtained. If none of the inputs are numbers, the expression is an error.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    boolean: {
      doc: "Asserts that the input value is a boolean. If multiple values are provided, each one is evaluated in order until a boolean is obtained. If none of the inputs are booleans, the expression is an error.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    object: {
      doc: "Asserts that the input value is an object. If multiple values are provided, each one is evaluated in order until an object is obtained. If none of the inputs are objects, the expression is an error.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    collator: {
      doc: "Returns a `collator` for use in locale-dependent comparison operations. The `case-sensitive` and `diacritic-sensitive` options default to `false`. The `locale` argument specifies the IETF language tag of the locale to use. If none is provided, the default locale is used. If the requested locale is not available, the `collator` will use a system-defined fallback locale. Use `resolved-locale` to test the results of locale fallback behavior.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.45.0",
          android: "6.5.0",
          ios: "4.2.0",
          macos: "0.9.0"
        }
      }
    },
    format: {
      doc: 'Returns a `formatted` string for displaying mixed-format text in the `text-field` property. The input may contain a string literal or expression, including an [`\'image\'`](#types-image) expression. Strings may be followed by a style override object that supports the following properties:\n- `"text-font"`: Overrides the font stack specified by the root layout property.\n- `"text-color"`: Overrides the color specified by the root paint property.\n- `"font-scale"`: Applies a scaling factor on `text-size` as specified by the root layout property.',
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.48.0",
          android: "6.7.0",
          ios: "4.6.0",
          macos: "0.12.0"
        },
        "text-font": {
          js: "0.48.0",
          android: "6.7.0",
          ios: "4.6.0",
          macos: "0.12.0"
        },
        "font-scale": {
          js: "0.48.0",
          android: "6.7.0",
          ios: "4.6.0",
          macos: "0.12.0"
        },
        "text-color": {
          js: "1.3.0",
          android: "7.3.0",
          ios: "4.10.0",
          macos: "0.14.0"
        },
        image: {
          js: "1.6.0",
          android: "8.6.0",
          ios: "5.7.0",
          macos: "0.15.0"
        }
      }
    },
    image: {
      doc: "Returns a [`ResolvedImage`](/mapbox-gl-js/style-spec/types/#resolvedimage) for use in [`icon-image`](/mapbox-gl-js/style-spec/layers/#layout-symbol-icon-image), `*-pattern` entries, and as a section in the [`'format'`](#types-format) expression. A [`'coalesce'`](#coalesce) expression containing `image` expressions will evaluate to the first listed image that is currently in the style. This validation process is synchronous and requires the image to have been added to the style before requesting it in the `'image'` argument.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "1.4.0",
          android: "8.6.0",
          ios: "5.7.0",
          macos: "0.15.0"
        }
      }
    },
    "number-format": {
      doc: "Converts the input number into a string representation using the providing formatting rules. If set, the `locale` argument specifies the locale to use, as a BCP 47 language tag. If set, the `currency` argument specifies an ISO 4217 code to use for currency-style formatting. If set, the `min-fraction-digits` and `max-fraction-digits` arguments specify the minimum and maximum number of fractional digits to include.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.54.0",
          android: "8.4.0",
          ios: "5.4.0",
          macos: "0.15.0"
        }
      }
    },
    "to-string": {
      doc: 'Converts the input value to a string. If the input is `null`, the result is `""`. If the input is a [`boolean`](#types-boolean), the result is `"true"` or `"false"`. If the input is a number, it is converted to a string as specified by the ["NumberToString" algorithm](https://tc39.github.io/ecma262/#sec-tostring-applied-to-the-number-type) of the ECMAScript Language Specification. If the input is a [`color`](#color), it is converted to a string of the form `"rgba(r,g,b,a)"`, where `r`, `g`, and `b` are numerals ranging from 0 to 255, and `a` ranges from 0 to 1. If the input is an [`\'image\'`](#types-image) expression, `\'to-string\'` returns the image name. Otherwise, the input is converted to a string in the format specified by the [`JSON.stringify`](https://tc39.github.io/ecma262/#sec-json.stringify) function of the ECMAScript Language Specification.',
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "to-number": {
      doc: 'Converts the input value to a number, if possible. If the input is `null` or `false`, the result is 0. If the input is `true`, the result is 1. If the input is a string, it is converted to a number as specified by the ["ToNumber Applied to the String Type" algorithm](https://tc39.github.io/ecma262/#sec-tonumber-applied-to-the-string-type) of the ECMAScript Language Specification. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.',
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "to-boolean": {
      doc: "Converts the input value to a boolean. The result is `false` when then input is an empty string, 0, `false`, `null`, or `NaN`; otherwise it is `true`.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "to-rgba": {
      doc: "Returns a four-element array containing the input color's red, green, blue, and alpha components, in that order.",
      group: "Color",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "to-color": {
      doc: "Converts the input value to a color. If multiple values are provided, each one is evaluated in order until the first successful conversion is obtained. If none of the inputs can be converted, the expression is an error.",
      group: "Types",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    rgb: {
      doc: "Creates a color value from red, green, and blue components, which must range between 0 and 255, and an alpha component of 1. If any component is out of range, the expression is an error.",
      group: "Color",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    rgba: {
      doc: "Creates a color value from red, green, blue components, which must range between 0 and 255, and an alpha component which must range between 0 and 1. If any component is out of range, the expression is an error.",
      group: "Color",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    get: {
      doc: "Retrieves a property value from the current feature's properties, or from another object if a second argument is provided. Returns `null` if the requested property is missing.",
      group: "Lookup",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    has: {
      doc: "Tests for the presence of an property value in the current feature's properties, or from another object if a second argument is provided.",
      group: "Lookup",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    length: {
      doc: "Gets the length of an array or string.",
      group: "Lookup",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    properties: {
      doc: 'Gets the feature properties object.  Note that in some cases, it may be more efficient to use ["get", "property_name"] directly.',
      group: "Feature data",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "feature-state": {
      doc: "Retrieves a property value from the current feature's state. Returns `null` if the requested property is not present on the feature's state. A feature's state is not part of the GeoJSON or vector tile data, and must be set programmatically on each feature. Features are identified by their `id` attribute, which must be an integer or a string that can be cast to an integer. Note that [\"feature-state\"] can only be used with paint properties that support data-driven styling.",
      group: "Feature data",
      "sdk-support": {
        "basic functionality": {
          js: "0.46.0"
        }
      }
    },
    "geometry-type": {
      doc: "Gets the feature's geometry type: `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`. `Multi*` feature types are only returned in GeoJSON sources. When working with vector tile sources, use the singular forms.",
      group: "Feature data",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    id: {
      doc: "Gets the feature's id, if it has one.",
      group: "Feature data",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    zoom: {
      doc: 'Gets the current zoom level.  Note that in style layout and paint properties, ["zoom"] may only appear as the input to a top-level "step" or "interpolate" expression.',
      group: "Zoom",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "heatmap-density": {
      doc: "Gets the kernel density estimation of a pixel in a heatmap layer, which is a relative measure of how many data points are crowded around a particular pixel. Can only be used in the `heatmap-color` property.",
      group: "Heatmap",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "line-progress": {
      doc: "Gets the progress along a gradient line. Can only be used in the `line-gradient` property.",
      group: "Feature data",
      "sdk-support": {
        "basic functionality": {
          js: "0.45.0",
          android: "6.5.0",
          ios: "4.6.0",
          macos: "0.12.0"
        }
      }
    },
    "sky-radial-progress": {
      doc: "Gets the distance of a point on the sky from the sun position. Returns 0 at sun position and 1 when the distance reaches `sky-gradient-radius`. Can only be used in the `sky-gradient` property.",
      group: "sky",
      "sdk-support": {
        "basic functionality": {
          js: "2.0.0",
          ios: "10.0.0",
          android: "10.0.0"
        }
      }
    },
    accumulated: {
      doc: "Gets the value of a cluster property accumulated so far. Can only be used in the `clusterProperties` option of a clustered GeoJSON source.",
      group: "Feature data",
      "sdk-support": {
        "basic functionality": {
          js: "0.53.0",
          android: "8.4.0",
          ios: "5.5.0",
          macos: "0.15.0"
        }
      }
    },
    "+": {
      doc: "Returns the sum of the inputs.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "*": {
      doc: "Returns the product of the inputs.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "-": {
      doc: "For two inputs, returns the result of subtracting the second input from the first. For a single input, returns the result of subtracting it from 0.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "/": {
      doc: "Returns the result of floating point division of the first input by the second.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "%": {
      doc: "Returns the remainder after integer division of the first input by the second.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "^": {
      doc: "Returns the result of raising the first input to the power specified by the second.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    sqrt: {
      doc: "Returns the square root of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.42.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    log10: {
      doc: "Returns the base-ten logarithm of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    ln: {
      doc: "Returns the natural logarithm of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    log2: {
      doc: "Returns the base-two logarithm of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    sin: {
      doc: "Returns the sine of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    cos: {
      doc: "Returns the cosine of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    tan: {
      doc: "Returns the tangent of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    asin: {
      doc: "Returns the arcsine of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    acos: {
      doc: "Returns the arccosine of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    atan: {
      doc: "Returns the arctangent of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    min: {
      doc: "Returns the minimum value of the inputs.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    max: {
      doc: "Returns the maximum value of the inputs.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    round: {
      doc: 'Rounds the input to the nearest integer. Halfway values are rounded away from zero. For example, `["round", -1.5]` evaluates to -2.',
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.45.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    abs: {
      doc: "Returns the absolute value of the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.45.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    ceil: {
      doc: "Returns the smallest integer that is greater than or equal to the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.45.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    floor: {
      doc: "Returns the largest integer that is less than or equal to the input.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          js: "0.45.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    distance: {
      doc: "Returns the shortest distance in meters between the evaluated feature and the input geometry. The input value can be a valid GeoJSON of type `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Distance values returned may vary in precision due to loss in precision from encoding geometries, particularly below zoom level 13.",
      group: "Math",
      "sdk-support": {
        "basic functionality": {
          android: "9.2.0",
          ios: "5.9.0",
          macos: "0.16.0"
        }
      }
    },
    "==": {
      doc: "Returns `true` if the input values are equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        },
        collator: {
          js: "0.45.0",
          android: "6.5.0",
          ios: "4.2.0",
          macos: "0.9.0"
        }
      }
    },
    "!=": {
      doc: "Returns `true` if the input values are not equal, `false` otherwise. The comparison is strictly typed: values of different runtime types are always considered unequal. Cases where the types are known to be different at parse time are considered invalid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        },
        collator: {
          js: "0.45.0",
          android: "6.5.0",
          ios: "4.2.0",
          macos: "0.9.0"
        }
      }
    },
    ">": {
      doc: "Returns `true` if the first input is strictly greater than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        },
        collator: {
          js: "0.45.0",
          android: "6.5.0",
          ios: "4.2.0",
          macos: "0.9.0"
        }
      }
    },
    "<": {
      doc: "Returns `true` if the first input is strictly less than the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        },
        collator: {
          js: "0.45.0",
          android: "6.5.0",
          ios: "4.2.0",
          macos: "0.9.0"
        }
      }
    },
    ">=": {
      doc: "Returns `true` if the first input is greater than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        },
        collator: {
          js: "0.45.0",
          android: "6.5.0",
          ios: "4.2.0",
          macos: "0.9.0"
        }
      }
    },
    "<=": {
      doc: "Returns `true` if the first input is less than or equal to the second, `false` otherwise. The arguments are required to be either both strings or both numbers; if during evaluation they are not, expression evaluation produces an error. Cases where this constraint is known not to hold at parse time are considered in valid and will produce a parse error. Accepts an optional `collator` argument to control locale-dependent string comparisons.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        },
        collator: {
          js: "0.45.0",
          android: "6.5.0",
          ios: "4.2.0",
          macos: "0.9.0"
        }
      }
    },
    all: {
      doc: "Returns `true` if all the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `false`, the result is `false` and no further input expressions are evaluated.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    any: {
      doc: "Returns `true` if any of the inputs are `true`, `false` otherwise. The inputs are evaluated in order, and evaluation is short-circuiting: once an input expression evaluates to `true`, the result is `true` and no further input expressions are evaluated.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "!": {
      doc: "Logical negation. Returns `true` if the input is `false`, and `false` if the input is `true`.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    within: {
      doc: "Returns `true` if the evaluated feature is fully contained inside a boundary of the input geometry, `false` otherwise. The input value can be a valid GeoJSON of type `Polygon`, `MultiPolygon`, `Feature`, or `FeatureCollection`. Supported features for evaluation:\n- `Point`: Returns `false` if a point is on the boundary or falls outside the boundary.\n- `LineString`: Returns `false` if any part of a line falls outside the boundary, the line intersects the boundary, or a line's endpoint is on the boundary.",
      group: "Decision",
      "sdk-support": {
        "basic functionality": {
          js: "1.9.0",
          android: "9.1.0",
          ios: "5.8.0",
          macos: "0.15.0"
        }
      }
    },
    "is-supported-script": {
      doc: "Returns `true` if the input string is expected to render legibly. Returns `false` if the input string contains sections that cannot be rendered without potential loss of meaning (e.g. Indic scripts that require complex text shaping, or right-to-left scripts if the the `mapbox-gl-rtl-text` plugin is not in use in Mapbox GL JS).",
      group: "String",
      "sdk-support": {
        "basic functionality": {
          js: "0.45.0",
          android: "6.6.0"
        }
      }
    },
    upcase: {
      doc: "Returns the input string converted to uppercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",
      group: "String",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    downcase: {
      doc: "Returns the input string converted to lowercase. Follows the Unicode Default Case Conversion algorithm and the locale-insensitive case mappings in the Unicode Character Database.",
      group: "String",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    concat: {
      doc: "Returns a `string` consisting of the concatenation of the inputs. Each input is converted to a string as if by `to-string`.",
      group: "String",
      "sdk-support": {
        "basic functionality": {
          js: "0.41.0",
          android: "6.0.0",
          ios: "4.0.0",
          macos: "0.7.0"
        }
      }
    },
    "resolved-locale": {
      doc: "Returns the IETF language tag of the locale being used by the provided `collator`. This can be used to determine the default system locale, or to determine if a requested locale was successfully loaded.",
      group: "String",
      "sdk-support": {
        "basic functionality": {
          js: "0.45.0",
          android: "6.5.0",
          ios: "4.2.0",
          macos: "0.9.0"
        }
      }
    }
  }
};
var fog = {
  range: {
    type: "array",
    "default": [
      0.5,
      10
    ],
    minimum: -20,
    maximum: 20,
    length: 2,
    value: "number",
    "property-type": "data-constant",
    transition: true,
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    doc: "The start and end distance range in which fog fades from fully transparent to fully opaque. The distance to the point at the center of the map is defined as zero, so that negative range values are closer to the camera, and positive values are farther away.",
    example: [
      0.5,
      10
    ],
    "sdk-support": {
      "basic functionality": {
        js: "2.3.0"
      }
    }
  },
  color: {
    type: "color",
    "property-type": "data-constant",
    "default": "#ffffff",
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    transition: true,
    doc: "The color of the fog. Using opacity is recommended only for smoothly transitioning fog on/off as anything less than 100% opacity results in more tiles loaded and drawn.",
    "sdk-support": {
      "basic functionality": {
        js: "2.3.0"
      }
    }
  },
  "horizon-blend": {
    type: "number",
    "property-type": "data-constant",
    "default": 0.1,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    transition: true,
    doc: "Horizon blend applies a smooth fade from the color of the fog to the color of the sky. A value of zero leaves a sharp transition from fog to sky. Increasing the value blends the color of fog into increasingly high angles of the sky.",
    "sdk-support": {
      "basic functionality": {
        js: "2.3.0"
      }
    }
  }
};
var light = {
  anchor: {
    type: "enum",
    "default": "viewport",
    values: {
      map: {
        doc: "The position of the light source is aligned to the rotation of the map."
      },
      viewport: {
        doc: "The position of the light source is aligned to the rotation of the viewport."
      }
    },
    "property-type": "data-constant",
    transition: false,
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    doc: "Whether extruded geometries are lit relative to the map or viewport.",
    example: "map",
    "sdk-support": {
      "basic functionality": {
        js: "0.27.0",
        android: "5.1.0",
        ios: "3.6.0",
        macos: "0.5.0"
      }
    }
  },
  position: {
    type: "array",
    "default": [
      1.15,
      210,
      30
    ],
    length: 3,
    value: "number",
    "property-type": "data-constant",
    transition: true,
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    doc: "Position of the light source relative to lit (extruded) geometries, in [r radial coordinate, a azimuthal angle, p polar angle] where r indicates the distance from the center of the base of an object to its light, a indicates the position of the light relative to 0\xB0 (0\xB0 when `light.anchor` is set to `viewport` corresponds to the top of the viewport, or 0\xB0 when `light.anchor` is set to `map` corresponds to due north, and degrees proceed clockwise), and p indicates the height of the light (from 0\xB0, directly above, to 180\xB0, directly below).",
    example: [
      1.5,
      90,
      80
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.27.0",
        android: "5.1.0",
        ios: "3.6.0",
        macos: "0.5.0"
      }
    }
  },
  color: {
    type: "color",
    "property-type": "data-constant",
    "default": "#ffffff",
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    transition: true,
    doc: "Color tint for lighting extruded geometries.",
    "sdk-support": {
      "basic functionality": {
        js: "0.27.0",
        android: "5.1.0",
        ios: "3.6.0",
        macos: "0.5.0"
      }
    }
  },
  intensity: {
    type: "number",
    "property-type": "data-constant",
    "default": 0.5,
    minimum: 0,
    maximum: 1,
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    transition: true,
    doc: "Intensity of lighting (on a scale from 0 to 1). Higher numbers will present as more extreme contrast.",
    "sdk-support": {
      "basic functionality": {
        js: "0.27.0",
        android: "5.1.0",
        ios: "3.6.0",
        macos: "0.5.0"
      }
    }
  }
};
var terrain = {
  source: {
    type: "string",
    doc: "Name of a source of `raster_dem` type to be used for terrain elevation.",
    required: true,
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    }
  },
  exaggeration: {
    type: "number",
    "property-type": "data-constant",
    "default": 1,
    minimum: 0,
    maximum: 1e3,
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    transition: true,
    doc: "Exaggerates the elevation of the terrain by multiplying the data from the DEM with this value.",
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    }
  }
};
var paint = [
  "paint_fill",
  "paint_line",
  "paint_circle",
  "paint_heatmap",
  "paint_fill-extrusion",
  "paint_symbol",
  "paint_raster",
  "paint_hillshade",
  "paint_background",
  "paint_sky"
];
var paint_fill = {
  "fill-antialias": {
    type: "boolean",
    "default": true,
    doc: "Whether or not the fill should be antialiased.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "fill-opacity": {
    type: "number",
    "default": 1,
    minimum: 0,
    maximum: 1,
    doc: "The opacity of the entire fill layer. In contrast to the `fill-color`, this value will also affect the 1px stroke around the fill, if the stroke is used.",
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.21.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "fill-color": {
    type: "color",
    "default": "#000000",
    doc: "The color of the filled part of this layer. This color can be specified as `rgba` with an alpha component and the color's opacity will not affect the opacity of the 1px stroke, if it is used.",
    transition: true,
    requires: [
      {
        "!": "fill-pattern"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.19.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "fill-outline-color": {
    type: "color",
    doc: "The outline color of the fill. Matches the value of `fill-color` if unspecified.",
    transition: true,
    requires: [
      {
        "!": "fill-pattern"
      },
      {
        "fill-antialias": true
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.19.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "fill-translate": {
    type: "array",
    value: "number",
    length: 2,
    "default": [
      0,
      0
    ],
    transition: true,
    units: "pixels",
    doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "fill-translate-anchor": {
    type: "enum",
    values: {
      map: {
        doc: "The fill is translated relative to the map."
      },
      viewport: {
        doc: "The fill is translated relative to the viewport."
      }
    },
    doc: "Controls the frame of reference for `fill-translate`.",
    "default": "map",
    requires: [
      "fill-translate"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "fill-pattern": {
    type: "resolvedImage",
    transition: true,
    doc: "Name of image in sprite to use for drawing image fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.49.0",
        android: "6.5.0",
        macos: "0.11.0",
        ios: "4.4.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "cross-faded-data-driven"
  }
};
var paint_line = {
  "line-opacity": {
    type: "number",
    doc: "The opacity at which the line will be drawn.",
    "default": 1,
    minimum: 0,
    maximum: 1,
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-color": {
    type: "color",
    doc: "The color with which the line will be drawn.",
    "default": "#000000",
    transition: true,
    requires: [
      {
        "!": "line-pattern"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.23.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-translate": {
    type: "array",
    value: "number",
    length: 2,
    "default": [
      0,
      0
    ],
    transition: true,
    units: "pixels",
    doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-translate-anchor": {
    type: "enum",
    values: {
      map: {
        doc: "The line is translated relative to the map."
      },
      viewport: {
        doc: "The line is translated relative to the viewport."
      }
    },
    doc: "Controls the frame of reference for `line-translate`.",
    "default": "map",
    requires: [
      "line-translate"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "line-width": {
    type: "number",
    "default": 1,
    minimum: 0,
    transition: true,
    units: "pixels",
    doc: "Stroke thickness.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.39.0",
        android: "5.2.0",
        ios: "3.7.0",
        macos: "0.6.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-gap-width": {
    type: "number",
    "default": 0,
    minimum: 0,
    doc: "Draws a line casing outside of a line's actual path. Value indicates the width of the inner gap.",
    transition: true,
    units: "pixels",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-offset": {
    type: "number",
    "default": 0,
    doc: "The line's offset. For linear features, a positive value offsets the line to the right, relative to the direction of the line, and a negative value to the left. For polygon features, a positive value results in an inset, and a negative value results in an outset.",
    transition: true,
    units: "pixels",
    "sdk-support": {
      "basic functionality": {
        js: "0.12.1",
        android: "3.0.0",
        ios: "3.1.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-blur": {
    type: "number",
    "default": 0,
    minimum: 0,
    transition: true,
    units: "pixels",
    doc: "Blur applied to the line, in pixels.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "line-dasharray": {
    type: "array",
    value: "number",
    doc: "Specifies the lengths of the alternating dashes and gaps that form the dash pattern. The lengths are later scaled by the line width. To convert a dash length to pixels, multiply the length by the current line width. Note that GeoJSON sources with `lineMetrics: true` specified won't render dashed lines to the expected scale. Also note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
    minimum: 0,
    transition: true,
    units: "line widths",
    requires: [
      {
        "!": "line-pattern"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "2.3.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "cross-faded-data-driven"
  },
  "line-pattern": {
    type: "resolvedImage",
    transition: true,
    doc: "Name of image in sprite to use for drawing image lines. For seamless patterns, image width must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.49.0",
        android: "6.5.0",
        macos: "0.11.0",
        ios: "4.4.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom",
        "feature"
      ]
    },
    "property-type": "cross-faded-data-driven"
  },
  "line-gradient": {
    type: "color",
    doc: 'Defines a gradient with which to color a line feature. Can only be used with GeoJSON sources that specify `"lineMetrics": true`.',
    transition: false,
    requires: [
      {
        "!": "line-pattern"
      },
      {
        source: "geojson",
        has: {
          lineMetrics: true
        }
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.45.0",
        android: "6.5.0",
        ios: "4.4.0",
        macos: "0.11.0"
      },
      "data-driven styling": {}
    },
    expression: {
      interpolated: true,
      parameters: [
        "line-progress"
      ]
    },
    "property-type": "color-ramp"
  }
};
var paint_circle = {
  "circle-radius": {
    type: "number",
    "default": 5,
    minimum: 0,
    transition: true,
    units: "pixels",
    doc: "Circle radius.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.18.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-color": {
    type: "color",
    "default": "#000000",
    doc: "The fill color of the circle.",
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.18.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-blur": {
    type: "number",
    "default": 0,
    doc: "Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity.",
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.20.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-opacity": {
    type: "number",
    doc: "The opacity at which the circle will be drawn.",
    "default": 1,
    minimum: 0,
    maximum: 1,
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.20.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-translate": {
    type: "array",
    value: "number",
    length: 2,
    "default": [
      0,
      0
    ],
    transition: true,
    units: "pixels",
    doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up, respectively.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-translate-anchor": {
    type: "enum",
    values: {
      map: {
        doc: "The circle is translated relative to the map."
      },
      viewport: {
        doc: "The circle is translated relative to the viewport."
      }
    },
    doc: "Controls the frame of reference for `circle-translate`.",
    "default": "map",
    requires: [
      "circle-translate"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-pitch-scale": {
    type: "enum",
    values: {
      map: {
        doc: "Circles are scaled according to their apparent distance to the camera."
      },
      viewport: {
        doc: "Circles are not scaled."
      }
    },
    "default": "map",
    doc: "Controls the scaling behavior of the circle when the map is pitched.",
    "sdk-support": {
      "basic functionality": {
        js: "0.21.0",
        android: "4.2.0",
        ios: "3.4.0",
        macos: "0.2.1"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-pitch-alignment": {
    type: "enum",
    values: {
      map: {
        doc: "The circle is aligned to the plane of the map."
      },
      viewport: {
        doc: "The circle is aligned to the plane of the viewport."
      }
    },
    "default": "viewport",
    doc: "Orientation of circle when map is pitched.",
    "sdk-support": {
      "basic functionality": {
        js: "0.39.0",
        android: "5.2.0",
        ios: "3.7.0",
        macos: "0.6.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "circle-stroke-width": {
    type: "number",
    "default": 0,
    minimum: 0,
    transition: true,
    units: "pixels",
    doc: "The width of the circle's stroke. Strokes are placed outside of the `circle-radius`.",
    "sdk-support": {
      "basic functionality": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      },
      "data-driven styling": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-stroke-color": {
    type: "color",
    "default": "#000000",
    doc: "The stroke color of the circle.",
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      },
      "data-driven styling": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "circle-stroke-opacity": {
    type: "number",
    doc: "The opacity of the circle's stroke.",
    "default": 1,
    minimum: 0,
    maximum: 1,
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      },
      "data-driven styling": {
        js: "0.29.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  }
};
var paint_heatmap = {
  "heatmap-radius": {
    type: "number",
    "default": 30,
    minimum: 1,
    transition: true,
    units: "pixels",
    doc: "Radius of influence of one heatmap point in pixels. Increasing the value makes the heatmap smoother, but less detailed. `queryRenderedFeatures` on heatmap layers will return points within this radius.",
    "sdk-support": {
      "basic functionality": {
        js: "0.41.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      },
      "data-driven styling": {
        js: "0.43.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "heatmap-weight": {
    type: "number",
    "default": 1,
    minimum: 0,
    transition: false,
    doc: "A measure of how much an individual point contributes to the heatmap. A value of 10 would be equivalent to having 10 points of weight 1 in the same spot. Especially useful when combined with clustering.",
    "sdk-support": {
      "basic functionality": {
        js: "0.41.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      },
      "data-driven styling": {
        js: "0.41.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "heatmap-intensity": {
    type: "number",
    "default": 1,
    minimum: 0,
    transition: true,
    doc: "Similar to `heatmap-weight` but controls the intensity of the heatmap globally. Primarily used for adjusting the heatmap based on zoom level.",
    "sdk-support": {
      "basic functionality": {
        js: "0.41.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "heatmap-color": {
    type: "color",
    "default": [
      "interpolate",
      [
        "linear"
      ],
      [
        "heatmap-density"
      ],
      0,
      "rgba(0, 0, 255, 0)",
      0.1,
      "royalblue",
      0.3,
      "cyan",
      0.5,
      "lime",
      0.7,
      "yellow",
      1,
      "red"
    ],
    doc: 'Defines the color of each pixel based on its density value in a heatmap.  Should be an expression that uses `["heatmap-density"]` as input.',
    transition: false,
    "sdk-support": {
      "basic functionality": {
        js: "0.41.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      },
      "data-driven styling": {}
    },
    expression: {
      interpolated: true,
      parameters: [
        "heatmap-density"
      ]
    },
    "property-type": "color-ramp"
  },
  "heatmap-opacity": {
    type: "number",
    doc: "The global opacity at which the heatmap layer will be drawn.",
    "default": 1,
    minimum: 0,
    maximum: 1,
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.41.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
};
var paint_symbol = {
  "icon-opacity": {
    doc: "The opacity at which the icon will be drawn.",
    type: "number",
    "default": 1,
    minimum: 0,
    maximum: 1,
    transition: true,
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-color": {
    type: "color",
    "default": "#000000",
    transition: true,
    doc: "The color of the icon. This can only be used with [SDF icons](/help/troubleshooting/using-recolorable-images-in-mapbox-maps/).",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-halo-color": {
    type: "color",
    "default": "rgba(0, 0, 0, 0)",
    transition: true,
    doc: "The color of the icon's halo. Icon halos can only be used with [SDF icons](/help/troubleshooting/using-recolorable-images-in-mapbox-maps/).",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-halo-width": {
    type: "number",
    "default": 0,
    minimum: 0,
    transition: true,
    units: "pixels",
    doc: "Distance of halo to the icon outline.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-halo-blur": {
    type: "number",
    "default": 0,
    minimum: 0,
    transition: true,
    units: "pixels",
    doc: "Fade out the halo towards the outside.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "icon-translate": {
    type: "array",
    value: "number",
    length: 2,
    "default": [
      0,
      0
    ],
    transition: true,
    units: "pixels",
    doc: "Distance that the icon's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
    requires: [
      "icon-image"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "icon-translate-anchor": {
    type: "enum",
    values: {
      map: {
        doc: "Icons are translated relative to the map."
      },
      viewport: {
        doc: "Icons are translated relative to the viewport."
      }
    },
    doc: "Controls the frame of reference for `icon-translate`.",
    "default": "map",
    requires: [
      "icon-image",
      "icon-translate"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-opacity": {
    type: "number",
    doc: "The opacity at which the text will be drawn.",
    "default": 1,
    minimum: 0,
    maximum: 1,
    transition: true,
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-color": {
    type: "color",
    doc: "The color with which the text will be drawn.",
    "default": "#000000",
    transition: true,
    overridable: true,
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-halo-color": {
    type: "color",
    "default": "rgba(0, 0, 0, 0)",
    transition: true,
    doc: "The color of the text's halo, which helps it stand out from backgrounds.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-halo-width": {
    type: "number",
    "default": 0,
    minimum: 0,
    transition: true,
    units: "pixels",
    doc: "Distance of halo to the font outline. Max text halo width is 1/4 of the font-size.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-halo-blur": {
    type: "number",
    "default": 0,
    minimum: 0,
    transition: true,
    units: "pixels",
    doc: "The halo's fadeout distance towards the outside.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {
        js: "0.33.0",
        android: "5.0.0",
        ios: "3.5.0",
        macos: "0.4.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom",
        "feature",
        "feature-state"
      ]
    },
    "property-type": "data-driven"
  },
  "text-translate": {
    type: "array",
    value: "number",
    length: 2,
    "default": [
      0,
      0
    ],
    transition: true,
    units: "pixels",
    doc: "Distance that the text's anchor is moved from its original placement. Positive values indicate right and down, while negative values indicate left and up.",
    requires: [
      "text-field"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "text-translate-anchor": {
    type: "enum",
    values: {
      map: {
        doc: "The text is translated relative to the map."
      },
      viewport: {
        doc: "The text is translated relative to the viewport."
      }
    },
    doc: "Controls the frame of reference for `text-translate`.",
    "default": "map",
    requires: [
      "text-field",
      "text-translate"
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
};
var paint_raster = {
  "raster-opacity": {
    type: "number",
    doc: "The opacity at which the image will be drawn.",
    "default": 1,
    minimum: 0,
    maximum: 1,
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-hue-rotate": {
    type: "number",
    "default": 0,
    period: 360,
    transition: true,
    units: "degrees",
    doc: "Rotates hues around the color wheel.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-brightness-min": {
    type: "number",
    doc: "Increase or reduce the brightness of the image. The value is the minimum brightness.",
    "default": 0,
    minimum: 0,
    maximum: 1,
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-brightness-max": {
    type: "number",
    doc: "Increase or reduce the brightness of the image. The value is the maximum brightness.",
    "default": 1,
    minimum: 0,
    maximum: 1,
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-saturation": {
    type: "number",
    doc: "Increase or reduce the saturation of the image.",
    "default": 0,
    minimum: -1,
    maximum: 1,
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-contrast": {
    type: "number",
    doc: "Increase or reduce the contrast of the image.",
    "default": 0,
    minimum: -1,
    maximum: 1,
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-resampling": {
    type: "enum",
    doc: "The resampling/interpolation method to use for overscaling, also known as texture magnification filter",
    values: {
      linear: {
        doc: "(Bi)linear filtering interpolates pixel values using the weighted average of the four closest original source pixels creating a smooth but blurry look when overscaled"
      },
      nearest: {
        doc: "Nearest neighbor filtering interpolates pixel values using the nearest original source pixel creating a sharp but pixelated look when overscaled"
      }
    },
    "default": "linear",
    "sdk-support": {
      "basic functionality": {
        js: "0.47.0",
        android: "6.3.0",
        ios: "4.2.0",
        macos: "0.9.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "raster-fade-duration": {
    type: "number",
    "default": 300,
    minimum: 0,
    transition: false,
    units: "milliseconds",
    doc: "Fade duration when a new tile is added.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
};
var paint_hillshade = {
  "hillshade-illumination-direction": {
    type: "number",
    "default": 335,
    minimum: 0,
    maximum: 359,
    doc: "The direction of the light source used to generate the hillshading with 0 as the top of the viewport if `hillshade-illumination-anchor` is set to `viewport` and due north if `hillshade-illumination-anchor` is set to `map`.",
    transition: false,
    "sdk-support": {
      "basic functionality": {
        js: "0.43.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-illumination-anchor": {
    type: "enum",
    values: {
      map: {
        doc: "The hillshade illumination is relative to the north direction."
      },
      viewport: {
        doc: "The hillshade illumination is relative to the top of the viewport."
      }
    },
    "default": "viewport",
    doc: "Direction of light source when map is rotated.",
    "sdk-support": {
      "basic functionality": {
        js: "0.43.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-exaggeration": {
    type: "number",
    doc: "Intensity of the hillshade",
    "default": 0.5,
    minimum: 0,
    maximum: 1,
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.43.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-shadow-color": {
    type: "color",
    "default": "#000000",
    doc: "The shading color of areas that face away from the light source.",
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.43.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-highlight-color": {
    type: "color",
    "default": "#FFFFFF",
    doc: "The shading color of areas that faces towards the light source.",
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.43.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "hillshade-accent-color": {
    type: "color",
    "default": "#000000",
    doc: "The shading color used to accentuate rugged terrain like sharp cliffs and gorges.",
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.43.0",
        android: "6.0.0",
        ios: "4.0.0",
        macos: "0.7.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
};
var paint_background = {
  "background-color": {
    type: "color",
    "default": "#000000",
    doc: "The color with which the background will be drawn.",
    transition: true,
    requires: [
      {
        "!": "background-pattern"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "background-pattern": {
    type: "resolvedImage",
    transition: true,
    doc: "Name of image in sprite to use for drawing an image background. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      },
      "data-driven styling": {}
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "cross-faded"
  },
  "background-opacity": {
    type: "number",
    "default": 1,
    minimum: 0,
    maximum: 1,
    doc: "The opacity at which the background will be drawn.",
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "0.10.0",
        android: "2.0.1",
        ios: "2.0.0",
        macos: "0.1.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
};
var paint_sky = {
  "sky-type": {
    type: "enum",
    values: {
      gradient: {
        doc: "Renders the sky with a gradient that can be configured with `sky-gradient-radius` and `sky-gradient`."
      },
      atmosphere: {
        doc: "Renders the sky with a simulated atmospheric scattering algorithm, the sun direction can be attached to the light position or explicitly set through `sky-atmosphere-sun`."
      }
    },
    "default": "atmosphere",
    doc: "The type of the sky",
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "sky-atmosphere-sun": {
    type: "array",
    value: "number",
    length: 2,
    units: "degrees",
    minimum: [
      0,
      0
    ],
    maximum: [
      360,
      180
    ],
    transition: false,
    doc: "Position of the sun center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the sun relative to 0\xB0 north, where degrees proceed clockwise. The polar angle indicates the height of the sun, where 0\xB0 is directly above, at zenith, and 90\xB0 at the horizon. When this property is ommitted, the sun center is directly inherited from the light position.",
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    },
    requires: [
      {
        "sky-type": "atmosphere"
      }
    ],
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "sky-atmosphere-sun-intensity": {
    type: "number",
    requires: [
      {
        "sky-type": "atmosphere"
      }
    ],
    "default": 10,
    minimum: 0,
    maximum: 100,
    transition: false,
    doc: "Intensity of the sun as a light source in the atmosphere (on a scale from 0 to a 100). Setting higher values will brighten up the sky.",
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    },
    "property-type": "data-constant"
  },
  "sky-gradient-center": {
    type: "array",
    requires: [
      {
        "sky-type": "gradient"
      }
    ],
    value: "number",
    "default": [
      0,
      0
    ],
    length: 2,
    units: "degrees",
    minimum: [
      0,
      0
    ],
    maximum: [
      360,
      180
    ],
    transition: false,
    doc: "Position of the gradient center [a azimuthal angle, p polar angle]. The azimuthal angle indicates the position of the gradient center relative to 0\xB0 north, where degrees proceed clockwise. The polar angle indicates the height of the gradient center, where 0\xB0 is directly above, at zenith, and 90\xB0 at the horizon.",
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "sky-gradient-radius": {
    type: "number",
    requires: [
      {
        "sky-type": "gradient"
      }
    ],
    "default": 90,
    minimum: 0,
    maximum: 180,
    transition: false,
    doc: "The angular distance (measured in degrees) from `sky-gradient-center` up to which the gradient extends. A value of 180 causes the gradient to wrap around to the opposite direction from `sky-gradient-center`.",
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    },
    expression: {
      interpolated: false,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  },
  "sky-gradient": {
    type: "color",
    "default": [
      "interpolate",
      [
        "linear"
      ],
      [
        "sky-radial-progress"
      ],
      0.8,
      "#87ceeb",
      1,
      "white"
    ],
    doc: "Defines a radial color gradient with which to color the sky. The color values can be interpolated with an expression using `sky-radial-progress`. The range [0, 1] for the interpolant covers a radial distance (in degrees) of [0, `sky-gradient-radius`] centered at the position specified by `sky-gradient-center`.",
    transition: false,
    requires: [
      {
        "sky-type": "gradient"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      },
      "data-driven styling": {}
    },
    expression: {
      interpolated: true,
      parameters: [
        "sky-radial-progress"
      ]
    },
    "property-type": "color-ramp"
  },
  "sky-atmosphere-halo-color": {
    type: "color",
    "default": "white",
    doc: "A color applied to the atmosphere sun halo. The alpha channel describes how strongly the sun halo is represented in an atmosphere sky layer.",
    transition: false,
    requires: [
      {
        "sky-type": "atmosphere"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    },
    "property-type": "data-constant"
  },
  "sky-atmosphere-color": {
    type: "color",
    "default": "white",
    doc: "A color used to tweak the main atmospheric scattering coefficients. Using white applies the default coefficients giving the natural blue color to the atmosphere. This color affects how heavily the corresponding wavelength is represented during scattering. The alpha channel describes the density of the atmosphere, with 1 maximum density and 0 no density.",
    transition: false,
    requires: [
      {
        "sky-type": "atmosphere"
      }
    ],
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    },
    "property-type": "data-constant"
  },
  "sky-opacity": {
    type: "number",
    "default": 1,
    minimum: 0,
    maximum: 1,
    doc: "The opacity of the entire sky layer.",
    transition: true,
    "sdk-support": {
      "basic functionality": {
        js: "2.0.0",
        ios: "10.0.0",
        android: "10.0.0"
      }
    },
    expression: {
      interpolated: true,
      parameters: [
        "zoom"
      ]
    },
    "property-type": "data-constant"
  }
};
var transition = {
  duration: {
    type: "number",
    "default": 300,
    minimum: 0,
    units: "milliseconds",
    doc: "Time allotted for transitions to complete."
  },
  delay: {
    type: "number",
    "default": 0,
    minimum: 0,
    units: "milliseconds",
    doc: "Length of time before a transition begins."
  }
};
var promoteId = {
  "*": {
    type: "string",
    doc: "A name of a feature property to use as ID for feature state."
  }
};
var v8 = {
  $version,
  $root,
  sources,
  source: source2,
  source_vector,
  source_raster,
  source_raster_dem,
  source_geojson,
  source_video,
  source_image,
  layer,
  layout,
  layout_background,
  layout_sky,
  layout_fill,
  layout_circle,
  layout_heatmap,
  "layout_fill-extrusion": {
    visibility: {
      type: "enum",
      values: {
        visible: {
          doc: "The layer is shown."
        },
        none: {
          doc: "The layer is not shown."
        }
      },
      "default": "visible",
      doc: "Whether this layer is displayed.",
      "sdk-support": {
        "basic functionality": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        }
      },
      "property-type": "constant"
    }
  },
  layout_line,
  layout_symbol,
  layout_raster,
  layout_hillshade,
  filter,
  filter_operator,
  geometry_type,
  "function": {
    expression: {
      type: "expression",
      doc: "An expression."
    },
    stops: {
      type: "array",
      doc: "An array of stops.",
      value: "function_stop"
    },
    base: {
      type: "number",
      "default": 1,
      minimum: 0,
      doc: "The exponential base of the interpolation curve. It controls the rate at which the result increases. Higher values make the result increase more towards the high end of the range. With `1` the stops are interpolated linearly."
    },
    property: {
      type: "string",
      doc: "The name of a feature property to use as the function input.",
      "default": "$zoom"
    },
    type: {
      type: "enum",
      values: {
        identity: {
          doc: "Return the input value as the output value."
        },
        exponential: {
          doc: "Generate an output by interpolating between stops just less than and just greater than the function input."
        },
        interval: {
          doc: "Return the output value of the stop just less than the function input."
        },
        categorical: {
          doc: "Return the output value of the stop equal to the function input."
        }
      },
      doc: "The interpolation strategy to use in function evaluation.",
      "default": "exponential"
    },
    colorSpace: {
      type: "enum",
      values: {
        rgb: {
          doc: "Use the RGB color space to interpolate color values"
        },
        lab: {
          doc: "Use the LAB color space to interpolate color values."
        },
        hcl: {
          doc: "Use the HCL color space to interpolate color values, interpolating the Hue, Chroma, and Luminance channels individually."
        }
      },
      doc: "The color space in which colors interpolated. Interpolating colors in perceptual color spaces like LAB and HCL tend to produce color ramps that look more consistent and produce colors that can be differentiated more easily than those interpolated in RGB space.",
      "default": "rgb"
    },
    "default": {
      type: "*",
      required: false,
      doc: "A value to serve as a fallback function result when a value isn't otherwise available. It is used in the following circumstances:\n* In categorical functions, when the feature value does not match any of the stop domain values.\n* In property and zoom-and-property functions, when a feature does not contain a value for the specified property.\n* In identity functions, when the feature value is not valid for the style property (for example, if the function is being used for a `circle-color` property but the feature property value is not a string or not a valid color).\n* In interval or exponential property and zoom-and-property functions, when the feature value is not numeric.\nIf no default is provided, the style property's default is used in these circumstances."
    }
  },
  function_stop,
  expression,
  expression_name,
  fog,
  light,
  terrain,
  paint,
  paint_fill,
  "paint_fill-extrusion": {
    "fill-extrusion-opacity": {
      type: "number",
      "default": 1,
      minimum: 0,
      maximum: 1,
      doc: "The opacity of the entire fill extrusion layer. This is rendered on a per-layer, not per-feature, basis, and data-driven styling is not available.",
      transition: true,
      "sdk-support": {
        "basic functionality": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        }
      },
      expression: {
        interpolated: true,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-color": {
      type: "color",
      "default": "#000000",
      doc: "The base color of the extruded fill. The extrusion's surfaces will be shaded differently based on this color in combination with the root `light` settings. If this color is specified as `rgba` with an alpha component, the alpha component will be ignored; use `fill-extrusion-opacity` to set layer opacity.",
      transition: true,
      requires: [
        {
          "!": "fill-extrusion-pattern"
        }
      ],
      "sdk-support": {
        "basic functionality": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        },
        "data-driven styling": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        }
      },
      expression: {
        interpolated: true,
        parameters: [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-translate": {
      type: "array",
      value: "number",
      length: 2,
      "default": [
        0,
        0
      ],
      transition: true,
      units: "pixels",
      doc: "The geometry's offset. Values are [x, y] where negatives indicate left and up (on the flat plane), respectively.",
      "sdk-support": {
        "basic functionality": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        }
      },
      expression: {
        interpolated: true,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-translate-anchor": {
      type: "enum",
      values: {
        map: {
          doc: "The fill extrusion is translated relative to the map."
        },
        viewport: {
          doc: "The fill extrusion is translated relative to the viewport."
        }
      },
      doc: "Controls the frame of reference for `fill-extrusion-translate`.",
      "default": "map",
      requires: [
        "fill-extrusion-translate"
      ],
      "sdk-support": {
        "basic functionality": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        }
      },
      expression: {
        interpolated: false,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    },
    "fill-extrusion-pattern": {
      type: "resolvedImage",
      transition: true,
      doc: "Name of image in sprite to use for drawing images on extruded fills. For seamless patterns, image width and height must be a factor of two (2, 4, 8, ..., 512). Note that zoom-dependent expressions will be evaluated only at integer zoom levels.",
      "sdk-support": {
        "basic functionality": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        },
        "data-driven styling": {
          js: "0.49.0",
          android: "6.5.0",
          macos: "0.11.0",
          ios: "4.4.0"
        }
      },
      expression: {
        interpolated: false,
        parameters: [
          "zoom",
          "feature"
        ]
      },
      "property-type": "cross-faded-data-driven"
    },
    "fill-extrusion-height": {
      type: "number",
      "default": 0,
      minimum: 0,
      units: "meters",
      doc: "The height with which to extrude this layer.",
      transition: true,
      "sdk-support": {
        "basic functionality": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        },
        "data-driven styling": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        }
      },
      expression: {
        interpolated: true,
        parameters: [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-base": {
      type: "number",
      "default": 0,
      minimum: 0,
      units: "meters",
      doc: "The height with which to extrude the base of this layer. Must be less than or equal to `fill-extrusion-height`.",
      transition: true,
      requires: [
        "fill-extrusion-height"
      ],
      "sdk-support": {
        "basic functionality": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        },
        "data-driven styling": {
          js: "0.27.0",
          android: "5.1.0",
          ios: "3.6.0",
          macos: "0.5.0"
        }
      },
      expression: {
        interpolated: true,
        parameters: [
          "zoom",
          "feature",
          "feature-state"
        ]
      },
      "property-type": "data-driven"
    },
    "fill-extrusion-vertical-gradient": {
      type: "boolean",
      "default": true,
      doc: "Whether to apply a vertical gradient to the sides of a fill-extrusion layer. If true, sides will be shaded slightly darker farther down.",
      transition: false,
      "sdk-support": {
        "basic functionality": {
          js: "0.50.0",
          android: "7.0.0",
          ios: "4.7.0",
          macos: "0.13.0"
        }
      },
      expression: {
        interpolated: false,
        parameters: [
          "zoom"
        ]
      },
      "property-type": "data-constant"
    }
  },
  paint_line,
  paint_circle,
  paint_heatmap,
  paint_symbol,
  paint_raster,
  paint_hillshade,
  paint_background,
  paint_sky,
  transition,
  "property-type": {
    "data-driven": {
      type: "property-type",
      doc: "Property is interpolable and can be represented using a property expression."
    },
    "cross-faded": {
      type: "property-type",
      doc: "Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms."
    },
    "cross-faded-data-driven": {
      type: "property-type",
      doc: "Property is non-interpolable; rather, its values will be cross-faded to smoothly transition between integer zooms. It can be represented using a property expression."
    },
    "color-ramp": {
      type: "property-type",
      doc: "Property should be specified using a color ramp from which the output color can be sampled based on a property calculation."
    },
    "data-constant": {
      type: "property-type",
      doc: "Property is interpolable but cannot be represented using a property expression."
    },
    constant: {
      type: "property-type",
      doc: "Property is constant across all zoom levels and property values."
    }
  },
  promoteId
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function createCommonjsModule(fn) {
  var module = { exports: {} };
  return fn(module, module.exports), module.exports;
}
function commonjsRequire(target) {
  throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
}
var punycode = createCommonjsModule(function(module, exports) {
  (function(root) {
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
      root = freeGlobal;
    }
    var punycode2, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
      "overflow": "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
    function error2(type) {
      throw RangeError(errors[type]);
    }
    function map(array2, fn) {
      var length = array2.length;
      var result = [];
      while (length--) {
        result[length] = fn(array2[length]);
      }
      return result;
    }
    function mapDomain(string, fn) {
      var parts = string.split("@");
      var result = "";
      if (parts.length > 1) {
        result = parts[0] + "@";
        string = parts[1];
      }
      string = string.replace(regexSeparators, ".");
      var labels = string.split(".");
      var encoded = map(labels, fn).join(".");
      return result + encoded;
    }
    function ucs2decode(string) {
      var output = [], counter = 0, length = string.length, value, extra;
      while (counter < length) {
        value = string.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
          extra = string.charCodeAt(counter++);
          if ((extra & 64512) == 56320) {
            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }
    function ucs2encode(array2) {
      return map(array2, function(value) {
        var output = "";
        if (value > 65535) {
          value -= 65536;
          output += stringFromCharCode(value >>> 10 & 1023 | 55296);
          value = 56320 | value & 1023;
        }
        output += stringFromCharCode(value);
        return output;
      }).join("");
    }
    function basicToDigit(codePoint) {
      if (codePoint - 48 < 10) {
        return codePoint - 22;
      }
      if (codePoint - 65 < 26) {
        return codePoint - 65;
      }
      if (codePoint - 97 < 26) {
        return codePoint - 97;
      }
      return base;
    }
    function digitToBasic(digit, flag) {
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    function adapt(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (; delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    function decode2(input) {
      var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
      basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }
      for (j = 0; j < basic; ++j) {
        if (input.charCodeAt(j) >= 128) {
          error2("not-basic");
        }
        output.push(input.charCodeAt(j));
      }
      for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
        for (oldi = i, w = 1, k = base; ; k += base) {
          if (index >= inputLength) {
            error2("invalid-input");
          }
          digit = basicToDigit(input.charCodeAt(index++));
          if (digit >= base || digit > floor((maxInt - i) / w)) {
            error2("overflow");
          }
          i += digit * w;
          t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (digit < t) {
            break;
          }
          baseMinusT = base - t;
          if (w > floor(maxInt / baseMinusT)) {
            error2("overflow");
          }
          w *= baseMinusT;
        }
        out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);
        if (floor(i / out) > maxInt - n) {
          error2("overflow");
        }
        n += floor(i / out);
        i %= out;
        output.splice(i++, 0, n);
      }
      return ucs2encode(output);
    }
    function encode2(input) {
      var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
      input = ucs2decode(input);
      inputLength = input.length;
      n = initialN;
      delta = 0;
      bias = initialBias;
      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue < 128) {
          output.push(stringFromCharCode(currentValue));
        }
      }
      handledCPCount = basicLength = output.length;
      if (basicLength) {
        output.push(delimiter);
      }
      while (handledCPCount < inputLength) {
        for (m = maxInt, j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        }
        handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error2("overflow");
        }
        delta += (m - n) * handledCPCountPlusOne;
        n = m;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < n && ++delta > maxInt) {
            error2("overflow");
          }
          if (currentValue == n) {
            for (q = delta, k = base; ; k += base) {
              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (q < t) {
                break;
              }
              qMinusT = q - t;
              baseMinusT = base - t;
              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
              q = floor(qMinusT / baseMinusT);
            }
            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
        ++delta;
        ++n;
      }
      return output.join("");
    }
    function toUnicode(input) {
      return mapDomain(input, function(string) {
        return regexPunycode.test(string) ? decode2(string.slice(4).toLowerCase()) : string;
      });
    }
    function toASCII(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ? "xn--" + encode2(string) : string;
      });
    }
    punycode2 = {
      "version": "1.3.2",
      "ucs2": {
        "decode": ucs2decode,
        "encode": ucs2encode
      },
      "decode": decode2,
      "encode": encode2,
      "toASCII": toASCII,
      "toUnicode": toUnicode
    };
    if (freeExports && freeModule) {
      if (module.exports == freeExports) {
        freeModule.exports = punycode2;
      } else {
        for (key in punycode2) {
          punycode2.hasOwnProperty(key) && (freeExports[key] = punycode2[key]);
        }
      }
    } else {
      root.punycode = punycode2;
    }
  })(commonjsGlobal);
});
var util = {
  isString: function(arg) {
    return typeof arg === "string";
  },
  isObject: function(arg) {
    return typeof arg === "object" && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
var decode = function(qs, sep, eq2, options) {
  sep = sep || "&";
  eq2 = eq2 || "=";
  var obj = {};
  if (typeof qs !== "string" || qs.length === 0) {
    return obj;
  }
  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1e3;
  if (options && typeof options.maxKeys === "number") {
    maxKeys = options.maxKeys;
  }
  var len = qs.length;
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }
  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq2), kstr, vstr, k, v;
    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = "";
    }
    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);
    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (Array.isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }
  return obj;
};
var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case "string":
      return v;
    case "boolean":
      return v ? "true" : "false";
    case "number":
      return isFinite(v) ? v : "";
    default:
      return "";
  }
};
var encode = function(obj, sep, eq2, name) {
  sep = sep || "&";
  eq2 = eq2 || "=";
  if (obj === null) {
    obj = void 0;
  }
  if (typeof obj === "object") {
    return Object.keys(obj).map(function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq2;
      if (Array.isArray(obj[k])) {
        return obj[k].map(function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }
  if (!name)
    return "";
  return encodeURIComponent(stringifyPrimitive(name)) + eq2 + encodeURIComponent(stringifyPrimitive(obj));
};
var querystring = createCommonjsModule(function(module, exports) {
  exports.decode = exports.parse = decode;
  exports.encode = exports.stringify = encode;
});
function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}
var protocolPattern = /^([a-z0-9.+-]+:)/i;
var portPattern = /:[0-9]*$/;
var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
var delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
var autoEscape = ["'"].concat(unwise);
var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
var hostEndingChars = ["/", "?", "#"];
var hostnameMaxLen = 255;
var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
var unsafeProtocol = {
  "javascript": true,
  "javascript:": true
};
var hostlessProtocol = {
  "javascript": true,
  "javascript:": true
};
var slashedProtocol = {
  "http": true,
  "https": true,
  "ftp": true,
  "gopher": true,
  "file": true,
  "http:": true,
  "https:": true,
  "ftp:": true,
  "gopher:": true,
  "file:": true
};
function urlParse(url2, parseQueryString, slashesDenoteHost) {
  if (url2 && util.isObject(url2) && url2 instanceof Url)
    return url2;
  var u = new Url();
  u.parse(url2, parseQueryString, slashesDenoteHost);
  return u;
}
Url.prototype.parse = function(url2, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url2)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url2);
  }
  var queryIndex = url2.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url2.indexOf("#") ? "?" : "#", uSplit = url2.split(splitter), slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, "/");
  url2 = uSplit.join(splitter);
  var rest = url2;
  rest = rest.trim();
  if (!slashesDenoteHost && url2.split("#").length === 1) {
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = "";
        this.query = {};
      }
      return this;
    }
  }
  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === "//";
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }
  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    var auth, atSign;
    if (hostEnd === -1) {
      atSign = rest.lastIndexOf("@");
    } else {
      atSign = rest.lastIndexOf("@", hostEnd);
    }
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    if (hostEnd === -1)
      hostEnd = rest.length;
    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);
    this.parseHost();
    this.hostname = this.hostname || "";
    var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part)
          continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = "";
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              newpart += "x";
            } else {
              newpart += part[j];
            }
          }
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = "/" + notHost.join(".") + rest;
            }
            this.hostname = validParts.join(".");
            break;
          }
        }
      }
    }
    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = "";
    } else {
      this.hostname = this.hostname.toLowerCase();
    }
    if (!ipv6Hostname) {
      this.hostname = punycode.toASCII(this.hostname);
    }
    var p = this.port ? ":" + this.port : "";
    var h = this.hostname || "";
    this.host = h + p;
    this.href += this.host;
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== "/") {
        rest = "/" + rest;
      }
    }
  }
  if (!unsafeProtocol[lowerProto]) {
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }
  var hash = rest.indexOf("#");
  if (hash !== -1) {
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf("?");
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    this.search = "";
    this.query = {};
  }
  if (rest)
    this.pathname = rest;
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = "/";
  }
  if (this.pathname || this.search) {
    var p = this.pathname || "";
    var s = this.search || "";
    this.path = p + s;
  }
  this.href = this.format();
  return this;
};
Url.prototype.format = function() {
  var auth = this.auth || "";
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ":");
    auth += "@";
  }
  var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
    if (this.port) {
      host += ":" + this.port;
    }
  }
  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }
  var search = this.search || query && "?" + query || "";
  if (protocol && protocol.substr(-1) !== ":")
    protocol += ":";
  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = "//" + (host || "");
    if (pathname && pathname.charAt(0) !== "/")
      pathname = "/" + pathname;
  } else if (!host) {
    host = "";
  }
  if (hash && hash.charAt(0) !== "#")
    hash = "#" + hash;
  if (search && search.charAt(0) !== "?")
    search = "?" + search;
  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace("#", "%23");
  return protocol + host + pathname + search + hash;
};
Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};
Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }
  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }
  result.hash = relative.hash;
  if (relative.href === "") {
    result.href = result.format();
    return result;
  }
  if (relative.slashes && !relative.protocol) {
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== "protocol")
        result[rkey] = relative[rkey];
    }
    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = "/";
    }
    result.href = result.format();
    return result;
  }
  if (relative.protocol && relative.protocol !== result.protocol) {
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }
    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || "").split("/");
      while (relPath.length && !(relative.host = relPath.shift()))
        ;
      if (!relative.host)
        relative.host = "";
      if (!relative.hostname)
        relative.hostname = "";
      if (relPath[0] !== "")
        relPath.unshift("");
      if (relPath.length < 2)
        relPath.unshift("");
      result.pathname = relPath.join("/");
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || "";
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    if (result.pathname || result.search) {
      var p = result.pathname || "";
      var s = result.search || "";
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }
  var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
  if (psychotic) {
    result.hostname = "";
    result.port = null;
    if (result.host) {
      if (srcPath[0] === "")
        srcPath[0] = result.host;
      else
        srcPath.unshift(result.host);
    }
    result.host = "";
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === "")
          relPath[0] = relative.host;
        else
          relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
  }
  if (isRelAbs) {
    result.host = relative.host || relative.host === "" ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
  } else if (relPath.length) {
    if (!srcPath)
      srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
    }
    result.href = result.format();
    return result;
  }
  if (!srcPath.length) {
    result.pathname = null;
    if (result.search) {
      result.path = "/" + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === ".") {
      srcPath.splice(i, 1);
    } else if (last === "..") {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift("..");
    }
  }
  if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
    srcPath.unshift("");
  }
  if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
    srcPath.push("");
  }
  var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
    var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }
  mustEndAbs = mustEndAbs || result.host && srcPath.length;
  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift("");
  }
  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join("/");
  }
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};
Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ":") {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host)
    this.hostname = host;
};
function extend2(output, ...inputs) {
  for (const input of inputs) {
    for (const k in input) {
      output[k] = input[k];
    }
  }
  return output;
}
var ParsingError = class extends Error {
  constructor(key, message) {
    super(message);
    this.message = message;
    this.key = key;
  }
};
var Scope = class {
  constructor(parent, bindings = []) {
    this.parent = parent;
    this.bindings = {};
    for (const [name, expression2] of bindings) {
      this.bindings[name] = expression2;
    }
  }
  concat(bindings) {
    return new Scope(this, bindings);
  }
  get(name) {
    if (this.bindings[name]) {
      return this.bindings[name];
    }
    if (this.parent) {
      return this.parent.get(name);
    }
    throw new Error(`${name} not found in scope.`);
  }
  has(name) {
    if (this.bindings[name])
      return true;
    return this.parent ? this.parent.has(name) : false;
  }
};
var NullType = { kind: "null" };
var NumberType = { kind: "number" };
var StringType = { kind: "string" };
var BooleanType = { kind: "boolean" };
var ColorType = { kind: "color" };
var ObjectType = { kind: "object" };
var ValueType = { kind: "value" };
var ErrorType = { kind: "error" };
var CollatorType = { kind: "collator" };
var FormattedType = { kind: "formatted" };
var ResolvedImageType = { kind: "resolvedImage" };
function array(itemType, N) {
  return {
    kind: "array",
    itemType,
    N
  };
}
function toString(type) {
  if (type.kind === "array") {
    const itemType = toString(type.itemType);
    return typeof type.N === "number" ? `array<${itemType}, ${type.N}>` : type.itemType.kind === "value" ? "array" : `array<${itemType}>`;
  } else {
    return type.kind;
  }
}
var valueMemberTypes = [
  NullType,
  NumberType,
  StringType,
  BooleanType,
  ColorType,
  FormattedType,
  ObjectType,
  array(ValueType),
  ResolvedImageType
];
function checkSubtype(expected, t) {
  if (t.kind === "error") {
    return null;
  } else if (expected.kind === "array") {
    if (t.kind === "array" && (t.N === 0 && t.itemType.kind === "value" || !checkSubtype(expected.itemType, t.itemType)) && (typeof expected.N !== "number" || expected.N === t.N)) {
      return null;
    }
  } else if (expected.kind === t.kind) {
    return null;
  } else if (expected.kind === "value") {
    for (const memberType of valueMemberTypes) {
      if (!checkSubtype(memberType, t)) {
        return null;
      }
    }
  }
  return `Expected ${toString(expected)} but found ${toString(t)} instead.`;
}
function isValidType(provided, allowedTypes) {
  return allowedTypes.some((t) => t.kind === provided.kind);
}
function isValidNativeType(provided, allowedTypes) {
  return allowedTypes.some((t) => {
    if (t === "null") {
      return provided === null;
    } else if (t === "array") {
      return Array.isArray(provided);
    } else if (t === "object") {
      return provided && !Array.isArray(provided) && typeof provided === "object";
    } else {
      return t === typeof provided;
    }
  });
}
var csscolorparser = createCommonjsModule(function(module, exports) {
  var kCSSColorTable = {
    "transparent": [0, 0, 0, 0],
    "aliceblue": [240, 248, 255, 1],
    "antiquewhite": [250, 235, 215, 1],
    "aqua": [0, 255, 255, 1],
    "aquamarine": [127, 255, 212, 1],
    "azure": [240, 255, 255, 1],
    "beige": [245, 245, 220, 1],
    "bisque": [255, 228, 196, 1],
    "black": [0, 0, 0, 1],
    "blanchedalmond": [255, 235, 205, 1],
    "blue": [0, 0, 255, 1],
    "blueviolet": [138, 43, 226, 1],
    "brown": [165, 42, 42, 1],
    "burlywood": [222, 184, 135, 1],
    "cadetblue": [95, 158, 160, 1],
    "chartreuse": [127, 255, 0, 1],
    "chocolate": [210, 105, 30, 1],
    "coral": [255, 127, 80, 1],
    "cornflowerblue": [100, 149, 237, 1],
    "cornsilk": [255, 248, 220, 1],
    "crimson": [220, 20, 60, 1],
    "cyan": [0, 255, 255, 1],
    "darkblue": [0, 0, 139, 1],
    "darkcyan": [0, 139, 139, 1],
    "darkgoldenrod": [184, 134, 11, 1],
    "darkgray": [169, 169, 169, 1],
    "darkgreen": [0, 100, 0, 1],
    "darkgrey": [169, 169, 169, 1],
    "darkkhaki": [189, 183, 107, 1],
    "darkmagenta": [139, 0, 139, 1],
    "darkolivegreen": [85, 107, 47, 1],
    "darkorange": [255, 140, 0, 1],
    "darkorchid": [153, 50, 204, 1],
    "darkred": [139, 0, 0, 1],
    "darksalmon": [233, 150, 122, 1],
    "darkseagreen": [143, 188, 143, 1],
    "darkslateblue": [72, 61, 139, 1],
    "darkslategray": [47, 79, 79, 1],
    "darkslategrey": [47, 79, 79, 1],
    "darkturquoise": [0, 206, 209, 1],
    "darkviolet": [148, 0, 211, 1],
    "deeppink": [255, 20, 147, 1],
    "deepskyblue": [0, 191, 255, 1],
    "dimgray": [105, 105, 105, 1],
    "dimgrey": [105, 105, 105, 1],
    "dodgerblue": [30, 144, 255, 1],
    "firebrick": [178, 34, 34, 1],
    "floralwhite": [255, 250, 240, 1],
    "forestgreen": [34, 139, 34, 1],
    "fuchsia": [255, 0, 255, 1],
    "gainsboro": [220, 220, 220, 1],
    "ghostwhite": [248, 248, 255, 1],
    "gold": [255, 215, 0, 1],
    "goldenrod": [218, 165, 32, 1],
    "gray": [128, 128, 128, 1],
    "green": [0, 128, 0, 1],
    "greenyellow": [173, 255, 47, 1],
    "grey": [128, 128, 128, 1],
    "honeydew": [240, 255, 240, 1],
    "hotpink": [255, 105, 180, 1],
    "indianred": [205, 92, 92, 1],
    "indigo": [75, 0, 130, 1],
    "ivory": [255, 255, 240, 1],
    "khaki": [240, 230, 140, 1],
    "lavender": [230, 230, 250, 1],
    "lavenderblush": [255, 240, 245, 1],
    "lawngreen": [124, 252, 0, 1],
    "lemonchiffon": [255, 250, 205, 1],
    "lightblue": [173, 216, 230, 1],
    "lightcoral": [240, 128, 128, 1],
    "lightcyan": [224, 255, 255, 1],
    "lightgoldenrodyellow": [250, 250, 210, 1],
    "lightgray": [211, 211, 211, 1],
    "lightgreen": [144, 238, 144, 1],
    "lightgrey": [211, 211, 211, 1],
    "lightpink": [255, 182, 193, 1],
    "lightsalmon": [255, 160, 122, 1],
    "lightseagreen": [32, 178, 170, 1],
    "lightskyblue": [135, 206, 250, 1],
    "lightslategray": [119, 136, 153, 1],
    "lightslategrey": [119, 136, 153, 1],
    "lightsteelblue": [176, 196, 222, 1],
    "lightyellow": [255, 255, 224, 1],
    "lime": [0, 255, 0, 1],
    "limegreen": [50, 205, 50, 1],
    "linen": [250, 240, 230, 1],
    "magenta": [255, 0, 255, 1],
    "maroon": [128, 0, 0, 1],
    "mediumaquamarine": [102, 205, 170, 1],
    "mediumblue": [0, 0, 205, 1],
    "mediumorchid": [186, 85, 211, 1],
    "mediumpurple": [147, 112, 219, 1],
    "mediumseagreen": [60, 179, 113, 1],
    "mediumslateblue": [123, 104, 238, 1],
    "mediumspringgreen": [0, 250, 154, 1],
    "mediumturquoise": [72, 209, 204, 1],
    "mediumvioletred": [199, 21, 133, 1],
    "midnightblue": [25, 25, 112, 1],
    "mintcream": [245, 255, 250, 1],
    "mistyrose": [255, 228, 225, 1],
    "moccasin": [255, 228, 181, 1],
    "navajowhite": [255, 222, 173, 1],
    "navy": [0, 0, 128, 1],
    "oldlace": [253, 245, 230, 1],
    "olive": [128, 128, 0, 1],
    "olivedrab": [107, 142, 35, 1],
    "orange": [255, 165, 0, 1],
    "orangered": [255, 69, 0, 1],
    "orchid": [218, 112, 214, 1],
    "palegoldenrod": [238, 232, 170, 1],
    "palegreen": [152, 251, 152, 1],
    "paleturquoise": [175, 238, 238, 1],
    "palevioletred": [219, 112, 147, 1],
    "papayawhip": [255, 239, 213, 1],
    "peachpuff": [255, 218, 185, 1],
    "peru": [205, 133, 63, 1],
    "pink": [255, 192, 203, 1],
    "plum": [221, 160, 221, 1],
    "powderblue": [176, 224, 230, 1],
    "purple": [128, 0, 128, 1],
    "rebeccapurple": [102, 51, 153, 1],
    "red": [255, 0, 0, 1],
    "rosybrown": [188, 143, 143, 1],
    "royalblue": [65, 105, 225, 1],
    "saddlebrown": [139, 69, 19, 1],
    "salmon": [250, 128, 114, 1],
    "sandybrown": [244, 164, 96, 1],
    "seagreen": [46, 139, 87, 1],
    "seashell": [255, 245, 238, 1],
    "sienna": [160, 82, 45, 1],
    "silver": [192, 192, 192, 1],
    "skyblue": [135, 206, 235, 1],
    "slateblue": [106, 90, 205, 1],
    "slategray": [112, 128, 144, 1],
    "slategrey": [112, 128, 144, 1],
    "snow": [255, 250, 250, 1],
    "springgreen": [0, 255, 127, 1],
    "steelblue": [70, 130, 180, 1],
    "tan": [210, 180, 140, 1],
    "teal": [0, 128, 128, 1],
    "thistle": [216, 191, 216, 1],
    "tomato": [255, 99, 71, 1],
    "turquoise": [64, 224, 208, 1],
    "violet": [238, 130, 238, 1],
    "wheat": [245, 222, 179, 1],
    "white": [255, 255, 255, 1],
    "whitesmoke": [245, 245, 245, 1],
    "yellow": [255, 255, 0, 1],
    "yellowgreen": [154, 205, 50, 1]
  };
  function clamp_css_byte(i) {
    i = Math.round(i);
    return i < 0 ? 0 : i > 255 ? 255 : i;
  }
  function clamp_css_float(f) {
    return f < 0 ? 0 : f > 1 ? 1 : f;
  }
  function parse_css_int(str) {
    if (str[str.length - 1] === "%")
      return clamp_css_byte(parseFloat(str) / 100 * 255);
    return clamp_css_byte(parseInt(str));
  }
  function parse_css_float(str) {
    if (str[str.length - 1] === "%")
      return clamp_css_float(parseFloat(str) / 100);
    return clamp_css_float(parseFloat(str));
  }
  function css_hue_to_rgb(m1, m2, h) {
    if (h < 0)
      h += 1;
    else if (h > 1)
      h -= 1;
    if (h * 6 < 1)
      return m1 + (m2 - m1) * h * 6;
    if (h * 2 < 1)
      return m2;
    if (h * 3 < 2)
      return m1 + (m2 - m1) * (2 / 3 - h) * 6;
    return m1;
  }
  function parseCSSColor(css_str) {
    var str = css_str.replace(/ /g, "").toLowerCase();
    if (str in kCSSColorTable)
      return kCSSColorTable[str].slice();
    if (str[0] === "#") {
      if (str.length === 4) {
        var iv = parseInt(str.substr(1), 16);
        if (!(iv >= 0 && iv <= 4095))
          return null;
        return [
          (iv & 3840) >> 4 | (iv & 3840) >> 8,
          iv & 240 | (iv & 240) >> 4,
          iv & 15 | (iv & 15) << 4,
          1
        ];
      } else if (str.length === 7) {
        var iv = parseInt(str.substr(1), 16);
        if (!(iv >= 0 && iv <= 16777215))
          return null;
        return [
          (iv & 16711680) >> 16,
          (iv & 65280) >> 8,
          iv & 255,
          1
        ];
      }
      return null;
    }
    var op = str.indexOf("("), ep = str.indexOf(")");
    if (op !== -1 && ep + 1 === str.length) {
      var fname = str.substr(0, op);
      var params = str.substr(op + 1, ep - (op + 1)).split(",");
      var alpha = 1;
      switch (fname) {
        case "rgba":
          if (params.length !== 4)
            return null;
          alpha = parse_css_float(params.pop());
        case "rgb":
          if (params.length !== 3)
            return null;
          return [
            parse_css_int(params[0]),
            parse_css_int(params[1]),
            parse_css_int(params[2]),
            alpha
          ];
        case "hsla":
          if (params.length !== 4)
            return null;
          alpha = parse_css_float(params.pop());
        case "hsl":
          if (params.length !== 3)
            return null;
          var h = (parseFloat(params[0]) % 360 + 360) % 360 / 360;
          var s = parse_css_float(params[1]);
          var l = parse_css_float(params[2]);
          var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
          var m1 = l * 2 - m2;
          return [
            clamp_css_byte(css_hue_to_rgb(m1, m2, h + 1 / 3) * 255),
            clamp_css_byte(css_hue_to_rgb(m1, m2, h) * 255),
            clamp_css_byte(css_hue_to_rgb(m1, m2, h - 1 / 3) * 255),
            alpha
          ];
        default:
          return null;
      }
    }
    return null;
  }
  try {
    exports.parseCSSColor = parseCSSColor;
  } catch (e) {
  }
});
var Color = class {
  constructor(r, g, b, a = 1) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
  }
  static parse(input) {
    if (!input) {
      return void 0;
    }
    if (input instanceof Color) {
      return input;
    }
    if (typeof input !== "string") {
      return void 0;
    }
    const rgba2 = csscolorparser.parseCSSColor(input);
    if (!rgba2) {
      return void 0;
    }
    return new Color(rgba2[0] / 255 * rgba2[3], rgba2[1] / 255 * rgba2[3], rgba2[2] / 255 * rgba2[3], rgba2[3]);
  }
  toString() {
    const [r, g, b, a] = this.toArray();
    return `rgba(${Math.round(r)},${Math.round(g)},${Math.round(b)},${a})`;
  }
  toArray() {
    const { r, g, b, a } = this;
    return a === 0 ? [
      0,
      0,
      0,
      0
    ] : [
      r * 255 / a,
      g * 255 / a,
      b * 255 / a,
      a
    ];
  }
};
Color.black = new Color(0, 0, 0, 1);
Color.white = new Color(1, 1, 1, 1);
Color.transparent = new Color(0, 0, 0, 0);
Color.red = new Color(1, 0, 0, 1);
Color.blue = new Color(0, 0, 1, 1);
var Collator = class {
  constructor(caseSensitive, diacriticSensitive, locale) {
    if (caseSensitive)
      this.sensitivity = diacriticSensitive ? "variant" : "case";
    else
      this.sensitivity = diacriticSensitive ? "accent" : "base";
    this.locale = locale;
    this.collator = new Intl.Collator(this.locale ? this.locale : [], {
      sensitivity: this.sensitivity,
      usage: "search"
    });
  }
  compare(lhs, rhs) {
    return this.collator.compare(lhs, rhs);
  }
  resolvedLocale() {
    return new Intl.Collator(this.locale ? this.locale : []).resolvedOptions().locale;
  }
};
var FormattedSection = class {
  constructor(text, image, scale2, fontStack, textColor) {
    this.text = text;
    this.image = image;
    this.scale = scale2;
    this.fontStack = fontStack;
    this.textColor = textColor;
  }
};
var Formatted = class {
  constructor(sections) {
    this.sections = sections;
  }
  static fromString(unformatted) {
    return new Formatted([new FormattedSection(unformatted, null, null, null, null)]);
  }
  isEmpty() {
    if (this.sections.length === 0)
      return true;
    return !this.sections.some((section) => section.text.length !== 0 || section.image && section.image.name.length !== 0);
  }
  static factory(text) {
    if (text instanceof Formatted) {
      return text;
    } else {
      return Formatted.fromString(text);
    }
  }
  toString() {
    if (this.sections.length === 0)
      return "";
    return this.sections.map((section) => section.text).join("");
  }
  serialize() {
    const serialized = ["format"];
    for (const section of this.sections) {
      if (section.image) {
        serialized.push([
          "image",
          section.image.name
        ]);
        continue;
      }
      serialized.push(section.text);
      const options = {};
      if (section.fontStack) {
        options["text-font"] = [
          "literal",
          section.fontStack.split(",")
        ];
      }
      if (section.scale) {
        options["font-scale"] = section.scale;
      }
      if (section.textColor) {
        options["text-color"] = ["rgba"].concat(section.textColor.toArray());
      }
      serialized.push(options);
    }
    return serialized;
  }
};
var ResolvedImage = class {
  constructor(options) {
    this.name = options.name;
    this.available = options.available;
  }
  toString() {
    return this.name;
  }
  static fromString(name) {
    if (!name)
      return null;
    return new ResolvedImage({
      name,
      available: false
    });
  }
  serialize() {
    return [
      "image",
      this.name
    ];
  }
};
function validateRGBA(r, g, b, a) {
  if (!(typeof r === "number" && r >= 0 && r <= 255 && typeof g === "number" && g >= 0 && g <= 255 && typeof b === "number" && b >= 0 && b <= 255)) {
    const value = typeof a === "number" ? [
      r,
      g,
      b,
      a
    ] : [
      r,
      g,
      b
    ];
    return `Invalid rgba value [${value.join(", ")}]: 'r', 'g', and 'b' must be between 0 and 255.`;
  }
  if (!(typeof a === "undefined" || typeof a === "number" && a >= 0 && a <= 1)) {
    return `Invalid rgba value [${[
      r,
      g,
      b,
      a
    ].join(", ")}]: 'a' must be between 0 and 1.`;
  }
  return null;
}
function isValue(mixed) {
  if (mixed === null) {
    return true;
  } else if (typeof mixed === "string") {
    return true;
  } else if (typeof mixed === "boolean") {
    return true;
  } else if (typeof mixed === "number") {
    return true;
  } else if (mixed instanceof Color) {
    return true;
  } else if (mixed instanceof Collator) {
    return true;
  } else if (mixed instanceof Formatted) {
    return true;
  } else if (mixed instanceof ResolvedImage) {
    return true;
  } else if (Array.isArray(mixed)) {
    for (const item of mixed) {
      if (!isValue(item)) {
        return false;
      }
    }
    return true;
  } else if (typeof mixed === "object") {
    for (const key in mixed) {
      if (!isValue(mixed[key])) {
        return false;
      }
    }
    return true;
  } else {
    return false;
  }
}
function typeOf(value) {
  if (value === null) {
    return NullType;
  } else if (typeof value === "string") {
    return StringType;
  } else if (typeof value === "boolean") {
    return BooleanType;
  } else if (typeof value === "number") {
    return NumberType;
  } else if (value instanceof Color) {
    return ColorType;
  } else if (value instanceof Collator) {
    return CollatorType;
  } else if (value instanceof Formatted) {
    return FormattedType;
  } else if (value instanceof ResolvedImage) {
    return ResolvedImageType;
  } else if (Array.isArray(value)) {
    const length = value.length;
    let itemType;
    for (const item of value) {
      const t = typeOf(item);
      if (!itemType) {
        itemType = t;
      } else if (itemType === t) {
        continue;
      } else {
        itemType = ValueType;
        break;
      }
    }
    return array(itemType || ValueType, length);
  } else {
    return ObjectType;
  }
}
function toString$1(value) {
  const type = typeof value;
  if (value === null) {
    return "";
  } else if (type === "string" || type === "number" || type === "boolean") {
    return String(value);
  } else if (value instanceof Color || value instanceof Formatted || value instanceof ResolvedImage) {
    return value.toString();
  } else {
    return JSON.stringify(value);
  }
}
var Literal = class {
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
  static parse(args, context) {
    if (args.length !== 2)
      return context.error(`'literal' expression requires exactly one argument, but found ${args.length - 1} instead.`);
    if (!isValue(args[1]))
      return context.error(`invalid value`);
    const value = args[1];
    let type = typeOf(value);
    const expected = context.expectedType;
    if (type.kind === "array" && type.N === 0 && expected && expected.kind === "array" && (typeof expected.N !== "number" || expected.N === 0)) {
      type = expected;
    }
    return new Literal(type, value);
  }
  evaluate() {
    return this.value;
  }
  eachChild() {
  }
  outputDefined() {
    return true;
  }
  serialize() {
    if (this.type.kind === "array" || this.type.kind === "object") {
      return [
        "literal",
        this.value
      ];
    } else if (this.value instanceof Color) {
      return ["rgba"].concat(this.value.toArray());
    } else if (this.value instanceof Formatted) {
      return this.value.serialize();
    } else {
      return this.value;
    }
  }
};
var RuntimeError = class {
  constructor(message) {
    this.name = "ExpressionEvaluationError";
    this.message = message;
  }
  toJSON() {
    return this.message;
  }
};
var types = {
  string: StringType,
  number: NumberType,
  boolean: BooleanType,
  object: ObjectType
};
var Assertion = class {
  constructor(type, args) {
    this.type = type;
    this.args = args;
  }
  static parse(args, context) {
    if (args.length < 2)
      return context.error(`Expected at least one argument.`);
    let i = 1;
    let type;
    const name = args[0];
    if (name === "array") {
      let itemType;
      if (args.length > 2) {
        const type2 = args[1];
        if (typeof type2 !== "string" || !(type2 in types) || type2 === "object")
          return context.error('The item type argument of "array" must be one of string, number, boolean', 1);
        itemType = types[type2];
        i++;
      } else {
        itemType = ValueType;
      }
      let N;
      if (args.length > 3) {
        if (args[2] !== null && (typeof args[2] !== "number" || args[2] < 0 || args[2] !== Math.floor(args[2]))) {
          return context.error('The length argument to "array" must be a positive integer literal', 2);
        }
        N = args[2];
        i++;
      }
      type = array(itemType, N);
    } else {
      type = types[name];
    }
    const parsed = [];
    for (; i < args.length; i++) {
      const input = context.parse(args[i], i, ValueType);
      if (!input)
        return null;
      parsed.push(input);
    }
    return new Assertion(type, parsed);
  }
  evaluate(ctx) {
    for (let i = 0; i < this.args.length; i++) {
      const value = this.args[i].evaluate(ctx);
      const error2 = checkSubtype(this.type, typeOf(value));
      if (!error2) {
        return value;
      } else if (i === this.args.length - 1) {
        throw new RuntimeError(`Expected value to be of type ${toString(this.type)}, but found ${toString(typeOf(value))} instead.`);
      }
    }
    return null;
  }
  eachChild(fn) {
    this.args.forEach(fn);
  }
  outputDefined() {
    return this.args.every((arg) => arg.outputDefined());
  }
  serialize() {
    const type = this.type;
    const serialized = [type.kind];
    if (type.kind === "array") {
      const itemType = type.itemType;
      if (itemType.kind === "string" || itemType.kind === "number" || itemType.kind === "boolean") {
        serialized.push(itemType.kind);
        const N = type.N;
        if (typeof N === "number" || this.args.length > 1) {
          serialized.push(N);
        }
      }
    }
    return serialized.concat(this.args.map((arg) => arg.serialize()));
  }
};
var FormatExpression = class {
  constructor(sections) {
    this.type = FormattedType;
    this.sections = sections;
  }
  static parse(args, context) {
    if (args.length < 2) {
      return context.error(`Expected at least one argument.`);
    }
    const firstArg = args[1];
    if (!Array.isArray(firstArg) && typeof firstArg === "object") {
      return context.error(`First argument must be an image or text section.`);
    }
    const sections = [];
    let nextTokenMayBeObject = false;
    for (let i = 1; i <= args.length - 1; ++i) {
      const arg = args[i];
      if (nextTokenMayBeObject && typeof arg === "object" && !Array.isArray(arg)) {
        nextTokenMayBeObject = false;
        let scale2 = null;
        if (arg["font-scale"]) {
          scale2 = context.parse(arg["font-scale"], 1, NumberType);
          if (!scale2)
            return null;
        }
        let font = null;
        if (arg["text-font"]) {
          font = context.parse(arg["text-font"], 1, array(StringType));
          if (!font)
            return null;
        }
        let textColor = null;
        if (arg["text-color"]) {
          textColor = context.parse(arg["text-color"], 1, ColorType);
          if (!textColor)
            return null;
        }
        const lastExpression = sections[sections.length - 1];
        lastExpression.scale = scale2;
        lastExpression.font = font;
        lastExpression.textColor = textColor;
      } else {
        const content = context.parse(args[i], 1, ValueType);
        if (!content)
          return null;
        const kind = content.type.kind;
        if (kind !== "string" && kind !== "value" && kind !== "null" && kind !== "resolvedImage")
          return context.error(`Formatted text type must be 'string', 'value', 'image' or 'null'.`);
        nextTokenMayBeObject = true;
        sections.push({
          content,
          scale: null,
          font: null,
          textColor: null
        });
      }
    }
    return new FormatExpression(sections);
  }
  evaluate(ctx) {
    const evaluateSection = (section) => {
      const evaluatedContent = section.content.evaluate(ctx);
      if (typeOf(evaluatedContent) === ResolvedImageType) {
        return new FormattedSection("", evaluatedContent, null, null, null);
      }
      return new FormattedSection(toString$1(evaluatedContent), null, section.scale ? section.scale.evaluate(ctx) : null, section.font ? section.font.evaluate(ctx).join(",") : null, section.textColor ? section.textColor.evaluate(ctx) : null);
    };
    return new Formatted(this.sections.map(evaluateSection));
  }
  eachChild(fn) {
    for (const section of this.sections) {
      fn(section.content);
      if (section.scale) {
        fn(section.scale);
      }
      if (section.font) {
        fn(section.font);
      }
      if (section.textColor) {
        fn(section.textColor);
      }
    }
  }
  outputDefined() {
    return false;
  }
  serialize() {
    const serialized = ["format"];
    for (const section of this.sections) {
      serialized.push(section.content.serialize());
      const options = {};
      if (section.scale) {
        options["font-scale"] = section.scale.serialize();
      }
      if (section.font) {
        options["text-font"] = section.font.serialize();
      }
      if (section.textColor) {
        options["text-color"] = section.textColor.serialize();
      }
      serialized.push(options);
    }
    return serialized;
  }
};
var ImageExpression = class {
  constructor(input) {
    this.type = ResolvedImageType;
    this.input = input;
  }
  static parse(args, context) {
    if (args.length !== 2) {
      return context.error(`Expected two arguments.`);
    }
    const name = context.parse(args[1], 1, StringType);
    if (!name)
      return context.error(`No image name provided.`);
    return new ImageExpression(name);
  }
  evaluate(ctx) {
    const evaluatedImageName = this.input.evaluate(ctx);
    const value = ResolvedImage.fromString(evaluatedImageName);
    if (value && ctx.availableImages)
      value.available = ctx.availableImages.indexOf(evaluatedImageName) > -1;
    return value;
  }
  eachChild(fn) {
    fn(this.input);
  }
  outputDefined() {
    return false;
  }
  serialize() {
    return [
      "image",
      this.input.serialize()
    ];
  }
};
var types$1 = {
  "to-boolean": BooleanType,
  "to-color": ColorType,
  "to-number": NumberType,
  "to-string": StringType
};
var Coercion = class {
  constructor(type, args) {
    this.type = type;
    this.args = args;
  }
  static parse(args, context) {
    if (args.length < 2)
      return context.error(`Expected at least one argument.`);
    const name = args[0];
    if ((name === "to-boolean" || name === "to-string") && args.length !== 2)
      return context.error(`Expected one argument.`);
    const type = types$1[name];
    const parsed = [];
    for (let i = 1; i < args.length; i++) {
      const input = context.parse(args[i], i, ValueType);
      if (!input)
        return null;
      parsed.push(input);
    }
    return new Coercion(type, parsed);
  }
  evaluate(ctx) {
    if (this.type.kind === "boolean") {
      return Boolean(this.args[0].evaluate(ctx));
    } else if (this.type.kind === "color") {
      let input;
      let error2;
      for (const arg of this.args) {
        input = arg.evaluate(ctx);
        error2 = null;
        if (input instanceof Color) {
          return input;
        } else if (typeof input === "string") {
          const c = ctx.parseColor(input);
          if (c)
            return c;
        } else if (Array.isArray(input)) {
          if (input.length < 3 || input.length > 4) {
            error2 = `Invalid rbga value ${JSON.stringify(input)}: expected an array containing either three or four numeric values.`;
          } else {
            error2 = validateRGBA(input[0], input[1], input[2], input[3]);
          }
          if (!error2) {
            return new Color(input[0] / 255, input[1] / 255, input[2] / 255, input[3]);
          }
        }
      }
      throw new RuntimeError(error2 || `Could not parse color from value '${typeof input === "string" ? input : String(JSON.stringify(input))}'`);
    } else if (this.type.kind === "number") {
      let value = null;
      for (const arg of this.args) {
        value = arg.evaluate(ctx);
        if (value === null)
          return 0;
        const num = Number(value);
        if (isNaN(num))
          continue;
        return num;
      }
      throw new RuntimeError(`Could not convert ${JSON.stringify(value)} to number.`);
    } else if (this.type.kind === "formatted") {
      return Formatted.fromString(toString$1(this.args[0].evaluate(ctx)));
    } else if (this.type.kind === "resolvedImage") {
      return ResolvedImage.fromString(toString$1(this.args[0].evaluate(ctx)));
    } else {
      return toString$1(this.args[0].evaluate(ctx));
    }
  }
  eachChild(fn) {
    this.args.forEach(fn);
  }
  outputDefined() {
    return this.args.every((arg) => arg.outputDefined());
  }
  serialize() {
    if (this.type.kind === "formatted") {
      return new FormatExpression([{
        content: this.args[0],
        scale: null,
        font: null,
        textColor: null
      }]).serialize();
    }
    if (this.type.kind === "resolvedImage") {
      return new ImageExpression(this.args[0]).serialize();
    }
    const serialized = [`to-${this.type.kind}`];
    this.eachChild((child) => {
      serialized.push(child.serialize());
    });
    return serialized;
  }
};
var geometryTypes = [
  "Unknown",
  "Point",
  "LineString",
  "Polygon"
];
var EvaluationContext = class {
  constructor() {
    this.globals = null;
    this.feature = null;
    this.featureState = null;
    this.formattedSection = null;
    this._parseColorCache = {};
    this.availableImages = null;
    this.canonical = null;
  }
  id() {
    return this.feature && "id" in this.feature ? this.feature.id : null;
  }
  geometryType() {
    return this.feature ? typeof this.feature.type === "number" ? geometryTypes[this.feature.type] : this.feature.type : null;
  }
  geometry() {
    return this.feature && "geometry" in this.feature ? this.feature.geometry : null;
  }
  canonicalID() {
    return this.canonical;
  }
  properties() {
    return this.feature && this.feature.properties || {};
  }
  parseColor(input) {
    let cached = this._parseColorCache[input];
    if (!cached) {
      cached = this._parseColorCache[input] = Color.parse(input);
    }
    return cached;
  }
};
var CompoundExpression = class {
  constructor(name, type, evaluate, args) {
    this.name = name;
    this.type = type;
    this._evaluate = evaluate;
    this.args = args;
  }
  evaluate(ctx) {
    return this._evaluate(ctx, this.args);
  }
  eachChild(fn) {
    this.args.forEach(fn);
  }
  outputDefined() {
    return false;
  }
  serialize() {
    return [this.name].concat(this.args.map((arg) => arg.serialize()));
  }
  static parse(args, context) {
    const op = args[0];
    const definition = CompoundExpression.definitions[op];
    if (!definition) {
      return context.error(`Unknown expression "${op}". If you wanted a literal array, use ["literal", [...]].`, 0);
    }
    const type = Array.isArray(definition) ? definition[0] : definition.type;
    const availableOverloads = Array.isArray(definition) ? [[
      definition[1],
      definition[2]
    ]] : definition.overloads;
    const overloads = availableOverloads.filter(([signature]) => !Array.isArray(signature) || signature.length === args.length - 1);
    let signatureContext = null;
    for (const [params, evaluate] of overloads) {
      signatureContext = new ParsingContext(context.registry, context.path, null, context.scope);
      const parsedArgs = [];
      let argParseFailed = false;
      for (let i = 1; i < args.length; i++) {
        const arg = args[i];
        const expectedType = Array.isArray(params) ? params[i - 1] : params.type;
        const parsed = signatureContext.parse(arg, 1 + parsedArgs.length, expectedType);
        if (!parsed) {
          argParseFailed = true;
          break;
        }
        parsedArgs.push(parsed);
      }
      if (argParseFailed) {
        continue;
      }
      if (Array.isArray(params)) {
        if (params.length !== parsedArgs.length) {
          signatureContext.error(`Expected ${params.length} arguments, but found ${parsedArgs.length} instead.`);
          continue;
        }
      }
      for (let i = 0; i < parsedArgs.length; i++) {
        const expected = Array.isArray(params) ? params[i] : params.type;
        const arg = parsedArgs[i];
        signatureContext.concat(i + 1).checkSubtype(expected, arg.type);
      }
      if (signatureContext.errors.length === 0) {
        return new CompoundExpression(op, type, evaluate, parsedArgs);
      }
    }
    if (overloads.length === 1) {
      context.errors.push(...signatureContext.errors);
    } else {
      const expected = overloads.length ? overloads : availableOverloads;
      const signatures = expected.map(([params]) => stringifySignature(params)).join(" | ");
      const actualTypes = [];
      for (let i = 1; i < args.length; i++) {
        const parsed = context.parse(args[i], 1 + actualTypes.length);
        if (!parsed)
          return null;
        actualTypes.push(toString(parsed.type));
      }
      context.error(`Expected arguments of type ${signatures}, but found (${actualTypes.join(", ")}) instead.`);
    }
    return null;
  }
  static register(registry, definitions) {
    CompoundExpression.definitions = definitions;
    for (const name in definitions) {
      registry[name] = CompoundExpression;
    }
  }
};
function stringifySignature(signature) {
  if (Array.isArray(signature)) {
    return `(${signature.map(toString).join(", ")})`;
  } else {
    return `(${toString(signature.type)}...)`;
  }
}
var CollatorExpression = class {
  constructor(caseSensitive, diacriticSensitive, locale) {
    this.type = CollatorType;
    this.locale = locale;
    this.caseSensitive = caseSensitive;
    this.diacriticSensitive = diacriticSensitive;
  }
  static parse(args, context) {
    if (args.length !== 2)
      return context.error(`Expected one argument.`);
    const options = args[1];
    if (typeof options !== "object" || Array.isArray(options))
      return context.error(`Collator options argument must be an object.`);
    const caseSensitive = context.parse(options["case-sensitive"] === void 0 ? false : options["case-sensitive"], 1, BooleanType);
    if (!caseSensitive)
      return null;
    const diacriticSensitive = context.parse(options["diacritic-sensitive"] === void 0 ? false : options["diacritic-sensitive"], 1, BooleanType);
    if (!diacriticSensitive)
      return null;
    let locale = null;
    if (options["locale"]) {
      locale = context.parse(options["locale"], 1, StringType);
      if (!locale)
        return null;
    }
    return new CollatorExpression(caseSensitive, diacriticSensitive, locale);
  }
  evaluate(ctx) {
    return new Collator(this.caseSensitive.evaluate(ctx), this.diacriticSensitive.evaluate(ctx), this.locale ? this.locale.evaluate(ctx) : null);
  }
  eachChild(fn) {
    fn(this.caseSensitive);
    fn(this.diacriticSensitive);
    if (this.locale) {
      fn(this.locale);
    }
  }
  outputDefined() {
    return false;
  }
  serialize() {
    const options = {};
    options["case-sensitive"] = this.caseSensitive.serialize();
    options["diacritic-sensitive"] = this.diacriticSensitive.serialize();
    if (this.locale) {
      options["locale"] = this.locale.serialize();
    }
    return [
      "collator",
      options
    ];
  }
};
var EXTENT = 8192;
function updateBBox(bbox, coord) {
  bbox[0] = Math.min(bbox[0], coord[0]);
  bbox[1] = Math.min(bbox[1], coord[1]);
  bbox[2] = Math.max(bbox[2], coord[0]);
  bbox[3] = Math.max(bbox[3], coord[1]);
}
function mercatorXfromLng(lng) {
  return (180 + lng) / 360;
}
function mercatorYfromLat(lat) {
  return (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))) / 360;
}
function boxWithinBox(bbox1, bbox2) {
  if (bbox1[0] <= bbox2[0])
    return false;
  if (bbox1[2] >= bbox2[2])
    return false;
  if (bbox1[1] <= bbox2[1])
    return false;
  if (bbox1[3] >= bbox2[3])
    return false;
  return true;
}
function getTileCoordinates(p, canonical) {
  const x = mercatorXfromLng(p[0]);
  const y = mercatorYfromLat(p[1]);
  const tilesAtZoom = Math.pow(2, canonical.z);
  return [
    Math.round(x * tilesAtZoom * EXTENT),
    Math.round(y * tilesAtZoom * EXTENT)
  ];
}
function onBoundary(p, p1, p2) {
  const x1 = p[0] - p1[0];
  const y1 = p[1] - p1[1];
  const x2 = p[0] - p2[0];
  const y2 = p[1] - p2[1];
  return x1 * y2 - x2 * y1 === 0 && x1 * x2 <= 0 && y1 * y2 <= 0;
}
function rayIntersect(p, p1, p2) {
  return p1[1] > p[1] !== p2[1] > p[1] && p[0] < (p2[0] - p1[0]) * (p[1] - p1[1]) / (p2[1] - p1[1]) + p1[0];
}
function pointWithinPolygon(point, rings) {
  let inside = false;
  for (let i = 0, len = rings.length; i < len; i++) {
    const ring = rings[i];
    for (let j = 0, len2 = ring.length; j < len2 - 1; j++) {
      if (onBoundary(point, ring[j], ring[j + 1]))
        return false;
      if (rayIntersect(point, ring[j], ring[j + 1]))
        inside = !inside;
    }
  }
  return inside;
}
function pointWithinPolygons(point, polygons) {
  for (let i = 0; i < polygons.length; i++) {
    if (pointWithinPolygon(point, polygons[i]))
      return true;
  }
  return false;
}
function perp(v1, v2) {
  return v1[0] * v2[1] - v1[1] * v2[0];
}
function twoSided(p1, p2, q1, q2) {
  const x1 = p1[0] - q1[0];
  const y1 = p1[1] - q1[1];
  const x2 = p2[0] - q1[0];
  const y2 = p2[1] - q1[1];
  const x3 = q2[0] - q1[0];
  const y3 = q2[1] - q1[1];
  const det1 = x1 * y3 - x3 * y1;
  const det2 = x2 * y3 - x3 * y2;
  if (det1 > 0 && det2 < 0 || det1 < 0 && det2 > 0)
    return true;
  return false;
}
function lineIntersectLine(a, b, c, d) {
  const vectorP = [
    b[0] - a[0],
    b[1] - a[1]
  ];
  const vectorQ = [
    d[0] - c[0],
    d[1] - c[1]
  ];
  if (perp(vectorQ, vectorP) === 0)
    return false;
  if (twoSided(a, b, c, d) && twoSided(c, d, a, b))
    return true;
  return false;
}
function lineIntersectPolygon(p1, p2, polygon) {
  for (const ring of polygon) {
    for (let j = 0; j < ring.length - 1; ++j) {
      if (lineIntersectLine(p1, p2, ring[j], ring[j + 1])) {
        return true;
      }
    }
  }
  return false;
}
function lineStringWithinPolygon(line, polygon) {
  for (let i = 0; i < line.length; ++i) {
    if (!pointWithinPolygon(line[i], polygon)) {
      return false;
    }
  }
  for (let i = 0; i < line.length - 1; ++i) {
    if (lineIntersectPolygon(line[i], line[i + 1], polygon)) {
      return false;
    }
  }
  return true;
}
function lineStringWithinPolygons(line, polygons) {
  for (let i = 0; i < polygons.length; i++) {
    if (lineStringWithinPolygon(line, polygons[i]))
      return true;
  }
  return false;
}
function getTilePolygon(coordinates, bbox, canonical) {
  const polygon = [];
  for (let i = 0; i < coordinates.length; i++) {
    const ring = [];
    for (let j = 0; j < coordinates[i].length; j++) {
      const coord = getTileCoordinates(coordinates[i][j], canonical);
      updateBBox(bbox, coord);
      ring.push(coord);
    }
    polygon.push(ring);
  }
  return polygon;
}
function getTilePolygons(coordinates, bbox, canonical) {
  const polygons = [];
  for (let i = 0; i < coordinates.length; i++) {
    const polygon = getTilePolygon(coordinates[i], bbox, canonical);
    polygons.push(polygon);
  }
  return polygons;
}
function updatePoint(p, bbox, polyBBox, worldSize) {
  if (p[0] < polyBBox[0] || p[0] > polyBBox[2]) {
    const halfWorldSize = worldSize * 0.5;
    let shift = p[0] - polyBBox[0] > halfWorldSize ? -worldSize : polyBBox[0] - p[0] > halfWorldSize ? worldSize : 0;
    if (shift === 0) {
      shift = p[0] - polyBBox[2] > halfWorldSize ? -worldSize : polyBBox[2] - p[0] > halfWorldSize ? worldSize : 0;
    }
    p[0] += shift;
  }
  updateBBox(bbox, p);
}
function resetBBox(bbox) {
  bbox[0] = bbox[1] = Infinity;
  bbox[2] = bbox[3] = -Infinity;
}
function getTilePoints(geometry, pointBBox, polyBBox, canonical) {
  const worldSize = Math.pow(2, canonical.z) * EXTENT;
  const shifts = [
    canonical.x * EXTENT,
    canonical.y * EXTENT
  ];
  const tilePoints = [];
  for (const points of geometry) {
    for (const point of points) {
      const p = [
        point.x + shifts[0],
        point.y + shifts[1]
      ];
      updatePoint(p, pointBBox, polyBBox, worldSize);
      tilePoints.push(p);
    }
  }
  return tilePoints;
}
function getTileLines(geometry, lineBBox, polyBBox, canonical) {
  const worldSize = Math.pow(2, canonical.z) * EXTENT;
  const shifts = [
    canonical.x * EXTENT,
    canonical.y * EXTENT
  ];
  const tileLines = [];
  for (const line of geometry) {
    const tileLine = [];
    for (const point of line) {
      const p = [
        point.x + shifts[0],
        point.y + shifts[1]
      ];
      updateBBox(lineBBox, p);
      tileLine.push(p);
    }
    tileLines.push(tileLine);
  }
  if (lineBBox[2] - lineBBox[0] <= worldSize / 2) {
    resetBBox(lineBBox);
    for (const line of tileLines) {
      for (const p of line) {
        updatePoint(p, lineBBox, polyBBox, worldSize);
      }
    }
  }
  return tileLines;
}
function pointsWithinPolygons(ctx, polygonGeometry) {
  const pointBBox = [
    Infinity,
    Infinity,
    -Infinity,
    -Infinity
  ];
  const polyBBox = [
    Infinity,
    Infinity,
    -Infinity,
    -Infinity
  ];
  const canonical = ctx.canonicalID();
  if (polygonGeometry.type === "Polygon") {
    const tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);
    const tilePoints = getTilePoints(ctx.geometry(), pointBBox, polyBBox, canonical);
    if (!boxWithinBox(pointBBox, polyBBox))
      return false;
    for (const point of tilePoints) {
      if (!pointWithinPolygon(point, tilePolygon))
        return false;
    }
  }
  if (polygonGeometry.type === "MultiPolygon") {
    const tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);
    const tilePoints = getTilePoints(ctx.geometry(), pointBBox, polyBBox, canonical);
    if (!boxWithinBox(pointBBox, polyBBox))
      return false;
    for (const point of tilePoints) {
      if (!pointWithinPolygons(point, tilePolygons))
        return false;
    }
  }
  return true;
}
function linesWithinPolygons(ctx, polygonGeometry) {
  const lineBBox = [
    Infinity,
    Infinity,
    -Infinity,
    -Infinity
  ];
  const polyBBox = [
    Infinity,
    Infinity,
    -Infinity,
    -Infinity
  ];
  const canonical = ctx.canonicalID();
  if (polygonGeometry.type === "Polygon") {
    const tilePolygon = getTilePolygon(polygonGeometry.coordinates, polyBBox, canonical);
    const tileLines = getTileLines(ctx.geometry(), lineBBox, polyBBox, canonical);
    if (!boxWithinBox(lineBBox, polyBBox))
      return false;
    for (const line of tileLines) {
      if (!lineStringWithinPolygon(line, tilePolygon))
        return false;
    }
  }
  if (polygonGeometry.type === "MultiPolygon") {
    const tilePolygons = getTilePolygons(polygonGeometry.coordinates, polyBBox, canonical);
    const tileLines = getTileLines(ctx.geometry(), lineBBox, polyBBox, canonical);
    if (!boxWithinBox(lineBBox, polyBBox))
      return false;
    for (const line of tileLines) {
      if (!lineStringWithinPolygons(line, tilePolygons))
        return false;
    }
  }
  return true;
}
var Within = class {
  constructor(geojson, geometries) {
    this.type = BooleanType;
    this.geojson = geojson;
    this.geometries = geometries;
  }
  static parse(args, context) {
    if (args.length !== 2)
      return context.error(`'within' expression requires exactly one argument, but found ${args.length - 1} instead.`);
    if (isValue(args[1])) {
      const geojson = args[1];
      if (geojson.type === "FeatureCollection") {
        for (let i = 0; i < geojson.features.length; ++i) {
          const type = geojson.features[i].geometry.type;
          if (type === "Polygon" || type === "MultiPolygon") {
            return new Within(geojson, geojson.features[i].geometry);
          }
        }
      } else if (geojson.type === "Feature") {
        const type = geojson.geometry.type;
        if (type === "Polygon" || type === "MultiPolygon") {
          return new Within(geojson, geojson.geometry);
        }
      } else if (geojson.type === "Polygon" || geojson.type === "MultiPolygon") {
        return new Within(geojson, geojson);
      }
    }
    return context.error(`'within' expression requires valid geojson object that contains polygon geometry type.`);
  }
  evaluate(ctx) {
    if (ctx.geometry() != null && ctx.canonicalID() != null) {
      if (ctx.geometryType() === "Point") {
        return pointsWithinPolygons(ctx, this.geometries);
      } else if (ctx.geometryType() === "LineString") {
        return linesWithinPolygons(ctx, this.geometries);
      }
    }
    return false;
  }
  eachChild() {
  }
  outputDefined() {
    return true;
  }
  serialize() {
    return [
      "within",
      this.geojson
    ];
  }
};
function isFeatureConstant(e) {
  if (e instanceof CompoundExpression) {
    if (e.name === "get" && e.args.length === 1) {
      return false;
    } else if (e.name === "feature-state") {
      return false;
    } else if (e.name === "has" && e.args.length === 1) {
      return false;
    } else if (e.name === "properties" || e.name === "geometry-type" || e.name === "id") {
      return false;
    } else if (/^filter-/.test(e.name)) {
      return false;
    }
  }
  if (e instanceof Within) {
    return false;
  }
  let result = true;
  e.eachChild((arg) => {
    if (result && !isFeatureConstant(arg)) {
      result = false;
    }
  });
  return result;
}
function isStateConstant(e) {
  if (e instanceof CompoundExpression) {
    if (e.name === "feature-state") {
      return false;
    }
  }
  let result = true;
  e.eachChild((arg) => {
    if (result && !isStateConstant(arg)) {
      result = false;
    }
  });
  return result;
}
function isGlobalPropertyConstant(e, properties) {
  if (e instanceof CompoundExpression && properties.indexOf(e.name) >= 0) {
    return false;
  }
  let result = true;
  e.eachChild((arg) => {
    if (result && !isGlobalPropertyConstant(arg, properties)) {
      result = false;
    }
  });
  return result;
}
var Var = class {
  constructor(name, boundExpression) {
    this.type = boundExpression.type;
    this.name = name;
    this.boundExpression = boundExpression;
  }
  static parse(args, context) {
    if (args.length !== 2 || typeof args[1] !== "string")
      return context.error(`'var' expression requires exactly one string literal argument.`);
    const name = args[1];
    if (!context.scope.has(name)) {
      return context.error(`Unknown variable "${name}". Make sure "${name}" has been bound in an enclosing "let" expression before using it.`, 1);
    }
    return new Var(name, context.scope.get(name));
  }
  evaluate(ctx) {
    return this.boundExpression.evaluate(ctx);
  }
  eachChild() {
  }
  outputDefined() {
    return false;
  }
  serialize() {
    return [
      "var",
      this.name
    ];
  }
};
var ParsingContext = class {
  constructor(registry, path = [], expectedType, scope = new Scope(), errors = []) {
    this.registry = registry;
    this.path = path;
    this.key = path.map((part) => `[${part}]`).join("");
    this.scope = scope;
    this.errors = errors;
    this.expectedType = expectedType;
  }
  parse(expr, index, expectedType, bindings, options = {}) {
    if (index) {
      return this.concat(index, expectedType, bindings)._parse(expr, options);
    }
    return this._parse(expr, options);
  }
  _parse(expr, options) {
    if (expr === null || typeof expr === "string" || typeof expr === "boolean" || typeof expr === "number") {
      expr = [
        "literal",
        expr
      ];
    }
    function annotate(parsed, type, typeAnnotation) {
      if (typeAnnotation === "assert") {
        return new Assertion(type, [parsed]);
      } else if (typeAnnotation === "coerce") {
        return new Coercion(type, [parsed]);
      } else {
        return parsed;
      }
    }
    if (Array.isArray(expr)) {
      if (expr.length === 0) {
        return this.error(`Expected an array with at least one element. If you wanted a literal array, use ["literal", []].`);
      }
      const op = expr[0];
      if (typeof op !== "string") {
        this.error(`Expression name must be a string, but found ${typeof op} instead. If you wanted a literal array, use ["literal", [...]].`, 0);
        return null;
      }
      const Expr = this.registry[op];
      if (Expr) {
        let parsed = Expr.parse(expr, this);
        if (!parsed)
          return null;
        if (this.expectedType) {
          const expected = this.expectedType;
          const actual = parsed.type;
          if ((expected.kind === "string" || expected.kind === "number" || expected.kind === "boolean" || expected.kind === "object" || expected.kind === "array") && actual.kind === "value") {
            parsed = annotate(parsed, expected, options.typeAnnotation || "assert");
          } else if ((expected.kind === "color" || expected.kind === "formatted" || expected.kind === "resolvedImage") && (actual.kind === "value" || actual.kind === "string")) {
            parsed = annotate(parsed, expected, options.typeAnnotation || "coerce");
          } else if (this.checkSubtype(expected, actual)) {
            return null;
          }
        }
        if (!(parsed instanceof Literal) && parsed.type.kind !== "resolvedImage" && isConstant(parsed)) {
          const ec = new EvaluationContext();
          try {
            parsed = new Literal(parsed.type, parsed.evaluate(ec));
          } catch (e) {
            this.error(e.message);
            return null;
          }
        }
        return parsed;
      }
      return this.error(`Unknown expression "${op}". If you wanted a literal array, use ["literal", [...]].`, 0);
    } else if (typeof expr === "undefined") {
      return this.error(`'undefined' value invalid. Use null instead.`);
    } else if (typeof expr === "object") {
      return this.error(`Bare objects invalid. Use ["literal", {...}] instead.`);
    } else {
      return this.error(`Expected an array, but found ${typeof expr} instead.`);
    }
  }
  concat(index, expectedType, bindings) {
    const path = typeof index === "number" ? this.path.concat(index) : this.path;
    const scope = bindings ? this.scope.concat(bindings) : this.scope;
    return new ParsingContext(this.registry, path, expectedType || null, scope, this.errors);
  }
  error(error2, ...keys) {
    const key = `${this.key}${keys.map((k) => `[${k}]`).join("")}`;
    this.errors.push(new ParsingError(key, error2));
  }
  checkSubtype(expected, t) {
    const error2 = checkSubtype(expected, t);
    if (error2)
      this.error(error2);
    return error2;
  }
};
function isConstant(expression2) {
  if (expression2 instanceof Var) {
    return isConstant(expression2.boundExpression);
  } else if (expression2 instanceof CompoundExpression && expression2.name === "error") {
    return false;
  } else if (expression2 instanceof CollatorExpression) {
    return false;
  } else if (expression2 instanceof Within) {
    return false;
  }
  const isTypeAnnotation = expression2 instanceof Coercion || expression2 instanceof Assertion;
  let childrenConstant = true;
  expression2.eachChild((child) => {
    if (isTypeAnnotation) {
      childrenConstant = childrenConstant && isConstant(child);
    } else {
      childrenConstant = childrenConstant && child instanceof Literal;
    }
  });
  if (!childrenConstant) {
    return false;
  }
  return isFeatureConstant(expression2) && isGlobalPropertyConstant(expression2, [
    "zoom",
    "heatmap-density",
    "line-progress",
    "sky-radial-progress",
    "accumulated",
    "is-supported-script"
  ]);
}
function findStopLessThanOrEqualTo(stops, input) {
  const lastIndex = stops.length - 1;
  let lowerIndex = 0;
  let upperIndex = lastIndex;
  let currentIndex = 0;
  let currentValue, nextValue;
  while (lowerIndex <= upperIndex) {
    currentIndex = Math.floor((lowerIndex + upperIndex) / 2);
    currentValue = stops[currentIndex];
    nextValue = stops[currentIndex + 1];
    if (currentValue <= input) {
      if (currentIndex === lastIndex || input < nextValue) {
        return currentIndex;
      }
      lowerIndex = currentIndex + 1;
    } else if (currentValue > input) {
      upperIndex = currentIndex - 1;
    } else {
      throw new RuntimeError("Input is not a number.");
    }
  }
  return 0;
}
var Step = class {
  constructor(type, input, stops) {
    this.type = type;
    this.input = input;
    this.labels = [];
    this.outputs = [];
    for (const [label, expression2] of stops) {
      this.labels.push(label);
      this.outputs.push(expression2);
    }
  }
  static parse(args, context) {
    if (args.length - 1 < 4) {
      return context.error(`Expected at least 4 arguments, but found only ${args.length - 1}.`);
    }
    if ((args.length - 1) % 2 !== 0) {
      return context.error(`Expected an even number of arguments.`);
    }
    const input = context.parse(args[1], 1, NumberType);
    if (!input)
      return null;
    const stops = [];
    let outputType = null;
    if (context.expectedType && context.expectedType.kind !== "value") {
      outputType = context.expectedType;
    }
    for (let i = 1; i < args.length; i += 2) {
      const label = i === 1 ? -Infinity : args[i];
      const value = args[i + 1];
      const labelKey = i;
      const valueKey = i + 1;
      if (typeof label !== "number") {
        return context.error('Input/output pairs for "step" expressions must be defined using literal numeric values (not computed expressions) for the input values.', labelKey);
      }
      if (stops.length && stops[stops.length - 1][0] >= label) {
        return context.error('Input/output pairs for "step" expressions must be arranged with input values in strictly ascending order.', labelKey);
      }
      const parsed = context.parse(value, valueKey, outputType);
      if (!parsed)
        return null;
      outputType = outputType || parsed.type;
      stops.push([
        label,
        parsed
      ]);
    }
    return new Step(outputType, input, stops);
  }
  evaluate(ctx) {
    const labels = this.labels;
    const outputs = this.outputs;
    if (labels.length === 1) {
      return outputs[0].evaluate(ctx);
    }
    const value = this.input.evaluate(ctx);
    if (value <= labels[0]) {
      return outputs[0].evaluate(ctx);
    }
    const stopCount = labels.length;
    if (value >= labels[stopCount - 1]) {
      return outputs[stopCount - 1].evaluate(ctx);
    }
    const index = findStopLessThanOrEqualTo(labels, value);
    return outputs[index].evaluate(ctx);
  }
  eachChild(fn) {
    fn(this.input);
    for (const expression2 of this.outputs) {
      fn(expression2);
    }
  }
  outputDefined() {
    return this.outputs.every((out) => out.outputDefined());
  }
  serialize() {
    const serialized = [
      "step",
      this.input.serialize()
    ];
    for (let i = 0; i < this.labels.length; i++) {
      if (i > 0) {
        serialized.push(this.labels[i]);
      }
      serialized.push(this.outputs[i].serialize());
    }
    return serialized;
  }
};
var unitbezier = UnitBezier;
function UnitBezier(p1x, p1y, p2x, p2y) {
  this.cx = 3 * p1x;
  this.bx = 3 * (p2x - p1x) - this.cx;
  this.ax = 1 - this.cx - this.bx;
  this.cy = 3 * p1y;
  this.by = 3 * (p2y - p1y) - this.cy;
  this.ay = 1 - this.cy - this.by;
  this.p1x = p1x;
  this.p1y = p2y;
  this.p2x = p2x;
  this.p2y = p2y;
}
UnitBezier.prototype.sampleCurveX = function(t) {
  return ((this.ax * t + this.bx) * t + this.cx) * t;
};
UnitBezier.prototype.sampleCurveY = function(t) {
  return ((this.ay * t + this.by) * t + this.cy) * t;
};
UnitBezier.prototype.sampleCurveDerivativeX = function(t) {
  return (3 * this.ax * t + 2 * this.bx) * t + this.cx;
};
UnitBezier.prototype.solveCurveX = function(x, epsilon) {
  if (typeof epsilon === "undefined")
    epsilon = 1e-6;
  var t02, t12, t22, x2, i;
  for (t22 = x, i = 0; i < 8; i++) {
    x2 = this.sampleCurveX(t22) - x;
    if (Math.abs(x2) < epsilon)
      return t22;
    var d2 = this.sampleCurveDerivativeX(t22);
    if (Math.abs(d2) < 1e-6)
      break;
    t22 = t22 - x2 / d2;
  }
  t02 = 0;
  t12 = 1;
  t22 = x;
  if (t22 < t02)
    return t02;
  if (t22 > t12)
    return t12;
  while (t02 < t12) {
    x2 = this.sampleCurveX(t22);
    if (Math.abs(x2 - x) < epsilon)
      return t22;
    if (x > x2) {
      t02 = t22;
    } else {
      t12 = t22;
    }
    t22 = (t12 - t02) * 0.5 + t02;
  }
  return t22;
};
UnitBezier.prototype.solve = function(x, epsilon) {
  return this.sampleCurveY(this.solveCurveX(x, epsilon));
};
function number(a, b, t) {
  return a * (1 - t) + b * t;
}
function color(from, to, t) {
  return new Color(number(from.r, to.r, t), number(from.g, to.g, t), number(from.b, to.b, t), number(from.a, to.a, t));
}
function array$1(from, to, t) {
  return from.map((d, i) => {
    return number(d, to[i], t);
  });
}
var interpolate = Object.freeze({
  __proto__: null,
  number,
  color,
  array: array$1
});
var Xn = 0.95047;
var Yn = 1;
var Zn = 1.08883;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;
function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}
function xyz2rgb(x) {
  return 255 * (x <= 31308e-7 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}
function rgb2xyz(x) {
  x /= 255;
  return x <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}
function rgbToLab(rgbColor) {
  const b = rgb2xyz(rgbColor.r), a = rgb2xyz(rgbColor.g), l = rgb2xyz(rgbColor.b), x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn), y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.072175 * l) / Yn), z = xyz2lab((0.0193339 * b + 0.119192 * a + 0.9503041 * l) / Zn);
  return {
    l: 116 * y - 16,
    a: 500 * (x - y),
    b: 200 * (y - z),
    alpha: rgbColor.a
  };
}
function labToRgb(labColor) {
  let y = (labColor.l + 16) / 116, x = isNaN(labColor.a) ? y : y + labColor.a / 500, z = isNaN(labColor.b) ? y : y - labColor.b / 200;
  y = Yn * lab2xyz(y);
  x = Xn * lab2xyz(x);
  z = Zn * lab2xyz(z);
  return new Color(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), xyz2rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), labColor.alpha);
}
function interpolateLab(from, to, t) {
  return {
    l: number(from.l, to.l, t),
    a: number(from.a, to.a, t),
    b: number(from.b, to.b, t),
    alpha: number(from.alpha, to.alpha, t)
  };
}
function rgbToHcl(rgbColor) {
  const { l, a, b } = rgbToLab(rgbColor);
  const h = Math.atan2(b, a) * rad2deg;
  return {
    h: h < 0 ? h + 360 : h,
    c: Math.sqrt(a * a + b * b),
    l,
    alpha: rgbColor.a
  };
}
function hclToRgb(hclColor) {
  const h = hclColor.h * deg2rad, c = hclColor.c, l = hclColor.l;
  return labToRgb({
    l,
    a: Math.cos(h) * c,
    b: Math.sin(h) * c,
    alpha: hclColor.alpha
  });
}
function interpolateHue(a, b, t) {
  const d = b - a;
  return a + t * (d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d);
}
function interpolateHcl(from, to, t) {
  return {
    h: interpolateHue(from.h, to.h, t),
    c: number(from.c, to.c, t),
    l: number(from.l, to.l, t),
    alpha: number(from.alpha, to.alpha, t)
  };
}
var lab = {
  forward: rgbToLab,
  reverse: labToRgb,
  interpolate: interpolateLab
};
var hcl = {
  forward: rgbToHcl,
  reverse: hclToRgb,
  interpolate: interpolateHcl
};
var colorSpaces = Object.freeze({
  __proto__: null,
  lab,
  hcl
});
var Interpolate = class {
  constructor(type, operator, interpolation, input, stops) {
    this.type = type;
    this.operator = operator;
    this.interpolation = interpolation;
    this.input = input;
    this.labels = [];
    this.outputs = [];
    for (const [label, expression2] of stops) {
      this.labels.push(label);
      this.outputs.push(expression2);
    }
  }
  static interpolationFactor(interpolation, input, lower, upper) {
    let t = 0;
    if (interpolation.name === "exponential") {
      t = exponentialInterpolation(input, interpolation.base, lower, upper);
    } else if (interpolation.name === "linear") {
      t = exponentialInterpolation(input, 1, lower, upper);
    } else if (interpolation.name === "cubic-bezier") {
      const c = interpolation.controlPoints;
      const ub = new unitbezier(c[0], c[1], c[2], c[3]);
      t = ub.solve(exponentialInterpolation(input, 1, lower, upper));
    }
    return t;
  }
  static parse(args, context) {
    let [operator, interpolation, input, ...rest] = args;
    if (!Array.isArray(interpolation) || interpolation.length === 0) {
      return context.error(`Expected an interpolation type expression.`, 1);
    }
    if (interpolation[0] === "linear") {
      interpolation = { name: "linear" };
    } else if (interpolation[0] === "exponential") {
      const base = interpolation[1];
      if (typeof base !== "number")
        return context.error(`Exponential interpolation requires a numeric base.`, 1, 1);
      interpolation = {
        name: "exponential",
        base
      };
    } else if (interpolation[0] === "cubic-bezier") {
      const controlPoints = interpolation.slice(1);
      if (controlPoints.length !== 4 || controlPoints.some((t) => typeof t !== "number" || t < 0 || t > 1)) {
        return context.error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1.", 1);
      }
      interpolation = {
        name: "cubic-bezier",
        controlPoints
      };
    } else {
      return context.error(`Unknown interpolation type ${String(interpolation[0])}`, 1, 0);
    }
    if (args.length - 1 < 4) {
      return context.error(`Expected at least 4 arguments, but found only ${args.length - 1}.`);
    }
    if ((args.length - 1) % 2 !== 0) {
      return context.error(`Expected an even number of arguments.`);
    }
    input = context.parse(input, 2, NumberType);
    if (!input)
      return null;
    const stops = [];
    let outputType = null;
    if (operator === "interpolate-hcl" || operator === "interpolate-lab") {
      outputType = ColorType;
    } else if (context.expectedType && context.expectedType.kind !== "value") {
      outputType = context.expectedType;
    }
    for (let i = 0; i < rest.length; i += 2) {
      const label = rest[i];
      const value = rest[i + 1];
      const labelKey = i + 3;
      const valueKey = i + 4;
      if (typeof label !== "number") {
        return context.error('Input/output pairs for "interpolate" expressions must be defined using literal numeric values (not computed expressions) for the input values.', labelKey);
      }
      if (stops.length && stops[stops.length - 1][0] >= label) {
        return context.error('Input/output pairs for "interpolate" expressions must be arranged with input values in strictly ascending order.', labelKey);
      }
      const parsed = context.parse(value, valueKey, outputType);
      if (!parsed)
        return null;
      outputType = outputType || parsed.type;
      stops.push([
        label,
        parsed
      ]);
    }
    if (outputType.kind !== "number" && outputType.kind !== "color" && !(outputType.kind === "array" && outputType.itemType.kind === "number" && typeof outputType.N === "number")) {
      return context.error(`Type ${toString(outputType)} is not interpolatable.`);
    }
    return new Interpolate(outputType, operator, interpolation, input, stops);
  }
  evaluate(ctx) {
    const labels = this.labels;
    const outputs = this.outputs;
    if (labels.length === 1) {
      return outputs[0].evaluate(ctx);
    }
    const value = this.input.evaluate(ctx);
    if (value <= labels[0]) {
      return outputs[0].evaluate(ctx);
    }
    const stopCount = labels.length;
    if (value >= labels[stopCount - 1]) {
      return outputs[stopCount - 1].evaluate(ctx);
    }
    const index = findStopLessThanOrEqualTo(labels, value);
    const lower = labels[index];
    const upper = labels[index + 1];
    const t = Interpolate.interpolationFactor(this.interpolation, value, lower, upper);
    const outputLower = outputs[index].evaluate(ctx);
    const outputUpper = outputs[index + 1].evaluate(ctx);
    if (this.operator === "interpolate") {
      return interpolate[this.type.kind.toLowerCase()](outputLower, outputUpper, t);
    } else if (this.operator === "interpolate-hcl") {
      return hcl.reverse(hcl.interpolate(hcl.forward(outputLower), hcl.forward(outputUpper), t));
    } else {
      return lab.reverse(lab.interpolate(lab.forward(outputLower), lab.forward(outputUpper), t));
    }
  }
  eachChild(fn) {
    fn(this.input);
    for (const expression2 of this.outputs) {
      fn(expression2);
    }
  }
  outputDefined() {
    return this.outputs.every((out) => out.outputDefined());
  }
  serialize() {
    let interpolation;
    if (this.interpolation.name === "linear") {
      interpolation = ["linear"];
    } else if (this.interpolation.name === "exponential") {
      if (this.interpolation.base === 1) {
        interpolation = ["linear"];
      } else {
        interpolation = [
          "exponential",
          this.interpolation.base
        ];
      }
    } else {
      interpolation = ["cubic-bezier"].concat(this.interpolation.controlPoints);
    }
    const serialized = [
      this.operator,
      interpolation,
      this.input.serialize()
    ];
    for (let i = 0; i < this.labels.length; i++) {
      serialized.push(this.labels[i], this.outputs[i].serialize());
    }
    return serialized;
  }
};
function exponentialInterpolation(input, base, lowerValue, upperValue) {
  const difference = upperValue - lowerValue;
  const progress = input - lowerValue;
  if (difference === 0) {
    return 0;
  } else if (base === 1) {
    return progress / difference;
  } else {
    return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);
  }
}
var Coalesce = class {
  constructor(type, args) {
    this.type = type;
    this.args = args;
  }
  static parse(args, context) {
    if (args.length < 2) {
      return context.error("Expectected at least one argument.");
    }
    let outputType = null;
    const expectedType = context.expectedType;
    if (expectedType && expectedType.kind !== "value") {
      outputType = expectedType;
    }
    const parsedArgs = [];
    for (const arg of args.slice(1)) {
      const parsed = context.parse(arg, 1 + parsedArgs.length, outputType, void 0, { typeAnnotation: "omit" });
      if (!parsed)
        return null;
      outputType = outputType || parsed.type;
      parsedArgs.push(parsed);
    }
    const needsAnnotation = expectedType && parsedArgs.some((arg) => checkSubtype(expectedType, arg.type));
    return needsAnnotation ? new Coalesce(ValueType, parsedArgs) : new Coalesce(outputType, parsedArgs);
  }
  evaluate(ctx) {
    let result = null;
    let argCount = 0;
    let requestedImageName;
    for (const arg of this.args) {
      argCount++;
      result = arg.evaluate(ctx);
      if (result && result instanceof ResolvedImage && !result.available) {
        if (!requestedImageName) {
          requestedImageName = result.name;
        }
        result = null;
        if (argCount === this.args.length) {
          result = requestedImageName;
        }
      }
      if (result !== null)
        break;
    }
    return result;
  }
  eachChild(fn) {
    this.args.forEach(fn);
  }
  outputDefined() {
    return this.args.every((arg) => arg.outputDefined());
  }
  serialize() {
    const serialized = ["coalesce"];
    this.eachChild((child) => {
      serialized.push(child.serialize());
    });
    return serialized;
  }
};
var Let = class {
  constructor(bindings, result) {
    this.type = result.type;
    this.bindings = [].concat(bindings);
    this.result = result;
  }
  evaluate(ctx) {
    return this.result.evaluate(ctx);
  }
  eachChild(fn) {
    for (const binding of this.bindings) {
      fn(binding[1]);
    }
    fn(this.result);
  }
  static parse(args, context) {
    if (args.length < 4)
      return context.error(`Expected at least 3 arguments, but found ${args.length - 1} instead.`);
    const bindings = [];
    for (let i = 1; i < args.length - 1; i += 2) {
      const name = args[i];
      if (typeof name !== "string") {
        return context.error(`Expected string, but found ${typeof name} instead.`, i);
      }
      if (/[^a-zA-Z0-9_]/.test(name)) {
        return context.error(`Variable names must contain only alphanumeric characters or '_'.`, i);
      }
      const value = context.parse(args[i + 1], i + 1);
      if (!value)
        return null;
      bindings.push([
        name,
        value
      ]);
    }
    const result = context.parse(args[args.length - 1], args.length - 1, context.expectedType, bindings);
    if (!result)
      return null;
    return new Let(bindings, result);
  }
  outputDefined() {
    return this.result.outputDefined();
  }
  serialize() {
    const serialized = ["let"];
    for (const [name, expr] of this.bindings) {
      serialized.push(name, expr.serialize());
    }
    serialized.push(this.result.serialize());
    return serialized;
  }
};
var At = class {
  constructor(type, index, input) {
    this.type = type;
    this.index = index;
    this.input = input;
  }
  static parse(args, context) {
    if (args.length !== 3)
      return context.error(`Expected 2 arguments, but found ${args.length - 1} instead.`);
    const index = context.parse(args[1], 1, NumberType);
    const input = context.parse(args[2], 2, array(context.expectedType || ValueType));
    if (!index || !input)
      return null;
    const t = input.type;
    return new At(t.itemType, index, input);
  }
  evaluate(ctx) {
    const index = this.index.evaluate(ctx);
    const array2 = this.input.evaluate(ctx);
    if (index < 0) {
      throw new RuntimeError(`Array index out of bounds: ${index} < 0.`);
    }
    if (index >= array2.length) {
      throw new RuntimeError(`Array index out of bounds: ${index} > ${array2.length - 1}.`);
    }
    if (index !== Math.floor(index)) {
      throw new RuntimeError(`Array index must be an integer, but found ${index} instead.`);
    }
    return array2[index];
  }
  eachChild(fn) {
    fn(this.index);
    fn(this.input);
  }
  outputDefined() {
    return false;
  }
  serialize() {
    return [
      "at",
      this.index.serialize(),
      this.input.serialize()
    ];
  }
};
var In = class {
  constructor(needle, haystack) {
    this.type = BooleanType;
    this.needle = needle;
    this.haystack = haystack;
  }
  static parse(args, context) {
    if (args.length !== 3) {
      return context.error(`Expected 2 arguments, but found ${args.length - 1} instead.`);
    }
    const needle = context.parse(args[1], 1, ValueType);
    const haystack = context.parse(args[2], 2, ValueType);
    if (!needle || !haystack)
      return null;
    if (!isValidType(needle.type, [
      BooleanType,
      StringType,
      NumberType,
      NullType,
      ValueType
    ])) {
      return context.error(`Expected first argument to be of type boolean, string, number or null, but found ${toString(needle.type)} instead`);
    }
    return new In(needle, haystack);
  }
  evaluate(ctx) {
    const needle = this.needle.evaluate(ctx);
    const haystack = this.haystack.evaluate(ctx);
    if (!haystack)
      return false;
    if (!isValidNativeType(needle, [
      "boolean",
      "string",
      "number",
      "null"
    ])) {
      throw new RuntimeError(`Expected first argument to be of type boolean, string, number or null, but found ${toString(typeOf(needle))} instead.`);
    }
    if (!isValidNativeType(haystack, [
      "string",
      "array"
    ])) {
      throw new RuntimeError(`Expected second argument to be of type array or string, but found ${toString(typeOf(haystack))} instead.`);
    }
    return haystack.indexOf(needle) >= 0;
  }
  eachChild(fn) {
    fn(this.needle);
    fn(this.haystack);
  }
  outputDefined() {
    return true;
  }
  serialize() {
    return [
      "in",
      this.needle.serialize(),
      this.haystack.serialize()
    ];
  }
};
var IndexOf = class {
  constructor(needle, haystack, fromIndex) {
    this.type = NumberType;
    this.needle = needle;
    this.haystack = haystack;
    this.fromIndex = fromIndex;
  }
  static parse(args, context) {
    if (args.length <= 2 || args.length >= 5) {
      return context.error(`Expected 3 or 4 arguments, but found ${args.length - 1} instead.`);
    }
    const needle = context.parse(args[1], 1, ValueType);
    const haystack = context.parse(args[2], 2, ValueType);
    if (!needle || !haystack)
      return null;
    if (!isValidType(needle.type, [
      BooleanType,
      StringType,
      NumberType,
      NullType,
      ValueType
    ])) {
      return context.error(`Expected first argument to be of type boolean, string, number or null, but found ${toString(needle.type)} instead`);
    }
    if (args.length === 4) {
      const fromIndex = context.parse(args[3], 3, NumberType);
      if (!fromIndex)
        return null;
      return new IndexOf(needle, haystack, fromIndex);
    } else {
      return new IndexOf(needle, haystack);
    }
  }
  evaluate(ctx) {
    const needle = this.needle.evaluate(ctx);
    const haystack = this.haystack.evaluate(ctx);
    if (!isValidNativeType(needle, [
      "boolean",
      "string",
      "number",
      "null"
    ])) {
      throw new RuntimeError(`Expected first argument to be of type boolean, string, number or null, but found ${toString(typeOf(needle))} instead.`);
    }
    if (!isValidNativeType(haystack, [
      "string",
      "array"
    ])) {
      throw new RuntimeError(`Expected second argument to be of type array or string, but found ${toString(typeOf(haystack))} instead.`);
    }
    if (this.fromIndex) {
      const fromIndex = this.fromIndex.evaluate(ctx);
      return haystack.indexOf(needle, fromIndex);
    }
    return haystack.indexOf(needle);
  }
  eachChild(fn) {
    fn(this.needle);
    fn(this.haystack);
    if (this.fromIndex) {
      fn(this.fromIndex);
    }
  }
  outputDefined() {
    return false;
  }
  serialize() {
    if (this.fromIndex != null && this.fromIndex !== void 0) {
      const fromIndex = this.fromIndex.serialize();
      return [
        "index-of",
        this.needle.serialize(),
        this.haystack.serialize(),
        fromIndex
      ];
    }
    return [
      "index-of",
      this.needle.serialize(),
      this.haystack.serialize()
    ];
  }
};
var Match = class {
  constructor(inputType, outputType, input, cases, outputs, otherwise) {
    this.inputType = inputType;
    this.type = outputType;
    this.input = input;
    this.cases = cases;
    this.outputs = outputs;
    this.otherwise = otherwise;
  }
  static parse(args, context) {
    if (args.length < 5)
      return context.error(`Expected at least 4 arguments, but found only ${args.length - 1}.`);
    if (args.length % 2 !== 1)
      return context.error(`Expected an even number of arguments.`);
    let inputType;
    let outputType;
    if (context.expectedType && context.expectedType.kind !== "value") {
      outputType = context.expectedType;
    }
    const cases = {};
    const outputs = [];
    for (let i = 2; i < args.length - 1; i += 2) {
      let labels = args[i];
      const value = args[i + 1];
      if (!Array.isArray(labels)) {
        labels = [labels];
      }
      const labelContext = context.concat(i);
      if (labels.length === 0) {
        return labelContext.error("Expected at least one branch label.");
      }
      for (const label of labels) {
        if (typeof label !== "number" && typeof label !== "string") {
          return labelContext.error(`Branch labels must be numbers or strings.`);
        } else if (typeof label === "number" && Math.abs(label) > Number.MAX_SAFE_INTEGER) {
          return labelContext.error(`Branch labels must be integers no larger than ${Number.MAX_SAFE_INTEGER}.`);
        } else if (typeof label === "number" && Math.floor(label) !== label) {
          return labelContext.error(`Numeric branch labels must be integer values.`);
        } else if (!inputType) {
          inputType = typeOf(label);
        } else if (labelContext.checkSubtype(inputType, typeOf(label))) {
          return null;
        }
        if (typeof cases[String(label)] !== "undefined") {
          return labelContext.error("Branch labels must be unique.");
        }
        cases[String(label)] = outputs.length;
      }
      const result = context.parse(value, i, outputType);
      if (!result)
        return null;
      outputType = outputType || result.type;
      outputs.push(result);
    }
    const input = context.parse(args[1], 1, ValueType);
    if (!input)
      return null;
    const otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);
    if (!otherwise)
      return null;
    if (input.type.kind !== "value" && context.concat(1).checkSubtype(inputType, input.type)) {
      return null;
    }
    return new Match(inputType, outputType, input, cases, outputs, otherwise);
  }
  evaluate(ctx) {
    const input = this.input.evaluate(ctx);
    const output = typeOf(input) === this.inputType && this.outputs[this.cases[input]] || this.otherwise;
    return output.evaluate(ctx);
  }
  eachChild(fn) {
    fn(this.input);
    this.outputs.forEach(fn);
    fn(this.otherwise);
  }
  outputDefined() {
    return this.outputs.every((out) => out.outputDefined()) && this.otherwise.outputDefined();
  }
  serialize() {
    const serialized = [
      "match",
      this.input.serialize()
    ];
    const sortedLabels = Object.keys(this.cases).sort();
    const groupedByOutput = [];
    const outputLookup = {};
    for (const label of sortedLabels) {
      const outputIndex = outputLookup[this.cases[label]];
      if (outputIndex === void 0) {
        outputLookup[this.cases[label]] = groupedByOutput.length;
        groupedByOutput.push([
          this.cases[label],
          [label]
        ]);
      } else {
        groupedByOutput[outputIndex][1].push(label);
      }
    }
    const coerceLabel = (label) => this.inputType.kind === "number" ? Number(label) : label;
    for (const [outputIndex, labels] of groupedByOutput) {
      if (labels.length === 1) {
        serialized.push(coerceLabel(labels[0]));
      } else {
        serialized.push(labels.map(coerceLabel));
      }
      serialized.push(this.outputs[outputIndex].serialize());
    }
    serialized.push(this.otherwise.serialize());
    return serialized;
  }
};
var Case = class {
  constructor(type, branches, otherwise) {
    this.type = type;
    this.branches = branches;
    this.otherwise = otherwise;
  }
  static parse(args, context) {
    if (args.length < 4)
      return context.error(`Expected at least 3 arguments, but found only ${args.length - 1}.`);
    if (args.length % 2 !== 0)
      return context.error(`Expected an odd number of arguments.`);
    let outputType;
    if (context.expectedType && context.expectedType.kind !== "value") {
      outputType = context.expectedType;
    }
    const branches = [];
    for (let i = 1; i < args.length - 1; i += 2) {
      const test = context.parse(args[i], i, BooleanType);
      if (!test)
        return null;
      const result = context.parse(args[i + 1], i + 1, outputType);
      if (!result)
        return null;
      branches.push([
        test,
        result
      ]);
      outputType = outputType || result.type;
    }
    const otherwise = context.parse(args[args.length - 1], args.length - 1, outputType);
    if (!otherwise)
      return null;
    return new Case(outputType, branches, otherwise);
  }
  evaluate(ctx) {
    for (const [test, expression2] of this.branches) {
      if (test.evaluate(ctx)) {
        return expression2.evaluate(ctx);
      }
    }
    return this.otherwise.evaluate(ctx);
  }
  eachChild(fn) {
    for (const [test, expression2] of this.branches) {
      fn(test);
      fn(expression2);
    }
    fn(this.otherwise);
  }
  outputDefined() {
    return this.branches.every(([_, out]) => out.outputDefined()) && this.otherwise.outputDefined();
  }
  serialize() {
    const serialized = ["case"];
    this.eachChild((child) => {
      serialized.push(child.serialize());
    });
    return serialized;
  }
};
var Slice = class {
  constructor(type, input, beginIndex, endIndex) {
    this.type = type;
    this.input = input;
    this.beginIndex = beginIndex;
    this.endIndex = endIndex;
  }
  static parse(args, context) {
    if (args.length <= 2 || args.length >= 5) {
      return context.error(`Expected 3 or 4 arguments, but found ${args.length - 1} instead.`);
    }
    const input = context.parse(args[1], 1, ValueType);
    const beginIndex = context.parse(args[2], 2, NumberType);
    if (!input || !beginIndex)
      return null;
    if (!isValidType(input.type, [
      array(ValueType),
      StringType,
      ValueType
    ])) {
      return context.error(`Expected first argument to be of type array or string, but found ${toString(input.type)} instead`);
    }
    if (args.length === 4) {
      const endIndex = context.parse(args[3], 3, NumberType);
      if (!endIndex)
        return null;
      return new Slice(input.type, input, beginIndex, endIndex);
    } else {
      return new Slice(input.type, input, beginIndex);
    }
  }
  evaluate(ctx) {
    const input = this.input.evaluate(ctx);
    const beginIndex = this.beginIndex.evaluate(ctx);
    if (!isValidNativeType(input, [
      "string",
      "array"
    ])) {
      throw new RuntimeError(`Expected first argument to be of type array or string, but found ${toString(typeOf(input))} instead.`);
    }
    if (this.endIndex) {
      const endIndex = this.endIndex.evaluate(ctx);
      return input.slice(beginIndex, endIndex);
    }
    return input.slice(beginIndex);
  }
  eachChild(fn) {
    fn(this.input);
    fn(this.beginIndex);
    if (this.endIndex) {
      fn(this.endIndex);
    }
  }
  outputDefined() {
    return false;
  }
  serialize() {
    if (this.endIndex != null && this.endIndex !== void 0) {
      const endIndex = this.endIndex.serialize();
      return [
        "slice",
        this.input.serialize(),
        this.beginIndex.serialize(),
        endIndex
      ];
    }
    return [
      "slice",
      this.input.serialize(),
      this.beginIndex.serialize()
    ];
  }
};
function isComparableType(op, type) {
  if (op === "==" || op === "!=") {
    return type.kind === "boolean" || type.kind === "string" || type.kind === "number" || type.kind === "null" || type.kind === "value";
  } else {
    return type.kind === "string" || type.kind === "number" || type.kind === "value";
  }
}
function eq(ctx, a, b) {
  return a === b;
}
function neq(ctx, a, b) {
  return a !== b;
}
function lt(ctx, a, b) {
  return a < b;
}
function gt(ctx, a, b) {
  return a > b;
}
function lteq(ctx, a, b) {
  return a <= b;
}
function gteq(ctx, a, b) {
  return a >= b;
}
function eqCollate(ctx, a, b, c) {
  return c.compare(a, b) === 0;
}
function neqCollate(ctx, a, b, c) {
  return !eqCollate(ctx, a, b, c);
}
function ltCollate(ctx, a, b, c) {
  return c.compare(a, b) < 0;
}
function gtCollate(ctx, a, b, c) {
  return c.compare(a, b) > 0;
}
function lteqCollate(ctx, a, b, c) {
  return c.compare(a, b) <= 0;
}
function gteqCollate(ctx, a, b, c) {
  return c.compare(a, b) >= 0;
}
function makeComparison(op, compareBasic, compareWithCollator) {
  const isOrderComparison = op !== "==" && op !== "!=";
  return class Comparison {
    constructor(lhs, rhs, collator) {
      this.type = BooleanType;
      this.lhs = lhs;
      this.rhs = rhs;
      this.collator = collator;
      this.hasUntypedArgument = lhs.type.kind === "value" || rhs.type.kind === "value";
    }
    static parse(args, context) {
      if (args.length !== 3 && args.length !== 4)
        return context.error(`Expected two or three arguments.`);
      const op2 = args[0];
      let lhs = context.parse(args[1], 1, ValueType);
      if (!lhs)
        return null;
      if (!isComparableType(op2, lhs.type)) {
        return context.concat(1).error(`"${op2}" comparisons are not supported for type '${toString(lhs.type)}'.`);
      }
      let rhs = context.parse(args[2], 2, ValueType);
      if (!rhs)
        return null;
      if (!isComparableType(op2, rhs.type)) {
        return context.concat(2).error(`"${op2}" comparisons are not supported for type '${toString(rhs.type)}'.`);
      }
      if (lhs.type.kind !== rhs.type.kind && lhs.type.kind !== "value" && rhs.type.kind !== "value") {
        return context.error(`Cannot compare types '${toString(lhs.type)}' and '${toString(rhs.type)}'.`);
      }
      if (isOrderComparison) {
        if (lhs.type.kind === "value" && rhs.type.kind !== "value") {
          lhs = new Assertion(rhs.type, [lhs]);
        } else if (lhs.type.kind !== "value" && rhs.type.kind === "value") {
          rhs = new Assertion(lhs.type, [rhs]);
        }
      }
      let collator = null;
      if (args.length === 4) {
        if (lhs.type.kind !== "string" && rhs.type.kind !== "string" && lhs.type.kind !== "value" && rhs.type.kind !== "value") {
          return context.error(`Cannot use collator to compare non-string types.`);
        }
        collator = context.parse(args[3], 3, CollatorType);
        if (!collator)
          return null;
      }
      return new Comparison(lhs, rhs, collator);
    }
    evaluate(ctx) {
      const lhs = this.lhs.evaluate(ctx);
      const rhs = this.rhs.evaluate(ctx);
      if (isOrderComparison && this.hasUntypedArgument) {
        const lt2 = typeOf(lhs);
        const rt = typeOf(rhs);
        if (lt2.kind !== rt.kind || !(lt2.kind === "string" || lt2.kind === "number")) {
          throw new RuntimeError(`Expected arguments for "${op}" to be (string, string) or (number, number), but found (${lt2.kind}, ${rt.kind}) instead.`);
        }
      }
      if (this.collator && !isOrderComparison && this.hasUntypedArgument) {
        const lt2 = typeOf(lhs);
        const rt = typeOf(rhs);
        if (lt2.kind !== "string" || rt.kind !== "string") {
          return compareBasic(ctx, lhs, rhs);
        }
      }
      return this.collator ? compareWithCollator(ctx, lhs, rhs, this.collator.evaluate(ctx)) : compareBasic(ctx, lhs, rhs);
    }
    eachChild(fn) {
      fn(this.lhs);
      fn(this.rhs);
      if (this.collator) {
        fn(this.collator);
      }
    }
    outputDefined() {
      return true;
    }
    serialize() {
      const serialized = [op];
      this.eachChild((child) => {
        serialized.push(child.serialize());
      });
      return serialized;
    }
  };
}
var Equals = makeComparison("==", eq, eqCollate);
var NotEquals = makeComparison("!=", neq, neqCollate);
var LessThan = makeComparison("<", lt, ltCollate);
var GreaterThan = makeComparison(">", gt, gtCollate);
var LessThanOrEqual = makeComparison("<=", lteq, lteqCollate);
var GreaterThanOrEqual = makeComparison(">=", gteq, gteqCollate);
var NumberFormat = class {
  constructor(number2, locale, currency, minFractionDigits, maxFractionDigits) {
    this.type = StringType;
    this.number = number2;
    this.locale = locale;
    this.currency = currency;
    this.minFractionDigits = minFractionDigits;
    this.maxFractionDigits = maxFractionDigits;
  }
  static parse(args, context) {
    if (args.length !== 3)
      return context.error(`Expected two arguments.`);
    const number2 = context.parse(args[1], 1, NumberType);
    if (!number2)
      return null;
    const options = args[2];
    if (typeof options !== "object" || Array.isArray(options))
      return context.error(`NumberFormat options argument must be an object.`);
    let locale = null;
    if (options["locale"]) {
      locale = context.parse(options["locale"], 1, StringType);
      if (!locale)
        return null;
    }
    let currency = null;
    if (options["currency"]) {
      currency = context.parse(options["currency"], 1, StringType);
      if (!currency)
        return null;
    }
    let minFractionDigits = null;
    if (options["min-fraction-digits"]) {
      minFractionDigits = context.parse(options["min-fraction-digits"], 1, NumberType);
      if (!minFractionDigits)
        return null;
    }
    let maxFractionDigits = null;
    if (options["max-fraction-digits"]) {
      maxFractionDigits = context.parse(options["max-fraction-digits"], 1, NumberType);
      if (!maxFractionDigits)
        return null;
    }
    return new NumberFormat(number2, locale, currency, minFractionDigits, maxFractionDigits);
  }
  evaluate(ctx) {
    return new Intl.NumberFormat(this.locale ? this.locale.evaluate(ctx) : [], {
      style: this.currency ? "currency" : "decimal",
      currency: this.currency ? this.currency.evaluate(ctx) : void 0,
      minimumFractionDigits: this.minFractionDigits ? this.minFractionDigits.evaluate(ctx) : void 0,
      maximumFractionDigits: this.maxFractionDigits ? this.maxFractionDigits.evaluate(ctx) : void 0
    }).format(this.number.evaluate(ctx));
  }
  eachChild(fn) {
    fn(this.number);
    if (this.locale) {
      fn(this.locale);
    }
    if (this.currency) {
      fn(this.currency);
    }
    if (this.minFractionDigits) {
      fn(this.minFractionDigits);
    }
    if (this.maxFractionDigits) {
      fn(this.maxFractionDigits);
    }
  }
  outputDefined() {
    return false;
  }
  serialize() {
    const options = {};
    if (this.locale) {
      options["locale"] = this.locale.serialize();
    }
    if (this.currency) {
      options["currency"] = this.currency.serialize();
    }
    if (this.minFractionDigits) {
      options["min-fraction-digits"] = this.minFractionDigits.serialize();
    }
    if (this.maxFractionDigits) {
      options["max-fraction-digits"] = this.maxFractionDigits.serialize();
    }
    return [
      "number-format",
      this.number.serialize(),
      options
    ];
  }
};
var Length = class {
  constructor(input) {
    this.type = NumberType;
    this.input = input;
  }
  static parse(args, context) {
    if (args.length !== 2)
      return context.error(`Expected 1 argument, but found ${args.length - 1} instead.`);
    const input = context.parse(args[1], 1);
    if (!input)
      return null;
    if (input.type.kind !== "array" && input.type.kind !== "string" && input.type.kind !== "value")
      return context.error(`Expected argument of type string or array, but found ${toString(input.type)} instead.`);
    return new Length(input);
  }
  evaluate(ctx) {
    const input = this.input.evaluate(ctx);
    if (typeof input === "string") {
      return input.length;
    } else if (Array.isArray(input)) {
      return input.length;
    } else {
      throw new RuntimeError(`Expected value to be of type string or array, but found ${toString(typeOf(input))} instead.`);
    }
  }
  eachChild(fn) {
    fn(this.input);
  }
  outputDefined() {
    return false;
  }
  serialize() {
    const serialized = ["length"];
    this.eachChild((child) => {
      serialized.push(child.serialize());
    });
    return serialized;
  }
};
var expressions = {
  "==": Equals,
  "!=": NotEquals,
  ">": GreaterThan,
  "<": LessThan,
  ">=": GreaterThanOrEqual,
  "<=": LessThanOrEqual,
  "array": Assertion,
  "at": At,
  "boolean": Assertion,
  "case": Case,
  "coalesce": Coalesce,
  "collator": CollatorExpression,
  "format": FormatExpression,
  "image": ImageExpression,
  "in": In,
  "index-of": IndexOf,
  "interpolate": Interpolate,
  "interpolate-hcl": Interpolate,
  "interpolate-lab": Interpolate,
  "length": Length,
  "let": Let,
  "literal": Literal,
  "match": Match,
  "number": Assertion,
  "number-format": NumberFormat,
  "object": Assertion,
  "slice": Slice,
  "step": Step,
  "string": Assertion,
  "to-boolean": Coercion,
  "to-color": Coercion,
  "to-number": Coercion,
  "to-string": Coercion,
  "var": Var,
  "within": Within
};
function rgba(ctx, [r, g, b, a]) {
  r = r.evaluate(ctx);
  g = g.evaluate(ctx);
  b = b.evaluate(ctx);
  const alpha = a ? a.evaluate(ctx) : 1;
  const error2 = validateRGBA(r, g, b, alpha);
  if (error2)
    throw new RuntimeError(error2);
  return new Color(r / 255 * alpha, g / 255 * alpha, b / 255 * alpha, alpha);
}
function has(key, obj) {
  return key in obj;
}
function get2(key, obj) {
  const v = obj[key];
  return typeof v === "undefined" ? null : v;
}
function binarySearch(v, a, i, j) {
  while (i <= j) {
    const m = i + j >> 1;
    if (a[m] === v)
      return true;
    if (a[m] > v)
      j = m - 1;
    else
      i = m + 1;
  }
  return false;
}
function varargs(type) {
  return { type };
}
CompoundExpression.register(expressions, {
  "error": [
    ErrorType,
    [StringType],
    (ctx, [v]) => {
      throw new RuntimeError(v.evaluate(ctx));
    }
  ],
  "typeof": [
    StringType,
    [ValueType],
    (ctx, [v]) => toString(typeOf(v.evaluate(ctx)))
  ],
  "to-rgba": [
    array(NumberType, 4),
    [ColorType],
    (ctx, [v]) => {
      return v.evaluate(ctx).toArray();
    }
  ],
  "rgb": [
    ColorType,
    [
      NumberType,
      NumberType,
      NumberType
    ],
    rgba
  ],
  "rgba": [
    ColorType,
    [
      NumberType,
      NumberType,
      NumberType,
      NumberType
    ],
    rgba
  ],
  "has": {
    type: BooleanType,
    overloads: [
      [
        [StringType],
        (ctx, [key]) => has(key.evaluate(ctx), ctx.properties())
      ],
      [
        [
          StringType,
          ObjectType
        ],
        (ctx, [key, obj]) => has(key.evaluate(ctx), obj.evaluate(ctx))
      ]
    ]
  },
  "get": {
    type: ValueType,
    overloads: [
      [
        [StringType],
        (ctx, [key]) => get2(key.evaluate(ctx), ctx.properties())
      ],
      [
        [
          StringType,
          ObjectType
        ],
        (ctx, [key, obj]) => get2(key.evaluate(ctx), obj.evaluate(ctx))
      ]
    ]
  },
  "feature-state": [
    ValueType,
    [StringType],
    (ctx, [key]) => get2(key.evaluate(ctx), ctx.featureState || {})
  ],
  "properties": [
    ObjectType,
    [],
    (ctx) => ctx.properties()
  ],
  "geometry-type": [
    StringType,
    [],
    (ctx) => ctx.geometryType()
  ],
  "id": [
    ValueType,
    [],
    (ctx) => ctx.id()
  ],
  "zoom": [
    NumberType,
    [],
    (ctx) => ctx.globals.zoom
  ],
  "heatmap-density": [
    NumberType,
    [],
    (ctx) => ctx.globals.heatmapDensity || 0
  ],
  "line-progress": [
    NumberType,
    [],
    (ctx) => ctx.globals.lineProgress || 0
  ],
  "sky-radial-progress": [
    NumberType,
    [],
    (ctx) => ctx.globals.skyRadialProgress || 0
  ],
  "accumulated": [
    ValueType,
    [],
    (ctx) => ctx.globals.accumulated === void 0 ? null : ctx.globals.accumulated
  ],
  "+": [
    NumberType,
    varargs(NumberType),
    (ctx, args) => {
      let result = 0;
      for (const arg of args) {
        result += arg.evaluate(ctx);
      }
      return result;
    }
  ],
  "*": [
    NumberType,
    varargs(NumberType),
    (ctx, args) => {
      let result = 1;
      for (const arg of args) {
        result *= arg.evaluate(ctx);
      }
      return result;
    }
  ],
  "-": {
    type: NumberType,
    overloads: [
      [
        [
          NumberType,
          NumberType
        ],
        (ctx, [a, b]) => a.evaluate(ctx) - b.evaluate(ctx)
      ],
      [
        [NumberType],
        (ctx, [a]) => -a.evaluate(ctx)
      ]
    ]
  },
  "/": [
    NumberType,
    [
      NumberType,
      NumberType
    ],
    (ctx, [a, b]) => a.evaluate(ctx) / b.evaluate(ctx)
  ],
  "%": [
    NumberType,
    [
      NumberType,
      NumberType
    ],
    (ctx, [a, b]) => a.evaluate(ctx) % b.evaluate(ctx)
  ],
  "ln2": [
    NumberType,
    [],
    () => Math.LN2
  ],
  "pi": [
    NumberType,
    [],
    () => Math.PI
  ],
  "e": [
    NumberType,
    [],
    () => Math.E
  ],
  "^": [
    NumberType,
    [
      NumberType,
      NumberType
    ],
    (ctx, [b, e]) => Math.pow(b.evaluate(ctx), e.evaluate(ctx))
  ],
  "sqrt": [
    NumberType,
    [NumberType],
    (ctx, [x]) => Math.sqrt(x.evaluate(ctx))
  ],
  "log10": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.log(n.evaluate(ctx)) / Math.LN10
  ],
  "ln": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.log(n.evaluate(ctx))
  ],
  "log2": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.log(n.evaluate(ctx)) / Math.LN2
  ],
  "sin": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.sin(n.evaluate(ctx))
  ],
  "cos": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.cos(n.evaluate(ctx))
  ],
  "tan": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.tan(n.evaluate(ctx))
  ],
  "asin": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.asin(n.evaluate(ctx))
  ],
  "acos": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.acos(n.evaluate(ctx))
  ],
  "atan": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.atan(n.evaluate(ctx))
  ],
  "min": [
    NumberType,
    varargs(NumberType),
    (ctx, args) => Math.min(...args.map((arg) => arg.evaluate(ctx)))
  ],
  "max": [
    NumberType,
    varargs(NumberType),
    (ctx, args) => Math.max(...args.map((arg) => arg.evaluate(ctx)))
  ],
  "abs": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.abs(n.evaluate(ctx))
  ],
  "round": [
    NumberType,
    [NumberType],
    (ctx, [n]) => {
      const v = n.evaluate(ctx);
      return v < 0 ? -Math.round(-v) : Math.round(v);
    }
  ],
  "floor": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.floor(n.evaluate(ctx))
  ],
  "ceil": [
    NumberType,
    [NumberType],
    (ctx, [n]) => Math.ceil(n.evaluate(ctx))
  ],
  "filter-==": [
    BooleanType,
    [
      StringType,
      ValueType
    ],
    (ctx, [k, v]) => ctx.properties()[k.value] === v.value
  ],
  "filter-id-==": [
    BooleanType,
    [ValueType],
    (ctx, [v]) => ctx.id() === v.value
  ],
  "filter-type-==": [
    BooleanType,
    [StringType],
    (ctx, [v]) => ctx.geometryType() === v.value
  ],
  "filter-<": [
    BooleanType,
    [
      StringType,
      ValueType
    ],
    (ctx, [k, v]) => {
      const a = ctx.properties()[k.value];
      const b = v.value;
      return typeof a === typeof b && a < b;
    }
  ],
  "filter-id-<": [
    BooleanType,
    [ValueType],
    (ctx, [v]) => {
      const a = ctx.id();
      const b = v.value;
      return typeof a === typeof b && a < b;
    }
  ],
  "filter->": [
    BooleanType,
    [
      StringType,
      ValueType
    ],
    (ctx, [k, v]) => {
      const a = ctx.properties()[k.value];
      const b = v.value;
      return typeof a === typeof b && a > b;
    }
  ],
  "filter-id->": [
    BooleanType,
    [ValueType],
    (ctx, [v]) => {
      const a = ctx.id();
      const b = v.value;
      return typeof a === typeof b && a > b;
    }
  ],
  "filter-<=": [
    BooleanType,
    [
      StringType,
      ValueType
    ],
    (ctx, [k, v]) => {
      const a = ctx.properties()[k.value];
      const b = v.value;
      return typeof a === typeof b && a <= b;
    }
  ],
  "filter-id-<=": [
    BooleanType,
    [ValueType],
    (ctx, [v]) => {
      const a = ctx.id();
      const b = v.value;
      return typeof a === typeof b && a <= b;
    }
  ],
  "filter->=": [
    BooleanType,
    [
      StringType,
      ValueType
    ],
    (ctx, [k, v]) => {
      const a = ctx.properties()[k.value];
      const b = v.value;
      return typeof a === typeof b && a >= b;
    }
  ],
  "filter-id->=": [
    BooleanType,
    [ValueType],
    (ctx, [v]) => {
      const a = ctx.id();
      const b = v.value;
      return typeof a === typeof b && a >= b;
    }
  ],
  "filter-has": [
    BooleanType,
    [ValueType],
    (ctx, [k]) => k.value in ctx.properties()
  ],
  "filter-has-id": [
    BooleanType,
    [],
    (ctx) => ctx.id() !== null && ctx.id() !== void 0
  ],
  "filter-type-in": [
    BooleanType,
    [array(StringType)],
    (ctx, [v]) => v.value.indexOf(ctx.geometryType()) >= 0
  ],
  "filter-id-in": [
    BooleanType,
    [array(ValueType)],
    (ctx, [v]) => v.value.indexOf(ctx.id()) >= 0
  ],
  "filter-in-small": [
    BooleanType,
    [
      StringType,
      array(ValueType)
    ],
    (ctx, [k, v]) => v.value.indexOf(ctx.properties()[k.value]) >= 0
  ],
  "filter-in-large": [
    BooleanType,
    [
      StringType,
      array(ValueType)
    ],
    (ctx, [k, v]) => binarySearch(ctx.properties()[k.value], v.value, 0, v.value.length - 1)
  ],
  "all": {
    type: BooleanType,
    overloads: [
      [
        [
          BooleanType,
          BooleanType
        ],
        (ctx, [a, b]) => a.evaluate(ctx) && b.evaluate(ctx)
      ],
      [
        varargs(BooleanType),
        (ctx, args) => {
          for (const arg of args) {
            if (!arg.evaluate(ctx))
              return false;
          }
          return true;
        }
      ]
    ]
  },
  "any": {
    type: BooleanType,
    overloads: [
      [
        [
          BooleanType,
          BooleanType
        ],
        (ctx, [a, b]) => a.evaluate(ctx) || b.evaluate(ctx)
      ],
      [
        varargs(BooleanType),
        (ctx, args) => {
          for (const arg of args) {
            if (arg.evaluate(ctx))
              return true;
          }
          return false;
        }
      ]
    ]
  },
  "!": [
    BooleanType,
    [BooleanType],
    (ctx, [b]) => !b.evaluate(ctx)
  ],
  "is-supported-script": [
    BooleanType,
    [StringType],
    (ctx, [s]) => {
      const isSupportedScript = ctx.globals && ctx.globals.isSupportedScript;
      if (isSupportedScript) {
        return isSupportedScript(s.evaluate(ctx));
      }
      return true;
    }
  ],
  "upcase": [
    StringType,
    [StringType],
    (ctx, [s]) => s.evaluate(ctx).toUpperCase()
  ],
  "downcase": [
    StringType,
    [StringType],
    (ctx, [s]) => s.evaluate(ctx).toLowerCase()
  ],
  "concat": [
    StringType,
    varargs(ValueType),
    (ctx, args) => args.map((arg) => toString$1(arg.evaluate(ctx))).join("")
  ],
  "resolved-locale": [
    StringType,
    [CollatorType],
    (ctx, [collator]) => collator.evaluate(ctx).resolvedLocale()
  ]
});
function success(value) {
  return {
    result: "success",
    value
  };
}
function error(value) {
  return {
    result: "error",
    value
  };
}
function supportsPropertyExpression(spec) {
  return spec["property-type"] === "data-driven" || spec["property-type"] === "cross-faded-data-driven";
}
function supportsZoomExpression(spec) {
  return !!spec.expression && spec.expression.parameters.indexOf("zoom") > -1;
}
function supportsInterpolation(spec) {
  return !!spec.expression && spec.expression.interpolated;
}
function getType(val) {
  if (val instanceof Number) {
    return "number";
  } else if (val instanceof String) {
    return "string";
  } else if (val instanceof Boolean) {
    return "boolean";
  } else if (Array.isArray(val)) {
    return "array";
  } else if (val === null) {
    return "null";
  } else {
    return typeof val;
  }
}
function isFunction$1(value) {
  return typeof value === "object" && value !== null && !Array.isArray(value);
}
function identityFunction(x) {
  return x;
}
function createFunction(parameters, propertySpec) {
  const isColor = propertySpec.type === "color";
  const zoomAndFeatureDependent = parameters.stops && typeof parameters.stops[0][0] === "object";
  const featureDependent = zoomAndFeatureDependent || parameters.property !== void 0;
  const zoomDependent = zoomAndFeatureDependent || !featureDependent;
  const type = parameters.type || (supportsInterpolation(propertySpec) ? "exponential" : "interval");
  if (isColor) {
    parameters = extend2({}, parameters);
    if (parameters.stops) {
      parameters.stops = parameters.stops.map((stop) => {
        return [
          stop[0],
          Color.parse(stop[1])
        ];
      });
    }
    if (parameters.default) {
      parameters.default = Color.parse(parameters.default);
    } else {
      parameters.default = Color.parse(propertySpec.default);
    }
  }
  if (parameters.colorSpace && parameters.colorSpace !== "rgb" && !colorSpaces[parameters.colorSpace]) {
    throw new Error(`Unknown color space: ${parameters.colorSpace}`);
  }
  let innerFun;
  let hashedStops;
  let categoricalKeyType;
  if (type === "exponential") {
    innerFun = evaluateExponentialFunction;
  } else if (type === "interval") {
    innerFun = evaluateIntervalFunction;
  } else if (type === "categorical") {
    innerFun = evaluateCategoricalFunction;
    hashedStops = Object.create(null);
    for (const stop of parameters.stops) {
      hashedStops[stop[0]] = stop[1];
    }
    categoricalKeyType = typeof parameters.stops[0][0];
  } else if (type === "identity") {
    innerFun = evaluateIdentityFunction;
  } else {
    throw new Error(`Unknown function type "${type}"`);
  }
  if (zoomAndFeatureDependent) {
    const featureFunctions = {};
    const zoomStops = [];
    for (let s = 0; s < parameters.stops.length; s++) {
      const stop = parameters.stops[s];
      const zoom = stop[0].zoom;
      if (featureFunctions[zoom] === void 0) {
        featureFunctions[zoom] = {
          zoom,
          type: parameters.type,
          property: parameters.property,
          default: parameters.default,
          stops: []
        };
        zoomStops.push(zoom);
      }
      featureFunctions[zoom].stops.push([
        stop[0].value,
        stop[1]
      ]);
    }
    const featureFunctionStops = [];
    for (const z of zoomStops) {
      featureFunctionStops.push([
        featureFunctions[z].zoom,
        createFunction(featureFunctions[z], propertySpec)
      ]);
    }
    const interpolationType = { name: "linear" };
    return {
      kind: "composite",
      interpolationType,
      interpolationFactor: Interpolate.interpolationFactor.bind(void 0, interpolationType),
      zoomStops: featureFunctionStops.map((s) => s[0]),
      evaluate({ zoom }, properties) {
        return evaluateExponentialFunction({
          stops: featureFunctionStops,
          base: parameters.base
        }, propertySpec, zoom).evaluate(zoom, properties);
      }
    };
  } else if (zoomDependent) {
    const interpolationType = type === "exponential" ? {
      name: "exponential",
      base: parameters.base !== void 0 ? parameters.base : 1
    } : null;
    return {
      kind: "camera",
      interpolationType,
      interpolationFactor: Interpolate.interpolationFactor.bind(void 0, interpolationType),
      zoomStops: parameters.stops.map((s) => s[0]),
      evaluate: ({ zoom }) => innerFun(parameters, propertySpec, zoom, hashedStops, categoricalKeyType)
    };
  } else {
    return {
      kind: "source",
      evaluate(_, feature) {
        const value = feature && feature.properties ? feature.properties[parameters.property] : void 0;
        if (value === void 0) {
          return coalesce(parameters.default, propertySpec.default);
        }
        return innerFun(parameters, propertySpec, value, hashedStops, categoricalKeyType);
      }
    };
  }
}
function coalesce(a, b, c) {
  if (a !== void 0)
    return a;
  if (b !== void 0)
    return b;
  if (c !== void 0)
    return c;
}
function evaluateCategoricalFunction(parameters, propertySpec, input, hashedStops, keyType) {
  const evaluated = typeof input === keyType ? hashedStops[input] : void 0;
  return coalesce(evaluated, parameters.default, propertySpec.default);
}
function evaluateIntervalFunction(parameters, propertySpec, input) {
  if (getType(input) !== "number")
    return coalesce(parameters.default, propertySpec.default);
  const n = parameters.stops.length;
  if (n === 1)
    return parameters.stops[0][1];
  if (input <= parameters.stops[0][0])
    return parameters.stops[0][1];
  if (input >= parameters.stops[n - 1][0])
    return parameters.stops[n - 1][1];
  const index = findStopLessThanOrEqualTo(parameters.stops.map((stop) => stop[0]), input);
  return parameters.stops[index][1];
}
function evaluateExponentialFunction(parameters, propertySpec, input) {
  const base = parameters.base !== void 0 ? parameters.base : 1;
  if (getType(input) !== "number")
    return coalesce(parameters.default, propertySpec.default);
  const n = parameters.stops.length;
  if (n === 1)
    return parameters.stops[0][1];
  if (input <= parameters.stops[0][0])
    return parameters.stops[0][1];
  if (input >= parameters.stops[n - 1][0])
    return parameters.stops[n - 1][1];
  const index = findStopLessThanOrEqualTo(parameters.stops.map((stop) => stop[0]), input);
  const t = interpolationFactor(input, base, parameters.stops[index][0], parameters.stops[index + 1][0]);
  const outputLower = parameters.stops[index][1];
  const outputUpper = parameters.stops[index + 1][1];
  let interp = interpolate[propertySpec.type] || identityFunction;
  if (parameters.colorSpace && parameters.colorSpace !== "rgb") {
    const colorspace = colorSpaces[parameters.colorSpace];
    interp = (a, b) => colorspace.reverse(colorspace.interpolate(colorspace.forward(a), colorspace.forward(b), t));
  }
  if (typeof outputLower.evaluate === "function") {
    return {
      evaluate(...args) {
        const evaluatedLower = outputLower.evaluate.apply(void 0, args);
        const evaluatedUpper = outputUpper.evaluate.apply(void 0, args);
        if (evaluatedLower === void 0 || evaluatedUpper === void 0) {
          return void 0;
        }
        return interp(evaluatedLower, evaluatedUpper, t);
      }
    };
  }
  return interp(outputLower, outputUpper, t);
}
function evaluateIdentityFunction(parameters, propertySpec, input) {
  if (propertySpec.type === "color") {
    input = Color.parse(input);
  } else if (propertySpec.type === "formatted") {
    input = Formatted.fromString(input.toString());
  } else if (propertySpec.type === "resolvedImage") {
    input = ResolvedImage.fromString(input.toString());
  } else if (getType(input) !== propertySpec.type && (propertySpec.type !== "enum" || !propertySpec.values[input])) {
    input = void 0;
  }
  return coalesce(input, parameters.default, propertySpec.default);
}
function interpolationFactor(input, base, lowerValue, upperValue) {
  const difference = upperValue - lowerValue;
  const progress = input - lowerValue;
  if (difference === 0) {
    return 0;
  } else if (base === 1) {
    return progress / difference;
  } else {
    return (Math.pow(base, progress) - 1) / (Math.pow(base, difference) - 1);
  }
}
var StyleExpression = class {
  constructor(expression2, propertySpec) {
    this.expression = expression2;
    this._warningHistory = {};
    this._evaluator = new EvaluationContext();
    this._defaultValue = propertySpec ? getDefaultValue(propertySpec) : null;
    this._enumValues = propertySpec && propertySpec.type === "enum" ? propertySpec.values : null;
  }
  evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {
    this._evaluator.globals = globals;
    this._evaluator.feature = feature;
    this._evaluator.featureState = featureState;
    this._evaluator.canonical = canonical;
    this._evaluator.availableImages = availableImages || null;
    this._evaluator.formattedSection = formattedSection;
    return this.expression.evaluate(this._evaluator);
  }
  evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {
    this._evaluator.globals = globals;
    this._evaluator.feature = feature || null;
    this._evaluator.featureState = featureState || null;
    this._evaluator.canonical = canonical;
    this._evaluator.availableImages = availableImages || null;
    this._evaluator.formattedSection = formattedSection || null;
    try {
      const val = this.expression.evaluate(this._evaluator);
      if (val === null || val === void 0 || typeof val === "number" && val !== val) {
        return this._defaultValue;
      }
      if (this._enumValues && !(val in this._enumValues)) {
        throw new RuntimeError(`Expected value to be one of ${Object.keys(this._enumValues).map((v) => JSON.stringify(v)).join(", ")}, but found ${JSON.stringify(val)} instead.`);
      }
      return val;
    } catch (e) {
      if (!this._warningHistory[e.message]) {
        this._warningHistory[e.message] = true;
        if (typeof console !== "undefined") {
          console.warn(e.message);
        }
      }
      return this._defaultValue;
    }
  }
};
function isExpression(expression2) {
  return Array.isArray(expression2) && expression2.length > 0 && typeof expression2[0] === "string" && expression2[0] in expressions;
}
function createExpression(expression2, propertySpec) {
  const parser = new ParsingContext(expressions, [], propertySpec ? getExpectedType(propertySpec) : void 0);
  const parsed = parser.parse(expression2, void 0, void 0, void 0, propertySpec && propertySpec.type === "string" ? { typeAnnotation: "coerce" } : void 0);
  if (!parsed) {
    return error(parser.errors);
  }
  return success(new StyleExpression(parsed, propertySpec));
}
var ZoomConstantExpression = class {
  constructor(kind, expression2) {
    this.kind = kind;
    this._styleExpression = expression2;
    this.isStateDependent = kind !== "constant" && !isStateConstant(expression2.expression);
  }
  evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {
    return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);
  }
  evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {
    return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);
  }
};
var ZoomDependentExpression = class {
  constructor(kind, expression2, zoomStops, interpolationType) {
    this.kind = kind;
    this.zoomStops = zoomStops;
    this._styleExpression = expression2;
    this.isStateDependent = kind !== "camera" && !isStateConstant(expression2.expression);
    this.interpolationType = interpolationType;
  }
  evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection) {
    return this._styleExpression.evaluateWithoutErrorHandling(globals, feature, featureState, canonical, availableImages, formattedSection);
  }
  evaluate(globals, feature, featureState, canonical, availableImages, formattedSection) {
    return this._styleExpression.evaluate(globals, feature, featureState, canonical, availableImages, formattedSection);
  }
  interpolationFactor(input, lower, upper) {
    if (this.interpolationType) {
      return Interpolate.interpolationFactor(this.interpolationType, input, lower, upper);
    } else {
      return 0;
    }
  }
};
function createPropertyExpression(expression2, propertySpec) {
  expression2 = createExpression(expression2, propertySpec);
  if (expression2.result === "error") {
    return expression2;
  }
  const parsed = expression2.value.expression;
  const isFeatureConstant$1 = isFeatureConstant(parsed);
  if (!isFeatureConstant$1 && !supportsPropertyExpression(propertySpec)) {
    return error([new ParsingError("", "data expressions not supported")]);
  }
  const isZoomConstant = isGlobalPropertyConstant(parsed, ["zoom"]);
  if (!isZoomConstant && !supportsZoomExpression(propertySpec)) {
    return error([new ParsingError("", "zoom expressions not supported")]);
  }
  const zoomCurve = findZoomCurve(parsed);
  if (!zoomCurve && !isZoomConstant) {
    return error([new ParsingError("", '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.')]);
  } else if (zoomCurve instanceof ParsingError) {
    return error([zoomCurve]);
  } else if (zoomCurve instanceof Interpolate && !supportsInterpolation(propertySpec)) {
    return error([new ParsingError("", '"interpolate" expressions cannot be used with this property')]);
  }
  if (!zoomCurve) {
    return success(isFeatureConstant$1 ? new ZoomConstantExpression("constant", expression2.value) : new ZoomConstantExpression("source", expression2.value));
  }
  const interpolationType = zoomCurve instanceof Interpolate ? zoomCurve.interpolation : void 0;
  return success(isFeatureConstant$1 ? new ZoomDependentExpression("camera", expression2.value, zoomCurve.labels, interpolationType) : new ZoomDependentExpression("composite", expression2.value, zoomCurve.labels, interpolationType));
}
var StylePropertyFunction = class {
  constructor(parameters, specification) {
    this._parameters = parameters;
    this._specification = specification;
    extend2(this, createFunction(this._parameters, this._specification));
  }
  static deserialize(serialized) {
    return new StylePropertyFunction(serialized._parameters, serialized._specification);
  }
  static serialize(input) {
    return {
      _parameters: input._parameters,
      _specification: input._specification
    };
  }
};
function normalizePropertyExpression(value, specification) {
  if (isFunction$1(value)) {
    return new StylePropertyFunction(value, specification);
  } else if (isExpression(value)) {
    const expression2 = createPropertyExpression(value, specification);
    if (expression2.result === "error") {
      throw new Error(expression2.value.map((err) => `${err.key}: ${err.message}`).join(", "));
    }
    return expression2.value;
  } else {
    let constant = value;
    if (typeof value === "string" && specification.type === "color") {
      constant = Color.parse(value);
    }
    return {
      kind: "constant",
      evaluate: () => constant
    };
  }
}
function findZoomCurve(expression2) {
  let result = null;
  if (expression2 instanceof Let) {
    result = findZoomCurve(expression2.result);
  } else if (expression2 instanceof Coalesce) {
    for (const arg of expression2.args) {
      result = findZoomCurve(arg);
      if (result) {
        break;
      }
    }
  } else if ((expression2 instanceof Step || expression2 instanceof Interpolate) && expression2.input instanceof CompoundExpression && expression2.input.name === "zoom") {
    result = expression2;
  }
  if (result instanceof ParsingError) {
    return result;
  }
  expression2.eachChild((child) => {
    const childResult = findZoomCurve(child);
    if (childResult instanceof ParsingError) {
      result = childResult;
    } else if (!result && childResult) {
      result = new ParsingError("", '"zoom" expression may only be used as input to a top-level "step" or "interpolate" expression.');
    } else if (result && childResult && result !== childResult) {
      result = new ParsingError("", 'Only one zoom-based "step" or "interpolate" subexpression may be used in an expression.');
    }
  });
  return result;
}
function getExpectedType(spec) {
  const types3 = {
    color: ColorType,
    string: StringType,
    number: NumberType,
    enum: StringType,
    boolean: BooleanType,
    formatted: FormattedType,
    resolvedImage: ResolvedImageType
  };
  if (spec.type === "array") {
    return array(types3[spec.value] || ValueType, spec.length);
  }
  return types3[spec.type];
}
function getDefaultValue(spec) {
  if (spec.type === "color" && isFunction$1(spec.default)) {
    return new Color(0, 0, 0, 0);
  } else if (spec.type === "color") {
    return Color.parse(spec.default) || null;
  } else if (spec.default === void 0) {
    return null;
  } else {
    return spec.default;
  }
}
function convertLiteral(value) {
  return typeof value === "object" ? [
    "literal",
    value
  ] : value;
}
function convertFunction(parameters, propertySpec) {
  let stops = parameters.stops;
  if (!stops) {
    return convertIdentityFunction(parameters, propertySpec);
  }
  const zoomAndFeatureDependent = stops && typeof stops[0][0] === "object";
  const featureDependent = zoomAndFeatureDependent || parameters.property !== void 0;
  const zoomDependent = zoomAndFeatureDependent || !featureDependent;
  stops = stops.map((stop) => {
    if (!featureDependent && propertySpec.tokens && typeof stop[1] === "string") {
      return [
        stop[0],
        convertTokenString(stop[1])
      ];
    }
    return [
      stop[0],
      convertLiteral(stop[1])
    ];
  });
  if (zoomAndFeatureDependent) {
    return convertZoomAndPropertyFunction(parameters, propertySpec, stops);
  } else if (zoomDependent) {
    return convertZoomFunction(parameters, propertySpec, stops);
  } else {
    return convertPropertyFunction(parameters, propertySpec, stops);
  }
}
function convertIdentityFunction(parameters, propertySpec) {
  const get3 = [
    "get",
    parameters.property
  ];
  if (parameters.default === void 0) {
    return propertySpec.type === "string" ? [
      "string",
      get3
    ] : get3;
  } else if (propertySpec.type === "enum") {
    return [
      "match",
      get3,
      Object.keys(propertySpec.values),
      get3,
      parameters.default
    ];
  } else {
    const expression2 = [
      propertySpec.type === "color" ? "to-color" : propertySpec.type,
      get3,
      convertLiteral(parameters.default)
    ];
    if (propertySpec.type === "array") {
      expression2.splice(1, 0, propertySpec.value, propertySpec.length || null);
    }
    return expression2;
  }
}
function getInterpolateOperator(parameters) {
  switch (parameters.colorSpace) {
    case "hcl":
      return "interpolate-hcl";
    case "lab":
      return "interpolate-lab";
    default:
      return "interpolate";
  }
}
function convertZoomAndPropertyFunction(parameters, propertySpec, stops) {
  const featureFunctionParameters = {};
  const featureFunctionStops = {};
  const zoomStops = [];
  for (let s = 0; s < stops.length; s++) {
    const stop = stops[s];
    const zoom = stop[0].zoom;
    if (featureFunctionParameters[zoom] === void 0) {
      featureFunctionParameters[zoom] = {
        zoom,
        type: parameters.type,
        property: parameters.property,
        default: parameters.default
      };
      featureFunctionStops[zoom] = [];
      zoomStops.push(zoom);
    }
    featureFunctionStops[zoom].push([
      stop[0].value,
      stop[1]
    ]);
  }
  const functionType = getFunctionType({}, propertySpec);
  if (functionType === "exponential") {
    const expression2 = [
      getInterpolateOperator(parameters),
      ["linear"],
      ["zoom"]
    ];
    for (const z of zoomStops) {
      const output = convertPropertyFunction(featureFunctionParameters[z], propertySpec, featureFunctionStops[z]);
      appendStopPair(expression2, z, output, false);
    }
    return expression2;
  } else {
    const expression2 = [
      "step",
      ["zoom"]
    ];
    for (const z of zoomStops) {
      const output = convertPropertyFunction(featureFunctionParameters[z], propertySpec, featureFunctionStops[z]);
      appendStopPair(expression2, z, output, true);
    }
    fixupDegenerateStepCurve(expression2);
    return expression2;
  }
}
function coalesce$1(a, b) {
  if (a !== void 0)
    return a;
  if (b !== void 0)
    return b;
}
function getFallback(parameters, propertySpec) {
  const defaultValue = convertLiteral(coalesce$1(parameters.default, propertySpec.default));
  if (defaultValue === void 0 && propertySpec.type === "resolvedImage") {
    return "";
  }
  return defaultValue;
}
function convertPropertyFunction(parameters, propertySpec, stops) {
  const type = getFunctionType(parameters, propertySpec);
  const get3 = [
    "get",
    parameters.property
  ];
  if (type === "categorical" && typeof stops[0][0] === "boolean") {
    const expression2 = ["case"];
    for (const stop of stops) {
      expression2.push([
        "==",
        get3,
        stop[0]
      ], stop[1]);
    }
    expression2.push(getFallback(parameters, propertySpec));
    return expression2;
  } else if (type === "categorical") {
    const expression2 = [
      "match",
      get3
    ];
    for (const stop of stops) {
      appendStopPair(expression2, stop[0], stop[1], false);
    }
    expression2.push(getFallback(parameters, propertySpec));
    return expression2;
  } else if (type === "interval") {
    const expression2 = [
      "step",
      [
        "number",
        get3
      ]
    ];
    for (const stop of stops) {
      appendStopPair(expression2, stop[0], stop[1], true);
    }
    fixupDegenerateStepCurve(expression2);
    return parameters.default === void 0 ? expression2 : [
      "case",
      [
        "==",
        [
          "typeof",
          get3
        ],
        "number"
      ],
      expression2,
      convertLiteral(parameters.default)
    ];
  } else if (type === "exponential") {
    const base = parameters.base !== void 0 ? parameters.base : 1;
    const expression2 = [
      getInterpolateOperator(parameters),
      base === 1 ? ["linear"] : [
        "exponential",
        base
      ],
      [
        "number",
        get3
      ]
    ];
    for (const stop of stops) {
      appendStopPair(expression2, stop[0], stop[1], false);
    }
    return parameters.default === void 0 ? expression2 : [
      "case",
      [
        "==",
        [
          "typeof",
          get3
        ],
        "number"
      ],
      expression2,
      convertLiteral(parameters.default)
    ];
  } else {
    throw new Error(`Unknown property function type ${type}`);
  }
}
function convertZoomFunction(parameters, propertySpec, stops, input = ["zoom"]) {
  const type = getFunctionType(parameters, propertySpec);
  let expression2;
  let isStep = false;
  if (type === "interval") {
    expression2 = [
      "step",
      input
    ];
    isStep = true;
  } else if (type === "exponential") {
    const base = parameters.base !== void 0 ? parameters.base : 1;
    expression2 = [
      getInterpolateOperator(parameters),
      base === 1 ? ["linear"] : [
        "exponential",
        base
      ],
      input
    ];
  } else {
    throw new Error(`Unknown zoom function type "${type}"`);
  }
  for (const stop of stops) {
    appendStopPair(expression2, stop[0], stop[1], isStep);
  }
  fixupDegenerateStepCurve(expression2);
  return expression2;
}
function fixupDegenerateStepCurve(expression2) {
  if (expression2[0] === "step" && expression2.length === 3) {
    expression2.push(0);
    expression2.push(expression2[3]);
  }
}
function appendStopPair(curve, input, output, isStep) {
  if (curve.length > 3 && input === curve[curve.length - 2]) {
    return;
  }
  if (!(isStep && curve.length === 2)) {
    curve.push(input);
  }
  curve.push(output);
}
function getFunctionType(parameters, propertySpec) {
  if (parameters.type) {
    return parameters.type;
  } else {
    return propertySpec.expression.interpolated ? "exponential" : "interval";
  }
}
function convertTokenString(s) {
  const result = ["concat"];
  const re = /{([^{}]+)}/g;
  let pos = 0;
  for (let match = re.exec(s); match !== null; match = re.exec(s)) {
    const literal = s.slice(pos, re.lastIndex - match[0].length);
    pos = re.lastIndex;
    if (literal.length > 0)
      result.push(literal);
    result.push([
      "get",
      match[1]
    ]);
  }
  if (result.length === 1) {
    return s;
  }
  if (pos < s.length) {
    result.push(s.slice(pos));
  } else if (result.length === 2) {
    return [
      "to-string",
      result[1]
    ];
  }
  return result;
}
function isExpressionFilter(filter2) {
  if (filter2 === true || filter2 === false) {
    return true;
  }
  if (!Array.isArray(filter2) || filter2.length === 0) {
    return false;
  }
  switch (filter2[0]) {
    case "has":
      return filter2.length >= 2 && filter2[1] !== "$id" && filter2[1] !== "$type";
    case "in":
      return filter2.length >= 3 && (typeof filter2[1] !== "string" || Array.isArray(filter2[2]));
    case "!in":
    case "!has":
    case "none":
      return false;
    case "==":
    case "!=":
    case ">":
    case ">=":
    case "<":
    case "<=":
      return filter2.length !== 3 || (Array.isArray(filter2[1]) || Array.isArray(filter2[2]));
    case "any":
    case "all":
      for (const f of filter2.slice(1)) {
        if (!isExpressionFilter(f) && typeof f !== "boolean") {
          return false;
        }
      }
      return true;
    default:
      return true;
  }
}
var filterSpec = {
  "type": "boolean",
  "default": false,
  "transition": false,
  "property-type": "data-driven",
  "expression": {
    "interpolated": false,
    "parameters": [
      "zoom",
      "feature"
    ]
  }
};
function createFilter(filter2) {
  if (filter2 === null || filter2 === void 0) {
    return {
      filter: () => true,
      needGeometry: false
    };
  }
  if (!isExpressionFilter(filter2)) {
    filter2 = convertFilter(filter2);
  }
  const compiled = createExpression(filter2, filterSpec);
  if (compiled.result === "error") {
    throw new Error(compiled.value.map((err) => `${err.key}: ${err.message}`).join(", "));
  } else {
    const needGeometry = geometryNeeded(filter2);
    return {
      filter: (globalProperties, feature, canonical) => compiled.value.evaluate(globalProperties, feature, {}, canonical),
      needGeometry
    };
  }
}
function compare(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}
function geometryNeeded(filter2) {
  if (!Array.isArray(filter2))
    return false;
  if (filter2[0] === "within")
    return true;
  for (let index = 1; index < filter2.length; index++) {
    if (geometryNeeded(filter2[index]))
      return true;
  }
  return false;
}
function convertFilter(filter2) {
  if (!filter2)
    return true;
  const op = filter2[0];
  if (filter2.length <= 1)
    return op !== "any";
  const converted = op === "==" ? convertComparisonOp(filter2[1], filter2[2], "==") : op === "!=" ? convertNegation(convertComparisonOp(filter2[1], filter2[2], "==")) : op === "<" || op === ">" || op === "<=" || op === ">=" ? convertComparisonOp(filter2[1], filter2[2], op) : op === "any" ? convertDisjunctionOp(filter2.slice(1)) : op === "all" ? ["all"].concat(filter2.slice(1).map(convertFilter)) : op === "none" ? ["all"].concat(filter2.slice(1).map(convertFilter).map(convertNegation)) : op === "in" ? convertInOp(filter2[1], filter2.slice(2)) : op === "!in" ? convertNegation(convertInOp(filter2[1], filter2.slice(2))) : op === "has" ? convertHasOp(filter2[1]) : op === "!has" ? convertNegation(convertHasOp(filter2[1])) : op === "within" ? filter2 : true;
  return converted;
}
function convertComparisonOp(property, value, op) {
  switch (property) {
    case "$type":
      return [
        `filter-type-${op}`,
        value
      ];
    case "$id":
      return [
        `filter-id-${op}`,
        value
      ];
    default:
      return [
        `filter-${op}`,
        property,
        value
      ];
  }
}
function convertDisjunctionOp(filters) {
  return ["any"].concat(filters.map(convertFilter));
}
function convertInOp(property, values) {
  if (values.length === 0) {
    return false;
  }
  switch (property) {
    case "$type":
      return [
        `filter-type-in`,
        [
          "literal",
          values
        ]
      ];
    case "$id":
      return [
        `filter-id-in`,
        [
          "literal",
          values
        ]
      ];
    default:
      if (values.length > 200 && !values.some((v) => typeof v !== typeof values[0])) {
        return [
          "filter-in-large",
          property,
          [
            "literal",
            values.sort(compare)
          ]
        ];
      } else {
        return [
          "filter-in-small",
          property,
          [
            "literal",
            values
          ]
        ];
      }
  }
}
function convertHasOp(property) {
  switch (property) {
    case "$type":
      return true;
    case "$id":
      return [`filter-has-id`];
    default:
      return [
        `filter-has`,
        property
      ];
  }
}
function convertNegation(filter2) {
  return [
    "!",
    filter2
  ];
}
var refProperties = [
  "type",
  "source",
  "source-layer",
  "minzoom",
  "maxzoom",
  "filter",
  "layout"
];
function deref(layer2, parent) {
  const result = {};
  for (const k in layer2) {
    if (k !== "ref") {
      result[k] = layer2[k];
    }
  }
  refProperties.forEach((k) => {
    if (k in parent) {
      result[k] = parent[k];
    }
  });
  return result;
}
function derefLayers(layers) {
  layers = layers.slice();
  const map = Object.create(null);
  for (let i = 0; i < layers.length; i++) {
    map[layers[i].id] = layers[i];
  }
  for (let i = 0; i < layers.length; i++) {
    if ("ref" in layers[i]) {
      layers[i] = deref(layers[i], map[layers[i].ref]);
    }
  }
  return layers;
}
var ValidationError = class {
  constructor(key, value, message, identifier) {
    this.message = (key ? `${key}: ` : "") + message;
    if (identifier)
      this.identifier = identifier;
    if (value !== null && value !== void 0 && value.__line__) {
      this.line = value.__line__;
    }
  }
};
var ParsingError$1 = class {
  constructor(error2) {
    this.error = error2;
    this.message = error2.message;
    const match = error2.message.match(/line (\d+)/);
    this.line = match ? parseInt(match[1], 10) : 0;
  }
};
function validateConstants(options) {
  const key = options.key;
  const constants = options.value;
  if (constants) {
    return [new ValidationError(key, constants, "constants have been deprecated as of v8")];
  } else {
    return [];
  }
}
function unbundle(value) {
  if (value instanceof Number || value instanceof String || value instanceof Boolean) {
    return value.valueOf();
  } else {
    return value;
  }
}
function deepUnbundle(value) {
  if (Array.isArray(value)) {
    return value.map(deepUnbundle);
  } else if (value instanceof Object && !(value instanceof Number || value instanceof String || value instanceof Boolean)) {
    const unbundledValue = {};
    for (const key in value) {
      unbundledValue[key] = deepUnbundle(value[key]);
    }
    return unbundledValue;
  }
  return unbundle(value);
}
function validateObject(options) {
  const key = options.key;
  const object = options.value;
  const elementSpecs = options.valueSpec || {};
  const elementValidators = options.objectElementValidators || {};
  const style = options.style;
  const styleSpec = options.styleSpec;
  let errors = [];
  const type = getType(object);
  if (type !== "object") {
    return [new ValidationError(key, object, `object expected, ${type} found`)];
  }
  for (const objectKey in object) {
    const elementSpecKey = objectKey.split(".")[0];
    const elementSpec = elementSpecs[elementSpecKey] || elementSpecs["*"];
    let validateElement;
    if (elementValidators[elementSpecKey]) {
      validateElement = elementValidators[elementSpecKey];
    } else if (elementSpecs[elementSpecKey]) {
      validateElement = validate;
    } else if (elementValidators["*"]) {
      validateElement = elementValidators["*"];
    } else if (elementSpecs["*"]) {
      validateElement = validate;
    } else {
      errors.push(new ValidationError(key, object[objectKey], `unknown property "${objectKey}"`));
      continue;
    }
    errors = errors.concat(validateElement({
      key: (key ? `${key}.` : key) + objectKey,
      value: object[objectKey],
      valueSpec: elementSpec,
      style,
      styleSpec,
      object,
      objectKey
    }, object));
  }
  for (const elementSpecKey in elementSpecs) {
    if (elementValidators[elementSpecKey]) {
      continue;
    }
    if (elementSpecs[elementSpecKey].required && elementSpecs[elementSpecKey]["default"] === void 0 && object[elementSpecKey] === void 0) {
      errors.push(new ValidationError(key, object, `missing required property "${elementSpecKey}"`));
    }
  }
  return errors;
}
function validateArray(options) {
  const array2 = options.value;
  const arraySpec = options.valueSpec;
  const style = options.style;
  const styleSpec = options.styleSpec;
  const key = options.key;
  const validateArrayElement = options.arrayElementValidator || validate;
  if (getType(array2) !== "array") {
    return [new ValidationError(key, array2, `array expected, ${getType(array2)} found`)];
  }
  if (arraySpec.length && array2.length !== arraySpec.length) {
    return [new ValidationError(key, array2, `array length ${arraySpec.length} expected, length ${array2.length} found`)];
  }
  if (arraySpec["min-length"] && array2.length < arraySpec["min-length"]) {
    return [new ValidationError(key, array2, `array length at least ${arraySpec["min-length"]} expected, length ${array2.length} found`)];
  }
  let arrayElementSpec = {
    "type": arraySpec.value,
    "values": arraySpec.values,
    "minimum": arraySpec.minimum,
    "maximum": arraySpec.maximum
  };
  if (styleSpec.$version < 7) {
    arrayElementSpec.function = arraySpec.function;
  }
  if (getType(arraySpec.value) === "object") {
    arrayElementSpec = arraySpec.value;
  }
  let errors = [];
  for (let i = 0; i < array2.length; i++) {
    errors = errors.concat(validateArrayElement({
      array: array2,
      arrayIndex: i,
      value: array2[i],
      valueSpec: arrayElementSpec,
      style,
      styleSpec,
      key: `${key}[${i}]`
    }));
  }
  return errors;
}
function validateNumber(options) {
  const key = options.key;
  const value = options.value;
  const valueSpec = options.valueSpec;
  let type = getType(value);
  if (type === "number" && value !== value) {
    type = "NaN";
  }
  if (type !== "number") {
    return [new ValidationError(key, value, `number expected, ${type} found`)];
  }
  if ("minimum" in valueSpec) {
    let specMin = valueSpec.minimum;
    if (getType(valueSpec.minimum) === "array") {
      const i = options.arrayIndex;
      specMin = valueSpec.minimum[i];
    }
    if (value < specMin) {
      return [new ValidationError(key, value, `${value} is less than the minimum value ${specMin}`)];
    }
  }
  if ("maximum" in valueSpec) {
    let specMax = valueSpec.maximum;
    if (getType(valueSpec.maximum) === "array") {
      const i = options.arrayIndex;
      specMax = valueSpec.maximum[i];
    }
    if (value > specMax) {
      return [new ValidationError(key, value, `${value} is greater than the maximum value ${specMax}`)];
    }
  }
  return [];
}
function validateFunction(options) {
  const functionValueSpec = options.valueSpec;
  const functionType = unbundle(options.value.type);
  let stopKeyType;
  let stopDomainValues = {};
  let previousStopDomainValue;
  let previousStopDomainZoom;
  const isZoomFunction = functionType !== "categorical" && options.value.property === void 0;
  const isPropertyFunction = !isZoomFunction;
  const isZoomAndPropertyFunction = getType(options.value.stops) === "array" && getType(options.value.stops[0]) === "array" && getType(options.value.stops[0][0]) === "object";
  const errors = validateObject({
    key: options.key,
    value: options.value,
    valueSpec: options.styleSpec.function,
    style: options.style,
    styleSpec: options.styleSpec,
    objectElementValidators: {
      stops: validateFunctionStops,
      default: validateFunctionDefault
    }
  });
  if (functionType === "identity" && isZoomFunction) {
    errors.push(new ValidationError(options.key, options.value, 'missing required property "property"'));
  }
  if (functionType !== "identity" && !options.value.stops) {
    errors.push(new ValidationError(options.key, options.value, 'missing required property "stops"'));
  }
  if (functionType === "exponential" && options.valueSpec.expression && !supportsInterpolation(options.valueSpec)) {
    errors.push(new ValidationError(options.key, options.value, "exponential functions not supported"));
  }
  if (options.styleSpec.$version >= 8) {
    if (isPropertyFunction && !supportsPropertyExpression(options.valueSpec)) {
      errors.push(new ValidationError(options.key, options.value, "property functions not supported"));
    } else if (isZoomFunction && !supportsZoomExpression(options.valueSpec)) {
      errors.push(new ValidationError(options.key, options.value, "zoom functions not supported"));
    }
  }
  if ((functionType === "categorical" || isZoomAndPropertyFunction) && options.value.property === void 0) {
    errors.push(new ValidationError(options.key, options.value, '"property" property is required'));
  }
  return errors;
  function validateFunctionStops(options2) {
    if (functionType === "identity") {
      return [new ValidationError(options2.key, options2.value, 'identity function may not have a "stops" property')];
    }
    let errors2 = [];
    const value = options2.value;
    errors2 = errors2.concat(validateArray({
      key: options2.key,
      value,
      valueSpec: options2.valueSpec,
      style: options2.style,
      styleSpec: options2.styleSpec,
      arrayElementValidator: validateFunctionStop
    }));
    if (getType(value) === "array" && value.length === 0) {
      errors2.push(new ValidationError(options2.key, value, "array must have at least one stop"));
    }
    return errors2;
  }
  function validateFunctionStop(options2) {
    let errors2 = [];
    const value = options2.value;
    const key = options2.key;
    if (getType(value) !== "array") {
      return [new ValidationError(key, value, `array expected, ${getType(value)} found`)];
    }
    if (value.length !== 2) {
      return [new ValidationError(key, value, `array length 2 expected, length ${value.length} found`)];
    }
    if (isZoomAndPropertyFunction) {
      if (getType(value[0]) !== "object") {
        return [new ValidationError(key, value, `object expected, ${getType(value[0])} found`)];
      }
      if (value[0].zoom === void 0) {
        return [new ValidationError(key, value, "object stop key must have zoom")];
      }
      if (value[0].value === void 0) {
        return [new ValidationError(key, value, "object stop key must have value")];
      }
      if (previousStopDomainZoom && previousStopDomainZoom > unbundle(value[0].zoom)) {
        return [new ValidationError(key, value[0].zoom, "stop zoom values must appear in ascending order")];
      }
      if (unbundle(value[0].zoom) !== previousStopDomainZoom) {
        previousStopDomainZoom = unbundle(value[0].zoom);
        previousStopDomainValue = void 0;
        stopDomainValues = {};
      }
      errors2 = errors2.concat(validateObject({
        key: `${key}[0]`,
        value: value[0],
        valueSpec: { zoom: {} },
        style: options2.style,
        styleSpec: options2.styleSpec,
        objectElementValidators: {
          zoom: validateNumber,
          value: validateStopDomainValue
        }
      }));
    } else {
      errors2 = errors2.concat(validateStopDomainValue({
        key: `${key}[0]`,
        value: value[0],
        valueSpec: {},
        style: options2.style,
        styleSpec: options2.styleSpec
      }, value));
    }
    if (isExpression(deepUnbundle(value[1]))) {
      return errors2.concat([new ValidationError(`${key}[1]`, value[1], "expressions are not allowed in function stops.")]);
    }
    return errors2.concat(validate({
      key: `${key}[1]`,
      value: value[1],
      valueSpec: functionValueSpec,
      style: options2.style,
      styleSpec: options2.styleSpec
    }));
  }
  function validateStopDomainValue(options2, stop) {
    const type = getType(options2.value);
    const value = unbundle(options2.value);
    const reportValue = options2.value !== null ? options2.value : stop;
    if (!stopKeyType) {
      stopKeyType = type;
    } else if (type !== stopKeyType) {
      return [new ValidationError(options2.key, reportValue, `${type} stop domain type must match previous stop domain type ${stopKeyType}`)];
    }
    if (type !== "number" && type !== "string" && type !== "boolean") {
      return [new ValidationError(options2.key, reportValue, "stop domain value must be a number, string, or boolean")];
    }
    if (type !== "number" && functionType !== "categorical") {
      let message = `number expected, ${type} found`;
      if (supportsPropertyExpression(functionValueSpec) && functionType === void 0) {
        message += '\nIf you intended to use a categorical function, specify `"type": "categorical"`.';
      }
      return [new ValidationError(options2.key, reportValue, message)];
    }
    if (functionType === "categorical" && type === "number" && (!isFinite(value) || Math.floor(value) !== value)) {
      return [new ValidationError(options2.key, reportValue, `integer expected, found ${value}`)];
    }
    if (functionType !== "categorical" && type === "number" && previousStopDomainValue !== void 0 && value < previousStopDomainValue) {
      return [new ValidationError(options2.key, reportValue, "stop domain values must appear in ascending order")];
    } else {
      previousStopDomainValue = value;
    }
    if (functionType === "categorical" && value in stopDomainValues) {
      return [new ValidationError(options2.key, reportValue, "stop domain values must be unique")];
    } else {
      stopDomainValues[value] = true;
    }
    return [];
  }
  function validateFunctionDefault(options2) {
    return validate({
      key: options2.key,
      value: options2.value,
      valueSpec: functionValueSpec,
      style: options2.style,
      styleSpec: options2.styleSpec
    });
  }
}
function validateExpression(options) {
  const expression2 = (options.expressionContext === "property" ? createPropertyExpression : createExpression)(deepUnbundle(options.value), options.valueSpec);
  if (expression2.result === "error") {
    return expression2.value.map((error2) => {
      return new ValidationError(`${options.key}${error2.key}`, options.value, error2.message);
    });
  }
  const expressionObj = expression2.value.expression || expression2.value._styleExpression.expression;
  if (options.expressionContext === "property" && options.propertyKey === "text-font" && !expressionObj.outputDefined()) {
    return [new ValidationError(options.key, options.value, `Invalid data expression for "${options.propertyKey}". Output values must be contained as literals within the expression.`)];
  }
  if (options.expressionContext === "property" && options.propertyType === "layout" && !isStateConstant(expressionObj)) {
    return [new ValidationError(options.key, options.value, '"feature-state" data expressions are not supported with layout properties.')];
  }
  if (options.expressionContext === "filter" && !isStateConstant(expressionObj)) {
    return [new ValidationError(options.key, options.value, '"feature-state" data expressions are not supported with filters.')];
  }
  if (options.expressionContext && options.expressionContext.indexOf("cluster") === 0) {
    if (!isGlobalPropertyConstant(expressionObj, [
      "zoom",
      "feature-state"
    ])) {
      return [new ValidationError(options.key, options.value, '"zoom" and "feature-state" expressions are not supported with cluster properties.')];
    }
    if (options.expressionContext === "cluster-initial" && !isFeatureConstant(expressionObj)) {
      return [new ValidationError(options.key, options.value, "Feature data expressions are not supported with initial expression part of cluster properties.")];
    }
  }
  return [];
}
function validateBoolean(options) {
  const value = options.value;
  const key = options.key;
  const type = getType(value);
  if (type !== "boolean") {
    return [new ValidationError(key, value, `boolean expected, ${type} found`)];
  }
  return [];
}
function validateColor(options) {
  const key = options.key;
  const value = options.value;
  const type = getType(value);
  if (type !== "string") {
    return [new ValidationError(key, value, `color expected, ${type} found`)];
  }
  if (csscolorparser.parseCSSColor(value) === null) {
    return [new ValidationError(key, value, `color expected, "${value}" found`)];
  }
  return [];
}
function validateEnum(options) {
  const key = options.key;
  const value = options.value;
  const valueSpec = options.valueSpec;
  const errors = [];
  if (Array.isArray(valueSpec.values)) {
    if (valueSpec.values.indexOf(unbundle(value)) === -1) {
      errors.push(new ValidationError(key, value, `expected one of [${valueSpec.values.join(", ")}], ${JSON.stringify(value)} found`));
    }
  } else {
    if (Object.keys(valueSpec.values).indexOf(unbundle(value)) === -1) {
      errors.push(new ValidationError(key, value, `expected one of [${Object.keys(valueSpec.values).join(", ")}], ${JSON.stringify(value)} found`));
    }
  }
  return errors;
}
function validateFilter(options) {
  if (isExpressionFilter(deepUnbundle(options.value))) {
    return validateExpression(extend2({}, options, {
      expressionContext: "filter",
      valueSpec: { value: "boolean" }
    }));
  } else {
    return validateNonExpressionFilter(options);
  }
}
function validateNonExpressionFilter(options) {
  const value = options.value;
  const key = options.key;
  if (getType(value) !== "array") {
    return [new ValidationError(key, value, `array expected, ${getType(value)} found`)];
  }
  const styleSpec = options.styleSpec;
  let type;
  let errors = [];
  if (value.length < 1) {
    return [new ValidationError(key, value, "filter array must have at least 1 element")];
  }
  errors = errors.concat(validateEnum({
    key: `${key}[0]`,
    value: value[0],
    valueSpec: styleSpec.filter_operator,
    style: options.style,
    styleSpec: options.styleSpec
  }));
  switch (unbundle(value[0])) {
    case "<":
    case "<=":
    case ">":
    case ">=":
      if (value.length >= 2 && unbundle(value[1]) === "$type") {
        errors.push(new ValidationError(key, value, `"$type" cannot be use with operator "${value[0]}"`));
      }
    case "==":
    case "!=":
      if (value.length !== 3) {
        errors.push(new ValidationError(key, value, `filter array for operator "${value[0]}" must have 3 elements`));
      }
    case "in":
    case "!in":
      if (value.length >= 2) {
        type = getType(value[1]);
        if (type !== "string") {
          errors.push(new ValidationError(`${key}[1]`, value[1], `string expected, ${type} found`));
        }
      }
      for (let i = 2; i < value.length; i++) {
        type = getType(value[i]);
        if (unbundle(value[1]) === "$type") {
          errors = errors.concat(validateEnum({
            key: `${key}[${i}]`,
            value: value[i],
            valueSpec: styleSpec.geometry_type,
            style: options.style,
            styleSpec: options.styleSpec
          }));
        } else if (type !== "string" && type !== "number" && type !== "boolean") {
          errors.push(new ValidationError(`${key}[${i}]`, value[i], `string, number, or boolean expected, ${type} found`));
        }
      }
      break;
    case "any":
    case "all":
    case "none":
      for (let i = 1; i < value.length; i++) {
        errors = errors.concat(validateNonExpressionFilter({
          key: `${key}[${i}]`,
          value: value[i],
          style: options.style,
          styleSpec: options.styleSpec
        }));
      }
      break;
    case "has":
    case "!has":
      type = getType(value[1]);
      if (value.length !== 2) {
        errors.push(new ValidationError(key, value, `filter array for "${value[0]}" operator must have 2 elements`));
      } else if (type !== "string") {
        errors.push(new ValidationError(`${key}[1]`, value[1], `string expected, ${type} found`));
      }
      break;
    case "within":
      type = getType(value[1]);
      if (value.length !== 2) {
        errors.push(new ValidationError(key, value, `filter array for "${value[0]}" operator must have 2 elements`));
      } else if (type !== "object") {
        errors.push(new ValidationError(`${key}[1]`, value[1], `object expected, ${type} found`));
      }
      break;
  }
  return errors;
}
function validateProperty(options, propertyType) {
  const key = options.key;
  const style = options.style;
  const styleSpec = options.styleSpec;
  const value = options.value;
  const propertyKey = options.objectKey;
  const layerSpec = styleSpec[`${propertyType}_${options.layerType}`];
  if (!layerSpec)
    return [];
  const transitionMatch = propertyKey.match(/^(.*)-transition$/);
  if (propertyType === "paint" && transitionMatch && layerSpec[transitionMatch[1]] && layerSpec[transitionMatch[1]].transition) {
    return validate({
      key,
      value,
      valueSpec: styleSpec.transition,
      style,
      styleSpec
    });
  }
  const valueSpec = options.valueSpec || layerSpec[propertyKey];
  if (!valueSpec) {
    return [new ValidationError(key, value, `unknown property "${propertyKey}"`)];
  }
  let tokenMatch;
  if (getType(value) === "string" && supportsPropertyExpression(valueSpec) && !valueSpec.tokens && (tokenMatch = /^{([^}]+)}$/.exec(value))) {
    return [new ValidationError(key, value, `"${propertyKey}" does not support interpolation syntax
Use an identity property function instead: \`{ "type": "identity", "property": ${JSON.stringify(tokenMatch[1])} }\`.`)];
  }
  const errors = [];
  if (options.layerType === "symbol") {
    if (propertyKey === "text-field" && style && !style.glyphs) {
      errors.push(new ValidationError(key, value, 'use of "text-field" requires a style "glyphs" property'));
    }
    if (propertyKey === "text-font" && isFunction$1(deepUnbundle(value)) && unbundle(value.type) === "identity") {
      errors.push(new ValidationError(key, value, '"text-font" does not support identity functions'));
    }
  }
  return errors.concat(validate({
    key: options.key,
    value,
    valueSpec,
    style,
    styleSpec,
    expressionContext: "property",
    propertyType,
    propertyKey
  }));
}
function validatePaintProperty(options) {
  return validateProperty(options, "paint");
}
function validateLayoutProperty(options) {
  return validateProperty(options, "layout");
}
function validateLayer(options) {
  let errors = [];
  const layer2 = options.value;
  const key = options.key;
  const style = options.style;
  const styleSpec = options.styleSpec;
  if (!layer2.type && !layer2.ref) {
    errors.push(new ValidationError(key, layer2, 'either "type" or "ref" is required'));
  }
  let type = unbundle(layer2.type);
  const ref = unbundle(layer2.ref);
  if (layer2.id) {
    const layerId = unbundle(layer2.id);
    for (let i = 0; i < options.arrayIndex; i++) {
      const otherLayer = style.layers[i];
      if (unbundle(otherLayer.id) === layerId) {
        errors.push(new ValidationError(key, layer2.id, `duplicate layer id "${layer2.id}", previously used at line ${otherLayer.id.__line__}`));
      }
    }
  }
  if ("ref" in layer2) {
    [
      "type",
      "source",
      "source-layer",
      "filter",
      "layout"
    ].forEach((p) => {
      if (p in layer2) {
        errors.push(new ValidationError(key, layer2[p], `"${p}" is prohibited for ref layers`));
      }
    });
    let parent;
    style.layers.forEach((layer3) => {
      if (unbundle(layer3.id) === ref)
        parent = layer3;
    });
    if (!parent) {
      errors.push(new ValidationError(key, layer2.ref, `ref layer "${ref}" not found`));
    } else if (parent.ref) {
      errors.push(new ValidationError(key, layer2.ref, "ref cannot reference another ref layer"));
    } else {
      type = unbundle(parent.type);
    }
  } else if (!(type === "background" || type === "sky")) {
    if (!layer2.source) {
      errors.push(new ValidationError(key, layer2, 'missing required property "source"'));
    } else {
      const source3 = style.sources && style.sources[layer2.source];
      const sourceType = source3 && unbundle(source3.type);
      if (!source3) {
        errors.push(new ValidationError(key, layer2.source, `source "${layer2.source}" not found`));
      } else if (sourceType === "vector" && type === "raster") {
        errors.push(new ValidationError(key, layer2.source, `layer "${layer2.id}" requires a raster source`));
      } else if (sourceType === "raster" && type !== "raster") {
        errors.push(new ValidationError(key, layer2.source, `layer "${layer2.id}" requires a vector source`));
      } else if (sourceType === "vector" && !layer2["source-layer"]) {
        errors.push(new ValidationError(key, layer2, `layer "${layer2.id}" must specify a "source-layer"`));
      } else if (sourceType === "raster-dem" && type !== "hillshade") {
        errors.push(new ValidationError(key, layer2.source, "raster-dem source can only be used with layer type 'hillshade'."));
      } else if (type === "line" && layer2.paint && layer2.paint["line-gradient"] && (sourceType !== "geojson" || !source3.lineMetrics)) {
        errors.push(new ValidationError(key, layer2, `layer "${layer2.id}" specifies a line-gradient, which requires a GeoJSON source with \`lineMetrics\` enabled.`));
      }
    }
  }
  errors = errors.concat(validateObject({
    key,
    value: layer2,
    valueSpec: styleSpec.layer,
    style: options.style,
    styleSpec: options.styleSpec,
    objectElementValidators: {
      "*"() {
        return [];
      },
      type() {
        return validate({
          key: `${key}.type`,
          value: layer2.type,
          valueSpec: styleSpec.layer.type,
          style: options.style,
          styleSpec: options.styleSpec,
          object: layer2,
          objectKey: "type"
        });
      },
      filter: validateFilter,
      layout(options2) {
        return validateObject({
          layer: layer2,
          key: options2.key,
          value: options2.value,
          style: options2.style,
          styleSpec: options2.styleSpec,
          objectElementValidators: {
            "*"(options3) {
              return validateLayoutProperty(extend2({ layerType: type }, options3));
            }
          }
        });
      },
      paint(options2) {
        return validateObject({
          layer: layer2,
          key: options2.key,
          value: options2.value,
          style: options2.style,
          styleSpec: options2.styleSpec,
          objectElementValidators: {
            "*"(options3) {
              return validatePaintProperty(extend2({ layerType: type }, options3));
            }
          }
        });
      }
    }
  }));
  return errors;
}
function validateString(options) {
  const value = options.value;
  const key = options.key;
  const type = getType(value);
  if (type !== "string") {
    return [new ValidationError(key, value, `string expected, ${type} found`)];
  }
  return [];
}
var objectElementValidators = { promoteId: validatePromoteId };
function validateSource(options) {
  const value = options.value;
  const key = options.key;
  const styleSpec = options.styleSpec;
  const style = options.style;
  if (!value.type) {
    return [new ValidationError(key, value, '"type" is required')];
  }
  const type = unbundle(value.type);
  let errors;
  switch (type) {
    case "vector":
    case "raster":
    case "raster-dem":
      errors = validateObject({
        key,
        value,
        valueSpec: styleSpec[`source_${type.replace("-", "_")}`],
        style: options.style,
        styleSpec,
        objectElementValidators
      });
      return errors;
    case "geojson":
      errors = validateObject({
        key,
        value,
        valueSpec: styleSpec.source_geojson,
        style,
        styleSpec,
        objectElementValidators
      });
      if (value.cluster) {
        for (const prop in value.clusterProperties) {
          const [operator, mapExpr] = value.clusterProperties[prop];
          const reduceExpr = typeof operator === "string" ? [
            operator,
            ["accumulated"],
            [
              "get",
              prop
            ]
          ] : operator;
          errors.push(...validateExpression({
            key: `${key}.${prop}.map`,
            value: mapExpr,
            expressionContext: "cluster-map"
          }));
          errors.push(...validateExpression({
            key: `${key}.${prop}.reduce`,
            value: reduceExpr,
            expressionContext: "cluster-reduce"
          }));
        }
      }
      return errors;
    case "video":
      return validateObject({
        key,
        value,
        valueSpec: styleSpec.source_video,
        style,
        styleSpec
      });
    case "image":
      return validateObject({
        key,
        value,
        valueSpec: styleSpec.source_image,
        style,
        styleSpec
      });
    case "canvas":
      return [new ValidationError(key, null, `Please use runtime APIs to add canvas sources, rather than including them in stylesheets.`, "source.canvas")];
    default:
      return validateEnum({
        key: `${key}.type`,
        value: value.type,
        valueSpec: {
          values: [
            "vector",
            "raster",
            "raster-dem",
            "geojson",
            "video",
            "image"
          ]
        },
        style,
        styleSpec
      });
  }
}
function validatePromoteId({ key, value }) {
  if (getType(value) === "string") {
    return validateString({
      key,
      value
    });
  } else {
    const errors = [];
    for (const prop in value) {
      errors.push(...validateString({
        key: `${key}.${prop}`,
        value: value[prop]
      }));
    }
    return errors;
  }
}
function validateLight(options) {
  const light2 = options.value;
  const styleSpec = options.styleSpec;
  const lightSpec = styleSpec.light;
  const style = options.style;
  let errors = [];
  const rootType = getType(light2);
  if (light2 === void 0) {
    return errors;
  } else if (rootType !== "object") {
    errors = errors.concat([new ValidationError("light", light2, `object expected, ${rootType} found`)]);
    return errors;
  }
  for (const key in light2) {
    const transitionMatch = key.match(/^(.*)-transition$/);
    if (transitionMatch && lightSpec[transitionMatch[1]] && lightSpec[transitionMatch[1]].transition) {
      errors = errors.concat(validate({
        key,
        value: light2[key],
        valueSpec: styleSpec.transition,
        style,
        styleSpec
      }));
    } else if (lightSpec[key]) {
      errors = errors.concat(validate({
        key,
        value: light2[key],
        valueSpec: lightSpec[key],
        style,
        styleSpec
      }));
    } else {
      errors = errors.concat([new ValidationError(key, light2[key], `unknown property "${key}"`)]);
    }
  }
  return errors;
}
function validateTerrain(options) {
  const terrain2 = options.value;
  const key = options.key;
  const style = options.style;
  const styleSpec = options.styleSpec;
  const terrainSpec = styleSpec.terrain;
  let errors = [];
  const rootType = getType(terrain2);
  if (terrain2 === void 0) {
    return errors;
  } else if (rootType !== "object") {
    errors = errors.concat([new ValidationError("terrain", terrain2, `object expected, ${rootType} found`)]);
    return errors;
  }
  for (const key2 in terrain2) {
    const transitionMatch = key2.match(/^(.*)-transition$/);
    if (transitionMatch && terrainSpec[transitionMatch[1]] && terrainSpec[transitionMatch[1]].transition) {
      errors = errors.concat(validate({
        key: key2,
        value: terrain2[key2],
        valueSpec: styleSpec.transition,
        style,
        styleSpec
      }));
    } else if (terrainSpec[key2]) {
      errors = errors.concat(validate({
        key: key2,
        value: terrain2[key2],
        valueSpec: terrainSpec[key2],
        style,
        styleSpec
      }));
    } else {
      errors = errors.concat([new ValidationError(key2, terrain2[key2], `unknown property "${key2}"`)]);
    }
  }
  if (!terrain2.source) {
    errors.push(new ValidationError(key, terrain2, `terrain is missing required property "source"`));
  } else {
    const source3 = style.sources && style.sources[terrain2.source];
    const sourceType = source3 && unbundle(source3.type);
    if (!source3) {
      errors.push(new ValidationError(key, terrain2.source, `source "${terrain2.source}" not found`));
    } else if (sourceType !== "raster-dem") {
      errors.push(new ValidationError(key, terrain2.source, `terrain cannot be used with a source of type ${sourceType}, it only be used with a "raster-dem" source type`));
    }
  }
  return errors;
}
function validateFog(options) {
  const fog2 = options.value;
  const style = options.style;
  const styleSpec = options.styleSpec;
  const fogSpec = styleSpec.fog;
  let errors = [];
  const rootType = getType(fog2);
  if (fog2 === void 0) {
    return errors;
  } else if (rootType !== "object") {
    errors = errors.concat([new ValidationError("fog", fog2, `object expected, ${rootType} found`)]);
    return errors;
  }
  for (const key in fog2) {
    const transitionMatch = key.match(/^(.*)-transition$/);
    if (transitionMatch && fogSpec[transitionMatch[1]] && fogSpec[transitionMatch[1]].transition) {
      errors = errors.concat(validate({
        key,
        value: fog2[key],
        valueSpec: styleSpec.transition,
        style,
        styleSpec
      }));
    } else if (fogSpec[key]) {
      errors = errors.concat(validate({
        key,
        value: fog2[key],
        valueSpec: fogSpec[key],
        style,
        styleSpec
      }));
    } else {
      errors = errors.concat([new ValidationError(key, fog2[key], `unknown property "${key}"`)]);
    }
  }
  return errors;
}
function validateFormatted(options) {
  if (validateString(options).length === 0) {
    return [];
  }
  return validateExpression(options);
}
function validateImage(options) {
  if (validateString(options).length === 0) {
    return [];
  }
  return validateExpression(options);
}
var VALIDATORS = {
  "*"() {
    return [];
  },
  "array": validateArray,
  "boolean": validateBoolean,
  "number": validateNumber,
  "color": validateColor,
  "constants": validateConstants,
  "enum": validateEnum,
  "filter": validateFilter,
  "function": validateFunction,
  "layer": validateLayer,
  "object": validateObject,
  "source": validateSource,
  "light": validateLight,
  "terrain": validateTerrain,
  "fog": validateFog,
  "string": validateString,
  "formatted": validateFormatted,
  "resolvedImage": validateImage
};
function validate(options) {
  const value = options.value;
  const valueSpec = options.valueSpec;
  const styleSpec = options.styleSpec;
  if (valueSpec.expression && isFunction$1(unbundle(value))) {
    return validateFunction(options);
  } else if (valueSpec.expression && isExpression(deepUnbundle(value))) {
    return validateExpression(options);
  } else if (valueSpec.type && VALIDATORS[valueSpec.type]) {
    return VALIDATORS[valueSpec.type](options);
  } else {
    const valid = validateObject(extend2({}, options, { valueSpec: valueSpec.type ? styleSpec[valueSpec.type] : valueSpec }));
    return valid;
  }
}
function validateGlyphsURL(options) {
  const value = options.value;
  const key = options.key;
  const errors = validateString(options);
  if (errors.length)
    return errors;
  if (value.indexOf("{fontstack}") === -1) {
    errors.push(new ValidationError(key, value, '"glyphs" url must include a "{fontstack}" token'));
  }
  if (value.indexOf("{range}") === -1) {
    errors.push(new ValidationError(key, value, '"glyphs" url must include a "{range}" token'));
  }
  return errors;
}
function validateStyleMin(style, styleSpec = v8) {
  let errors = [];
  errors = errors.concat(validate({
    key: "",
    value: style,
    valueSpec: styleSpec.$root,
    styleSpec,
    style,
    objectElementValidators: {
      glyphs: validateGlyphsURL,
      "*"() {
        return [];
      }
    }
  }));
  if (style.constants) {
    errors = errors.concat(validateConstants({
      key: "constants",
      value: style.constants,
      style,
      styleSpec
    }));
  }
  return sortErrors(errors);
}
validateStyleMin.source = wrapCleanErrors(validateSource);
validateStyleMin.light = wrapCleanErrors(validateLight);
validateStyleMin.terrain = wrapCleanErrors(validateTerrain);
validateStyleMin.fog = wrapCleanErrors(validateFog);
validateStyleMin.layer = wrapCleanErrors(validateLayer);
validateStyleMin.filter = wrapCleanErrors(validateFilter);
validateStyleMin.paintProperty = wrapCleanErrors(validatePaintProperty);
validateStyleMin.layoutProperty = wrapCleanErrors(validateLayoutProperty);
function sortErrors(errors) {
  return [].concat(errors).sort((a, b) => {
    return a.line - b.line;
  });
}
function wrapCleanErrors(inner) {
  return function(...args) {
    return sortErrors(inner.apply(this, args));
  };
}
var jsonlint = createCommonjsModule(function(module, exports) {
  var parser = function() {
    var o = function(k, v, o2, l) {
      for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)
        ;
      return o2;
    }, $V0 = [1, 12], $V1 = [1, 13], $V2 = [1, 9], $V3 = [1, 10], $V4 = [1, 11], $V5 = [1, 14], $V6 = [1, 15], $V7 = [14, 18, 22, 24], $V8 = [18, 22], $V9 = [22, 24];
    var parser2 = {
      trace: function trace() {
      },
      yy: {},
      symbols_: { "error": 2, "JSONString": 3, "STRING": 4, "JSONNumber": 5, "NUMBER": 6, "JSONNullLiteral": 7, "NULL": 8, "JSONBooleanLiteral": 9, "TRUE": 10, "FALSE": 11, "JSONText": 12, "JSONValue": 13, "EOF": 14, "JSONObject": 15, "JSONArray": 16, "{": 17, "}": 18, "JSONMemberList": 19, "JSONMember": 20, ":": 21, ",": 22, "[": 23, "]": 24, "JSONElementList": 25, "$accept": 0, "$end": 1 },
      terminals_: { 2: "error", 4: "STRING", 6: "NUMBER", 8: "NULL", 10: "TRUE", 11: "FALSE", 14: "EOF", 17: "{", 18: "}", 21: ":", 22: ",", 23: "[", 24: "]" },
      productions_: [0, [3, 1], [5, 1], [7, 1], [9, 1], [9, 1], [12, 2], [13, 1], [13, 1], [13, 1], [13, 1], [13, 1], [13, 1], [15, 2], [15, 3], [20, 3], [19, 1], [19, 3], [16, 2], [16, 3], [25, 1], [25, 3]],
      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
        var $0 = $$.length - 1;
        switch (yystate) {
          case 1:
            this.$ = new String(yytext.replace(/\\(\\|")/g, "$1").replace(/\\n/g, "\n").replace(/\\r/g, "\r").replace(/\\t/g, "	").replace(/\\v/g, "\v").replace(/\\f/g, "\f").replace(/\\b/g, "\b"));
            this.$.__line__ = this._$.first_line;
            break;
          case 2:
            this.$ = new Number(yytext);
            this.$.__line__ = this._$.first_line;
            break;
          case 3:
            this.$ = null;
            break;
          case 4:
            this.$ = new Boolean(true);
            this.$.__line__ = this._$.first_line;
            break;
          case 5:
            this.$ = new Boolean(false);
            this.$.__line__ = this._$.first_line;
            break;
          case 6:
            return this.$ = $$[$0 - 1];
          case 13:
            this.$ = {};
            Object.defineProperty(this.$, "__line__", {
              value: this._$.first_line,
              enumerable: false
            });
            break;
          case 14:
          case 19:
            this.$ = $$[$0 - 1];
            Object.defineProperty(this.$, "__line__", {
              value: this._$.first_line,
              enumerable: false
            });
            break;
          case 15:
            this.$ = [$$[$0 - 2], $$[$0]];
            break;
          case 16:
            this.$ = {};
            this.$[$$[$0][0]] = $$[$0][1];
            break;
          case 17:
            this.$ = $$[$0 - 2];
            $$[$0 - 2][$$[$0][0]] = $$[$0][1];
            break;
          case 18:
            this.$ = [];
            Object.defineProperty(this.$, "__line__", {
              value: this._$.first_line,
              enumerable: false
            });
            break;
          case 20:
            this.$ = [$$[$0]];
            break;
          case 21:
            this.$ = $$[$0 - 2];
            $$[$0 - 2].push($$[$0]);
            break;
        }
      },
      table: [{ 3: 5, 4: $V0, 5: 6, 6: $V1, 7: 3, 8: $V2, 9: 4, 10: $V3, 11: $V4, 12: 1, 13: 2, 15: 7, 16: 8, 17: $V5, 23: $V6 }, { 1: [3] }, { 14: [1, 16] }, o($V7, [2, 7]), o($V7, [2, 8]), o($V7, [2, 9]), o($V7, [2, 10]), o($V7, [2, 11]), o($V7, [2, 12]), o($V7, [2, 3]), o($V7, [2, 4]), o($V7, [2, 5]), o([14, 18, 21, 22, 24], [2, 1]), o($V7, [2, 2]), { 3: 20, 4: $V0, 18: [1, 17], 19: 18, 20: 19 }, { 3: 5, 4: $V0, 5: 6, 6: $V1, 7: 3, 8: $V2, 9: 4, 10: $V3, 11: $V4, 13: 23, 15: 7, 16: 8, 17: $V5, 23: $V6, 24: [1, 21], 25: 22 }, { 1: [2, 6] }, o($V7, [2, 13]), { 18: [1, 24], 22: [1, 25] }, o($V8, [2, 16]), { 21: [1, 26] }, o($V7, [2, 18]), { 22: [1, 28], 24: [1, 27] }, o($V9, [2, 20]), o($V7, [2, 14]), { 3: 20, 4: $V0, 20: 29 }, { 3: 5, 4: $V0, 5: 6, 6: $V1, 7: 3, 8: $V2, 9: 4, 10: $V3, 11: $V4, 13: 30, 15: 7, 16: 8, 17: $V5, 23: $V6 }, o($V7, [2, 19]), { 3: 5, 4: $V0, 5: 6, 6: $V1, 7: 3, 8: $V2, 9: 4, 10: $V3, 11: $V4, 13: 31, 15: 7, 16: 8, 17: $V5, 23: $V6 }, o($V8, [2, 17]), o($V8, [2, 15]), o($V9, [2, 21])],
      defaultActions: { 16: [2, 6] },
      parseError: function parseError(str, hash) {
        if (hash.recoverable) {
          this.trace(str);
        } else {
          throw new Error(str);
        }
      },
      parse: function parse(input) {
        var self2 = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;
        var args = lstack.slice.call(arguments, 1);
        var lexer2 = Object.create(this.lexer);
        var sharedState = { yy: {} };
        for (var k in this.yy) {
          if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
          }
        }
        lexer2.setInput(input, sharedState.yy);
        sharedState.yy.lexer = lexer2;
        sharedState.yy.parser = this;
        if (typeof lexer2.yylloc == "undefined") {
          lexer2.yylloc = {};
        }
        var yyloc = lexer2.yylloc;
        lstack.push(yyloc);
        var ranges = lexer2.options && lexer2.options.ranges;
        if (typeof sharedState.yy.parseError === "function") {
          this.parseError = sharedState.yy.parseError;
        } else {
          this.parseError = Object.getPrototypeOf(this).parseError;
        }
        function lex() {
          var token;
          token = lexer2.lex() || EOF;
          if (typeof token !== "number") {
            token = self2.symbols_[token] || token;
          }
          return token;
        }
        var symbol, state, action, r, yyval = {}, p, len, newState, expected;
        while (true) {
          state = stack[stack.length - 1];
          if (this.defaultActions[state]) {
            action = this.defaultActions[state];
          } else {
            if (symbol === null || typeof symbol == "undefined") {
              symbol = lex();
            }
            action = table[state] && table[state][symbol];
          }
          if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            expected = [];
            for (p in table[state]) {
              if (this.terminals_[p] && p > TERROR) {
                expected.push("'" + this.terminals_[p] + "'");
              }
            }
            if (lexer2.showPosition) {
              errStr = "Parse error on line " + (yylineno + 1) + ":\n" + lexer2.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
            } else {
              errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == EOF ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
            }
            this.parseError(errStr, {
              text: lexer2.match,
              token: this.terminals_[symbol] || symbol,
              line: lexer2.yylineno,
              loc: yyloc,
              expected
            });
          }
          if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
          }
          switch (action[0]) {
            case 1:
              stack.push(symbol);
              vstack.push(lexer2.yytext);
              lstack.push(lexer2.yylloc);
              stack.push(action[1]);
              symbol = null;
              {
                yyleng = lexer2.yyleng;
                yytext = lexer2.yytext;
                yylineno = lexer2.yylineno;
                yyloc = lexer2.yylloc;
              }
              break;
            case 2:
              len = this.productions_[action[1]][1];
              yyval.$ = vstack[vstack.length - len];
              yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
              };
              if (ranges) {
                yyval._$.range = [
                  lstack[lstack.length - (len || 1)].range[0],
                  lstack[lstack.length - 1].range[1]
                ];
              }
              r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
              ].concat(args));
              if (typeof r !== "undefined") {
                return r;
              }
              if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
              }
              stack.push(this.productions_[action[1]][0]);
              vstack.push(yyval.$);
              lstack.push(yyval._$);
              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
              stack.push(newState);
              break;
            case 3:
              return true;
          }
        }
        return true;
      }
    };
    var lexer = function() {
      var lexer2 = {
        EOF: 1,
        parseError: function parseError(str, hash) {
          if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
          } else {
            throw new Error(str);
          }
        },
        setInput: function(input, yy) {
          this.yy = yy || this.yy || {};
          this._input = input;
          this._more = this._backtrack = this.done = false;
          this.yylineno = this.yyleng = 0;
          this.yytext = this.matched = this.match = "";
          this.conditionStack = ["INITIAL"];
          this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
          };
          if (this.options.ranges) {
            this.yylloc.range = [0, 0];
          }
          this.offset = 0;
          return this;
        },
        input: function() {
          var ch = this._input[0];
          this.yytext += ch;
          this.yyleng++;
          this.offset++;
          this.match += ch;
          this.matched += ch;
          var lines = ch.match(/(?:\r\n?|\n).*/g);
          if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
          } else {
            this.yylloc.last_column++;
          }
          if (this.options.ranges) {
            this.yylloc.range[1]++;
          }
          this._input = this._input.slice(1);
          return ch;
        },
        unput: function(ch) {
          var len = ch.length;
          var lines = ch.split(/(?:\r\n?|\n)/g);
          this._input = ch + this._input;
          this.yytext = this.yytext.substr(0, this.yytext.length - len);
          this.offset -= len;
          var oldLines = this.match.split(/(?:\r\n?|\n)/g);
          this.match = this.match.substr(0, this.match.length - 1);
          this.matched = this.matched.substr(0, this.matched.length - 1);
          if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
          }
          var r = this.yylloc.range;
          this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
          };
          if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
          }
          this.yyleng = this.yytext.length;
          return this;
        },
        more: function() {
          this._more = true;
          return this;
        },
        reject: function() {
          if (this.options.backtrack_lexer) {
            this._backtrack = true;
          } else {
            return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" + this.showPosition(), {
              text: "",
              token: null,
              line: this.yylineno
            });
          }
          return this;
        },
        less: function(n) {
          this.unput(this.match.slice(n));
        },
        pastInput: function() {
          var past = this.matched.substr(0, this.matched.length - this.match.length);
          return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
        },
        upcomingInput: function() {
          var next = this.match;
          if (next.length < 20) {
            next += this._input.substr(0, 20 - next.length);
          }
          return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
        },
        showPosition: function() {
          var pre = this.pastInput();
          var c = new Array(pre.length + 1).join("-");
          return pre + this.upcomingInput() + "\n" + c + "^";
        },
        test_match: function(match, indexed_rule) {
          var token, lines, backup;
          if (this.options.backtrack_lexer) {
            backup = {
              yylineno: this.yylineno,
              yylloc: {
                first_line: this.yylloc.first_line,
                last_line: this.last_line,
                first_column: this.yylloc.first_column,
                last_column: this.yylloc.last_column
              },
              yytext: this.yytext,
              match: this.match,
              matches: this.matches,
              matched: this.matched,
              yyleng: this.yyleng,
              offset: this.offset,
              _more: this._more,
              _input: this._input,
              yy: this.yy,
              conditionStack: this.conditionStack.slice(0),
              done: this.done
            };
            if (this.options.ranges) {
              backup.yylloc.range = this.yylloc.range.slice(0);
            }
          }
          lines = match[0].match(/(?:\r\n?|\n).*/g);
          if (lines) {
            this.yylineno += lines.length;
          }
          this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
          };
          this.yytext += match[0];
          this.match += match[0];
          this.matches = match;
          this.yyleng = this.yytext.length;
          if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
          }
          this._more = false;
          this._backtrack = false;
          this._input = this._input.slice(match[0].length);
          this.matched += match[0];
          token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
          if (this.done && this._input) {
            this.done = false;
          }
          if (token) {
            return token;
          } else if (this._backtrack) {
            for (var k in backup) {
              this[k] = backup[k];
            }
            return false;
          }
          return false;
        },
        next: function() {
          if (this.done) {
            return this.EOF;
          }
          if (!this._input) {
            this.done = true;
          }
          var token, match, tempMatch, index;
          if (!this._more) {
            this.yytext = "";
            this.match = "";
          }
          var rules = this._currentRules();
          for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
              match = tempMatch;
              index = i;
              if (this.options.backtrack_lexer) {
                token = this.test_match(tempMatch, rules[i]);
                if (token !== false) {
                  return token;
                } else if (this._backtrack) {
                  match = false;
                  continue;
                } else {
                  return false;
                }
              } else if (!this.options.flex) {
                break;
              }
            }
          }
          if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
              return token;
            }
            return false;
          }
          if (this._input === "") {
            return this.EOF;
          } else {
            return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
              text: "",
              token: null,
              line: this.yylineno
            });
          }
        },
        lex: function lex() {
          var r = this.next();
          if (r) {
            return r;
          } else {
            return this.lex();
          }
        },
        begin: function begin(condition) {
          this.conditionStack.push(condition);
        },
        popState: function popState() {
          var n = this.conditionStack.length - 1;
          if (n > 0) {
            return this.conditionStack.pop();
          } else {
            return this.conditionStack[0];
          }
        },
        _currentRules: function _currentRules() {
          if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
          } else {
            return this.conditions["INITIAL"].rules;
          }
        },
        topState: function topState(n) {
          n = this.conditionStack.length - 1 - Math.abs(n || 0);
          if (n >= 0) {
            return this.conditionStack[n];
          } else {
            return "INITIAL";
          }
        },
        pushState: function pushState(condition) {
          this.begin(condition);
        },
        stateStackSize: function stateStackSize() {
          return this.conditionStack.length;
        },
        options: {},
        performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
          switch ($avoiding_name_collisions) {
            case 0:
              break;
            case 1:
              return 6;
            case 2:
              yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
              return 4;
            case 3:
              return 17;
            case 4:
              return 18;
            case 5:
              return 23;
            case 6:
              return 24;
            case 7:
              return 22;
            case 8:
              return 21;
            case 9:
              return 10;
            case 10:
              return 11;
            case 11:
              return 8;
            case 12:
              return 14;
            case 13:
              return "INVALID";
          }
        },
        rules: [/^(?:\s+)/, /^(?:(-?([0-9]|[1-9][0-9]+))(\.[0-9]+)?([eE][-+]?[0-9]+)?\b)/, /^(?:"(?:\\[\\"bfnrt/]|\\u[a-fA-F0-9]{4}|[^\\\0-\x09\x0a-\x1f"])*")/, /^(?:\{)/, /^(?:\})/, /^(?:\[)/, /^(?:\])/, /^(?:,)/, /^(?::)/, /^(?:true\b)/, /^(?:false\b)/, /^(?:null\b)/, /^(?:$)/, /^(?:.)/],
        conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "inclusive": true } }
      };
      return lexer2;
    }();
    parser2.lexer = lexer;
    function Parser() {
      this.yy = {};
    }
    Parser.prototype = parser2;
    parser2.Parser = Parser;
    return new Parser();
  }();
  if (typeof commonjsRequire !== "undefined" && true) {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function() {
      return parser.parse.apply(parser, arguments);
    };
  }
});
function readStyle(style) {
  if (style instanceof String || typeof style === "string" || style instanceof Buffer) {
    try {
      return jsonlint.parse(style.toString());
    } catch (e) {
      throw new ParsingError$1(e);
    }
  }
  return style;
}
function validateStyle(style, styleSpec = v8) {
  let s = style;
  try {
    s = readStyle(s);
  } catch (e) {
    return [e];
  }
  return validateStyleMin(s, styleSpec);
}
var acceptedSourceTypes = new Set([
  "vector",
  "raster",
  "raster-dem"
]);
var expression$1 = {
  StyleExpression,
  isExpression,
  isExpressionFilter,
  createExpression,
  createPropertyExpression,
  normalizePropertyExpression,
  ZoomConstantExpression,
  ZoomDependentExpression,
  StylePropertyFunction
};
var styleFunction = {
  convertFunction,
  createFunction,
  isFunction: isFunction$1
};
validateStyle.parsed = validateStyle;
validateStyle.latest = validateStyle;

// node_modules/ol-mapbox-style/dist/util.js
var assign2 = typeof Object.assign === "function" ? Object.assign : function(target, var_sources) {
  if (target === void 0 || target === null) {
    throw new TypeError("Cannot convert undefined or null to object");
  }
  var output = Object(target);
  for (var i = 1, ii = arguments.length; i < ii; ++i) {
    var source3 = arguments[i];
    if (source3 !== void 0 && source3 !== null) {
      for (var key in source3) {
        if (source3.hasOwnProperty(key)) {
          output[key] = source3[key];
        }
      }
    }
  }
  return output;
};
function deg2rad2(degrees) {
  return degrees * Math.PI / 180;
}
var defaultResolutions = function() {
  var resolutions = [];
  for (var res = 78271.51696402048; resolutions.length <= 24; res /= 2) {
    resolutions.push(res);
  }
  return resolutions;
}();
function createCanvas(width, height) {
  if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope && typeof OffscreenCanvas !== "undefined") {
    return new OffscreenCanvas(width, height);
  } else {
    var canvas = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    return canvas;
  }
}
function getZoomForResolution(resolution, resolutions) {
  var i = 0;
  var ii = resolutions.length;
  for (; i < ii; ++i) {
    var candidate = resolutions[i];
    if (candidate < resolution && i + 1 < ii) {
      var zoomFactor = resolutions[i] / resolutions[i + 1];
      return i + Math.log(resolutions[i] / resolution) / Math.log(zoomFactor);
    }
  }
  return ii - 1;
}
var hairSpacePool = Array(256).join("\u200A");
function applyLetterSpacing(text, letterSpacing) {
  if (letterSpacing >= 0.05) {
    var textWithLetterSpacing = "";
    var lines = text.split("\n");
    var joinSpaceString = hairSpacePool.slice(0, Math.round(letterSpacing / 0.1));
    for (var l = 0, ll = lines.length; l < ll; ++l) {
      if (l > 0) {
        textWithLetterSpacing += "\n";
      }
      textWithLetterSpacing += lines[l].split("").join(joinSpaceString);
    }
    return textWithLetterSpacing;
  }
  return text;
}
var measureContext;
function getMeasureContext() {
  if (!measureContext) {
    measureContext = createCanvas(1, 1).getContext("2d");
  }
  return measureContext;
}
function measureText(text, letterSpacing) {
  return getMeasureContext().measureText(text).width + (text.length - 1) * letterSpacing;
}
var measureCache = {};
if (labelCache) {
  listen(labelCache, EventType_default.CLEAR, function() {
    measureCache = {};
  });
}
function wrapText(text, font, em, letterSpacing) {
  if (text.indexOf("\n") !== -1) {
    var hardLines = text.split("\n");
    var lines = [];
    for (var i = 0, ii = hardLines.length; i < ii; ++i) {
      lines.push(wrapText(hardLines[i], font, em, letterSpacing));
    }
    return lines.join("\n");
  }
  var key = em + "," + font + "," + text + "," + letterSpacing;
  var wrappedText = measureCache[key];
  if (!wrappedText) {
    var words = text.split(" ");
    if (words.length > 1) {
      var ctx = getMeasureContext();
      ctx.font = font;
      var oneEm = ctx.measureText("M").width;
      var maxWidth = oneEm * em;
      var line = "";
      var lines = [];
      for (var i = 0, ii = words.length; i < ii; ++i) {
        var word = words[i];
        var testLine = line + (line ? " " : "") + word;
        if (measureText(testLine, letterSpacing) <= maxWidth) {
          line = testLine;
        } else {
          if (line) {
            lines.push(line);
          }
          line = word;
        }
      }
      if (line) {
        lines.push(line);
      }
      for (var i = 0, ii = lines.length; i < ii && ii > 1; ++i) {
        var line_1 = lines[i];
        if (measureText(line_1, letterSpacing) < maxWidth * 0.35) {
          var prevWidth = i > 0 ? measureText(lines[i - 1], letterSpacing) : Infinity;
          var nextWidth = i < ii - 1 ? measureText(lines[i + 1], letterSpacing) : Infinity;
          lines.splice(i, 1);
          ii -= 1;
          if (prevWidth < nextWidth) {
            lines[i - 1] += " " + line_1;
            i -= 1;
          } else {
            lines[i] = line_1 + " " + lines[i];
          }
        }
      }
      for (var i = 0, ii = lines.length - 1; i < ii; ++i) {
        var line_2 = lines[i];
        var next = lines[i + 1];
        if (measureText(line_2, letterSpacing) > maxWidth * 0.7 && measureText(next, letterSpacing) < maxWidth * 0.6) {
          var lineWords = line_2.split(" ");
          var lastWord = lineWords.pop();
          if (measureText(lastWord, letterSpacing) < maxWidth * 0.2) {
            lines[i] = lineWords.join(" ");
            lines[i + 1] = lastWord + " " + next;
          }
          ii -= 1;
        }
      }
      wrappedText = lines.join("\n");
    } else {
      wrappedText = text;
    }
    wrappedText = applyLetterSpacing(wrappedText, letterSpacing);
    measureCache[key] = wrappedText;
  }
  return wrappedText;
}

// node_modules/ol-mapbox-style/dist/stylefunction.js
var isFunction = styleFunction.isFunction;
var convertFunction2 = styleFunction.convertFunction;
var isExpression2 = expression$1.isExpression;
var createPropertyExpression2 = expression$1.createPropertyExpression;
var types2 = {
  "Point": 1,
  "MultiPoint": 1,
  "LineString": 2,
  "MultiLineString": 2,
  "Polygon": 3,
  "MultiPolygon": 3
};
var anchor = {
  "center": [0.5, 0.5],
  "left": [0, 0.5],
  "right": [1, 0.5],
  "top": [0.5, 0],
  "bottom": [0.5, 1],
  "top-left": [0, 0],
  "top-right": [1, 0],
  "bottom-left": [0, 1],
  "bottom-right": [1, 1]
};
var expressionData = function(rawExpression, propertySpec) {
  var compiledExpression = createPropertyExpression2(rawExpression, propertySpec);
  if (compiledExpression.result === "error") {
    throw new Error(compiledExpression.value.map(function(err) {
      return err.key + ": " + err.message;
    }).join(", "));
  }
  return compiledExpression.value;
};
var emptyObj = {};
var zoomObj = { zoom: 0 };
var functionCache = {};
var renderFeatureCoordinates;
var renderFeature2;
function getValue(layer2, layoutOrPaint, property, zoom, feature) {
  var layerId = layer2.id;
  if (!functionCache[layerId]) {
    functionCache[layerId] = {};
  }
  var functions = functionCache[layerId];
  if (!functions[property]) {
    var value_1 = (layer2[layoutOrPaint] || emptyObj)[property];
    var propertySpec = v8[layoutOrPaint + "_" + layer2.type][property];
    if (value_1 === void 0) {
      value_1 = propertySpec.default;
    }
    var isExpr = isExpression2(value_1);
    if (!isExpr && isFunction(value_1)) {
      value_1 = convertFunction2(value_1, propertySpec);
      isExpr = true;
    }
    if (isExpr) {
      var compiledExpression = expressionData(value_1, propertySpec);
      functions[property] = compiledExpression.evaluate.bind(compiledExpression);
    } else {
      if (propertySpec.type == "color") {
        value_1 = Color.parse(value_1);
      }
      functions[property] = function() {
        return value_1;
      };
    }
  }
  zoomObj.zoom = zoom;
  return functions[property](zoomObj, feature);
}
var filterCache = {};
function evaluateFilter(layerId, filter2, feature, zoom) {
  if (!(layerId in filterCache)) {
    filterCache[layerId] = createFilter(filter2).filter;
  }
  zoomObj.zoom = zoom;
  return filterCache[layerId](zoomObj, feature);
}
function colorWithOpacity(color2, opacity) {
  if (color2) {
    if (color2.a === 0 || opacity === 0) {
      return void 0;
    }
    var a = color2.a;
    opacity = opacity === void 0 ? 1 : opacity;
    return "rgba(" + Math.round(color2.r * 255 / a) + "," + Math.round(color2.g * 255 / a) + "," + Math.round(color2.b * 255 / a) + "," + a * opacity + ")";
  }
  return color2;
}
var templateRegEx = /^([^]*)\{(.*)\}([^]*)$/;
function fromTemplate(text, properties) {
  var parts;
  do {
    parts = text.match(templateRegEx);
    if (parts) {
      var value = properties[parts[2]] || "";
      text = parts[1] + value + parts[3];
    }
  } while (parts);
  return text;
}
var recordLayer = false;
function stylefunction_default(olLayer, glStyle, source3, resolutions, spriteData, spriteImageUrl, getFonts2) {
  if (resolutions === void 0) {
    resolutions = defaultResolutions;
  }
  if (typeof glStyle == "string") {
    glStyle = JSON.parse(glStyle);
  }
  if (glStyle.version != 8) {
    throw new Error("glStyle version 8 required.");
  }
  var spriteImage, spriteImgSize;
  if (spriteImageUrl) {
    if (typeof Image !== "undefined") {
      var img_1 = new Image();
      img_1.crossOrigin = "anonymous";
      img_1.onload = function() {
        spriteImage = img_1;
        spriteImgSize = [img_1.width, img_1.height];
        olLayer.changed();
        img_1.onload = null;
      };
      img_1.src = spriteImageUrl;
    } else if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) {
      var worker = self;
      worker.postMessage({
        action: "loadImage",
        src: spriteImageUrl
      });
      worker.addEventListener("message", function handler(event) {
        if (event.data.action === "imageLoaded" && event.data.src === spriteImageUrl) {
          spriteImage = event.data.image;
          spriteImgSize = [spriteImage.width, spriteImage.height];
        }
      });
    }
  }
  var allLayers = derefLayers(glStyle.layers);
  var layersBySourceLayer = {};
  var mapboxLayers = [];
  var mapboxSource;
  for (var i = 0, ii = allLayers.length; i < ii; ++i) {
    var layer2 = allLayers[i];
    var layerId = layer2.id;
    if (typeof source3 == "string" && layer2.source == source3 || source3.indexOf(layerId) !== -1) {
      var sourceLayer = layer2["source-layer"];
      if (!mapboxSource) {
        mapboxSource = layer2.source;
        var source_1 = glStyle.sources[mapboxSource];
        if (!source_1) {
          throw new Error('Source "' + mapboxSource + '" is not defined');
        }
        var type = source_1.type;
        if (type !== "vector" && type !== "geojson") {
          throw new Error('Source "' + mapboxSource + '" is not of type "vector" or "geojson", but "' + type + '"');
        }
      }
      var layers = layersBySourceLayer[sourceLayer];
      if (!layers) {
        layers = [];
        layersBySourceLayer[sourceLayer] = layers;
      }
      layers.push({
        layer: layer2,
        index: i
      });
      mapboxLayers.push(layerId);
    }
    delete functionCache[layerId];
    delete filterCache[layerId];
  }
  var textHalo = new Stroke_default();
  var textColor = new Fill_default();
  var iconImageCache = {};
  var patternCache = {};
  var styles = [];
  var styleFunction2 = function(feature, resolution) {
    var properties = feature.getProperties();
    var layers2 = layersBySourceLayer[properties.layer];
    if (!layers2) {
      return;
    }
    var zoom = resolutions.indexOf(resolution);
    if (zoom == -1) {
      zoom = getZoomForResolution(resolution, resolutions);
    }
    var type2 = types2[feature.getGeometry().getType()];
    var f = {
      properties,
      type: type2
    };
    var stylesLength = -1;
    var featureBelongsToLayer;
    var _loop_1 = function(i3, ii3) {
      var layerData = layers2[i3];
      var layer3 = layerData.layer;
      var layerId2 = layer3.id;
      var layout2 = layer3.layout || emptyObj;
      var paint2 = layer3.paint || emptyObj;
      if (layout2.visibility === "none" || "minzoom" in layer3 && zoom < layer3.minzoom || "maxzoom" in layer3 && zoom >= layer3.maxzoom) {
        return "continue";
      }
      var filter2 = layer3.filter;
      if (!filter2 || evaluateFilter(layerId2, filter2, f, zoom)) {
        featureBelongsToLayer = layer3;
        var color2 = void 0, opacity = void 0, fill = void 0, stroke = void 0, strokeColor = void 0, style = void 0;
        var index = layerData.index;
        if (type2 == 3 && (layer3.type == "fill" || layer3.type == "fill-extrusion")) {
          opacity = getValue(layer3, "paint", layer3.type + "-opacity", zoom, f);
          if (layer3.type + "-pattern" in paint2) {
            var fillIcon = getValue(layer3, "paint", layer3.type + "-pattern", zoom, f);
            if (fillIcon) {
              var icon_1 = typeof fillIcon === "string" ? fromTemplate(fillIcon, properties) : fillIcon.toString();
              if (spriteImage && spriteData && spriteData[icon_1]) {
                ++stylesLength;
                style = styles[stylesLength];
                if (!style || !style.getFill() || style.getStroke() || style.getText()) {
                  style = new Style_default({
                    fill: new Fill_default()
                  });
                  styles[stylesLength] = style;
                }
                fill = style.getFill();
                style.setZIndex(index);
                var icon_cache_key = icon_1 + "." + opacity;
                var pattern = patternCache[icon_cache_key];
                if (!pattern) {
                  var spriteImageData = spriteData[icon_1];
                  var canvas = createCanvas(spriteImageData.width, spriteImageData.height);
                  var ctx = canvas.getContext("2d");
                  ctx.globalAlpha = opacity;
                  ctx.drawImage(spriteImage, spriteImageData.x, spriteImageData.y, spriteImageData.width, spriteImageData.height, 0, 0, spriteImageData.width, spriteImageData.height);
                  pattern = ctx.createPattern(canvas, "repeat");
                  patternCache[icon_cache_key] = pattern;
                }
                fill.setColor(pattern);
              }
            }
          } else {
            color2 = colorWithOpacity(getValue(layer3, "paint", layer3.type + "-color", zoom, f), opacity);
            if (color2) {
              if (layer3.type + "-outline-color" in paint2) {
                strokeColor = colorWithOpacity(getValue(layer3, "paint", layer3.type + "-outline-color", zoom, f), opacity);
              }
              if (!strokeColor) {
                strokeColor = color2;
              }
              ++stylesLength;
              style = styles[stylesLength];
              if (!style || !(style.getFill() && style.getStroke()) || style.getText()) {
                style = new Style_default({
                  fill: new Fill_default(),
                  stroke: new Stroke_default()
                });
                styles[stylesLength] = style;
              }
              fill = style.getFill();
              fill.setColor(color2);
              stroke = style.getStroke();
              stroke.setColor(strokeColor);
              stroke.setWidth(1);
              style.setZIndex(index);
            }
          }
        }
        if (type2 != 1 && layer3.type == "line") {
          color2 = !("line-pattern" in paint2) && "line-color" in paint2 ? colorWithOpacity(getValue(layer3, "paint", "line-color", zoom, f), getValue(layer3, "paint", "line-opacity", zoom, f)) : void 0;
          var width_1 = getValue(layer3, "paint", "line-width", zoom, f);
          if (color2 && width_1 > 0) {
            ++stylesLength;
            style = styles[stylesLength];
            if (!style || !style.getStroke() || style.getFill() || style.getText()) {
              style = new Style_default({
                stroke: new Stroke_default()
              });
              styles[stylesLength] = style;
            }
            stroke = style.getStroke();
            stroke.setLineCap(getValue(layer3, "layout", "line-cap", zoom, f));
            stroke.setLineJoin(getValue(layer3, "layout", "line-join", zoom, f));
            stroke.setMiterLimit(getValue(layer3, "layout", "line-miter-limit", zoom, f));
            stroke.setColor(color2);
            stroke.setWidth(width_1);
            stroke.setLineDash(paint2["line-dasharray"] ? getValue(layer3, "paint", "line-dasharray", zoom, f).map(function(x) {
              return x * width_1;
            }) : null);
            style.setZIndex(index);
          }
        }
        var hasImage = false;
        var text = null;
        var placementAngle = 0;
        var icon = void 0, iconImg = void 0, skipLabel = void 0;
        if ((type2 == 1 || type2 == 2) && "icon-image" in layout2) {
          var iconImage = getValue(layer3, "layout", "icon-image", zoom, f);
          if (iconImage) {
            icon = typeof iconImage === "string" ? fromTemplate(iconImage, properties) : iconImage.toString();
            var styleGeom = void 0;
            if (spriteImage && spriteData && spriteData[icon]) {
              var iconRotationAlignment = getValue(layer3, "layout", "icon-rotation-alignment", zoom, f);
              if (type2 == 2) {
                var geom = feature.getGeometry();
                if (geom.getFlatMidpoint || geom.getFlatMidpoints) {
                  var extent = geom.getExtent();
                  var size = Math.sqrt(Math.max(Math.pow((extent[2] - extent[0]) / resolution, 2), Math.pow((extent[3] - extent[1]) / resolution, 2)));
                  if (size > 150) {
                    var midpoint = geom.getType() === "MultiLineString" ? geom.getFlatMidpoints() : geom.getFlatMidpoint();
                    if (!renderFeature2) {
                      renderFeatureCoordinates = [NaN, NaN];
                      renderFeature2 = new Feature_default3("Point", renderFeatureCoordinates, [], {}, null);
                    }
                    styleGeom = renderFeature2;
                    renderFeatureCoordinates[0] = midpoint[0];
                    renderFeatureCoordinates[1] = midpoint[1];
                    var placement = getValue(layer3, "layout", "symbol-placement", zoom, f);
                    if (placement === "line" && iconRotationAlignment === "map") {
                      var stride = geom.getStride();
                      var coordinates = geom.getFlatCoordinates();
                      for (var i_1 = 0, ii_1 = coordinates.length - stride; i_1 < ii_1; i_1 += stride) {
                        var x1 = coordinates[i_1];
                        var y1 = coordinates[i_1 + 1];
                        var x2 = coordinates[i_1 + stride];
                        var y2 = coordinates[i_1 + stride + 1];
                        var minX = Math.min(x1, x2);
                        var minY = Math.min(y1, y2);
                        var maxX = Math.max(x1, x2);
                        var maxY = Math.max(y1, y2);
                        if (midpoint[0] >= minX && midpoint[0] <= maxX && midpoint[1] >= minY && midpoint[1] <= maxY) {
                          placementAngle = Math.atan2(y1 - y2, x2 - x1);
                          break;
                        }
                      }
                    }
                  }
                }
              }
              if (type2 !== 2 || styleGeom) {
                var iconSize = getValue(layer3, "layout", "icon-size", zoom, f);
                var iconColor = paint2["icon-color"] !== void 0 ? getValue(layer3, "paint", "icon-color", zoom, f) : null;
                if (!iconColor || iconColor.a !== 0) {
                  var icon_cache_key = icon + "." + iconSize;
                  if (iconColor !== null) {
                    icon_cache_key += "." + iconColor;
                  }
                  iconImg = iconImageCache[icon_cache_key];
                  if (!iconImg) {
                    var spriteImageData = spriteData[icon];
                    if (iconColor !== null) {
                      var canvas = createCanvas(spriteImageData.width, spriteImageData.height);
                      var ctx = canvas.getContext("2d");
                      ctx.drawImage(spriteImage, spriteImageData.x, spriteImageData.y, spriteImageData.width, spriteImageData.height, 0, 0, spriteImageData.width, spriteImageData.height);
                      var data = ctx.getImageData(0, 0, canvas.width, canvas.height);
                      for (var c = 0, cc = data.data.length; c < cc; c += 4) {
                        var a = iconColor.a;
                        if (a !== 0) {
                          data.data[c] = iconColor.r * 255 / a;
                          data.data[c + 1] = iconColor.g * 255 / a;
                          data.data[c + 2] = iconColor.b * 255 / a;
                        }
                        data.data[c + 3] = a;
                      }
                      ctx.putImageData(data, 0, 0);
                      iconImg = new Icon_default({
                        img: canvas,
                        imgSize: [canvas.width, canvas.height],
                        scale: iconSize / spriteImageData.pixelRatio
                      });
                      iconImageCache[icon_cache_key] = iconImg;
                    } else {
                      iconImg = new Icon_default({
                        img: spriteImage,
                        imgSize: spriteImgSize,
                        size: [spriteImageData.width, spriteImageData.height],
                        offset: [spriteImageData.x, spriteImageData.y],
                        rotateWithView: iconRotationAlignment === "map",
                        scale: iconSize / spriteImageData.pixelRatio
                      });
                      iconImageCache[icon_cache_key] = iconImg;
                    }
                  }
                }
                if (iconImg) {
                  ++stylesLength;
                  style = styles[stylesLength];
                  if (!style || !style.getImage() || style.getFill() || style.getStroke()) {
                    style = new Style_default();
                    styles[stylesLength] = style;
                  }
                  style.setGeometry(styleGeom);
                  iconImg.setRotation(placementAngle + deg2rad2(getValue(layer3, "layout", "icon-rotate", zoom, f)));
                  iconImg.setOpacity(getValue(layer3, "paint", "icon-opacity", zoom, f));
                  iconImg.setAnchor(anchor[getValue(layer3, "layout", "icon-anchor", zoom, f)]);
                  style.setImage(iconImg);
                  text = style.getText();
                  style.setText(void 0);
                  style.setZIndex(index);
                  hasImage = true;
                  skipLabel = false;
                }
              } else {
                skipLabel = true;
              }
            }
          }
        }
        if (type2 == 1 && "circle-radius" in paint2) {
          ++stylesLength;
          style = styles[stylesLength];
          if (!style || !style.getImage() || style.getFill() || style.getStroke()) {
            style = new Style_default();
            styles[stylesLength] = style;
          }
          var circleRadius = getValue(layer3, "paint", "circle-radius", zoom, f);
          var circleStrokeColor = colorWithOpacity(getValue(layer3, "paint", "circle-stroke-color", zoom, f), getValue(layer3, "paint", "circle-stroke-opacity", zoom, f));
          var circleColor = colorWithOpacity(getValue(layer3, "paint", "circle-color", zoom, f), getValue(layer3, "paint", "circle-opacity", zoom, f));
          var circleStrokeWidth = getValue(layer3, "paint", "circle-stroke-width", zoom, f);
          var cache_key = circleRadius + "." + circleStrokeColor + "." + circleColor + "." + circleStrokeWidth;
          iconImg = iconImageCache[cache_key];
          if (!iconImg) {
            iconImg = new Circle_default({
              radius: circleRadius,
              stroke: circleStrokeColor && circleStrokeWidth > 0 ? new Stroke_default({
                width: circleStrokeWidth,
                color: circleStrokeColor
              }) : void 0,
              fill: circleColor ? new Fill_default({
                color: circleColor
              }) : void 0
            });
            iconImageCache[cache_key] = iconImg;
          }
          style.setImage(iconImg);
          text = style.getText();
          style.setText(void 0);
          style.setGeometry(void 0);
          style.setZIndex(index);
          hasImage = true;
        }
        var label = void 0;
        if ("text-field" in layout2) {
          var textField = getValue(layer3, "layout", "text-field", zoom, f).toString();
          label = fromTemplate(textField, properties).trim();
          opacity = getValue(layer3, "paint", "text-opacity", zoom, f);
        }
        if (label && opacity && !skipLabel) {
          if (!hasImage) {
            ++stylesLength;
            style = styles[stylesLength];
            if (!style || !style.getText() || style.getFill() || style.getStroke()) {
              style = new Style_default();
              styles[stylesLength] = style;
            }
            style.setImage(void 0);
            style.setGeometry(void 0);
          }
          if (!style.getText()) {
            style.setText(text || new Text_default({
              padding: [2, 2, 2, 2]
            }));
          }
          text = style.getText();
          var textSize = Math.round(getValue(layer3, "layout", "text-size", zoom, f));
          var fontArray = getValue(layer3, "layout", "text-font", zoom, f);
          var textLineHeight = getValue(layer3, "layout", "text-line-height", zoom, f);
          var font = (0, import_mapbox_to_css_font.default)(getFonts2 ? getFonts2(fontArray) : fontArray, textSize, textLineHeight);
          var textTransform = layout2["text-transform"];
          if (textTransform == "uppercase") {
            label = label.toUpperCase();
          } else if (textTransform == "lowercase") {
            label = label.toLowerCase();
          }
          var maxTextWidth = getValue(layer3, "layout", "text-max-width", zoom, f);
          var letterSpacing = getValue(layer3, "layout", "text-letter-spacing", zoom, f);
          var wrappedLabel = type2 == 2 ? applyLetterSpacing(label, letterSpacing) : wrapText(label, font, maxTextWidth, letterSpacing);
          text.setText(wrappedLabel);
          text.setFont(font);
          text.setRotation(deg2rad2(getValue(layer3, "layout", "text-rotate", zoom, f)));
          var textAnchor = getValue(layer3, "layout", "text-anchor", zoom, f);
          var placement = hasImage || type2 == 1 ? "point" : getValue(layer3, "layout", "symbol-placement", zoom, f);
          text.setPlacement(placement);
          var textHaloWidth = getValue(layer3, "paint", "text-halo-width", zoom, f);
          var textOffset = getValue(layer3, "layout", "text-offset", zoom, f);
          var textTranslate = getValue(layer3, "paint", "text-translate", zoom, f);
          var vOffset = 0;
          var hOffset = 0;
          if (placement == "point") {
            var textAlign = "center";
            if (textAnchor.indexOf("left") !== -1) {
              textAlign = "left";
              hOffset = textHaloWidth;
            } else if (textAnchor.indexOf("right") !== -1) {
              textAlign = "right";
              hOffset = -textHaloWidth;
            }
            text.setTextAlign(textAlign);
            var textRotationAlignment = getValue(layer3, "layout", "text-rotation-alignment", zoom, f);
            text.setRotateWithView(textRotationAlignment == "map");
          } else {
            text.setMaxAngle(deg2rad2(getValue(layer3, "layout", "text-max-angle", zoom, f)) * label.length / wrappedLabel.length);
            text.setTextAlign();
            text.setRotateWithView(false);
          }
          var textBaseline = "middle";
          if (textAnchor.indexOf("bottom") == 0) {
            textBaseline = "bottom";
            vOffset = -textHaloWidth - 0.5 * (textLineHeight - 1) * textSize;
          } else if (textAnchor.indexOf("top") == 0) {
            textBaseline = "top";
            vOffset = textHaloWidth + 0.5 * (textLineHeight - 1) * textSize;
          }
          text.setTextBaseline(textBaseline);
          text.setOffsetX(textOffset[0] * textSize + hOffset + textTranslate[0]);
          text.setOffsetY(textOffset[1] * textSize + vOffset + textTranslate[1]);
          textColor.setColor(colorWithOpacity(getValue(layer3, "paint", "text-color", zoom, f), opacity));
          text.setFill(textColor);
          var haloColor = colorWithOpacity(getValue(layer3, "paint", "text-halo-color", zoom, f), opacity);
          if (haloColor) {
            textHalo.setColor(haloColor);
            textHaloWidth *= 2;
            var halfTextSize = 0.5 * textSize;
            textHalo.setWidth(textHaloWidth <= halfTextSize ? textHaloWidth : halfTextSize);
            text.setStroke(textHalo);
          } else {
            text.setStroke(void 0);
          }
          var textPadding = getValue(layer3, "layout", "text-padding", zoom, f);
          var padding = text.getPadding();
          if (textPadding !== padding[0]) {
            padding[0] = textPadding;
            padding[1] = textPadding;
            padding[2] = textPadding;
            padding[3] = textPadding;
          }
          style.setZIndex(index);
        }
      }
    };
    for (var i2 = 0, ii2 = layers2.length; i2 < ii2; ++i2) {
      _loop_1(i2, ii2);
    }
    if (stylesLength > -1) {
      styles.length = stylesLength + 1;
      if (recordLayer) {
        if (typeof feature.set === "function") {
          feature.set("mapbox-layer", featureBelongsToLayer);
        } else {
          feature.getProperties()["mapbox-layer"] = featureBelongsToLayer;
        }
      }
      return styles;
    }
  };
  olLayer.setStyle(styleFunction2);
  olLayer.set("mapbox-source", mapboxSource);
  olLayer.set("mapbox-layers", mapboxLayers);
  return styleFunction2;
}

// node_modules/ol-mapbox-style/dist/index.js
var import_google = __toModule(require_google());
var import_mapbox_to_css_font2 = __toModule(require_mapbox_to_css_font());
var tilejsonCache = {};
var fontFamilyRegEx = /font-family: ?([^;]*);/;
var stripQuotesRegEx = /("|')/g;
var loadedFontFamilies;
function hasFontFamily(family) {
  if (!loadedFontFamilies) {
    loadedFontFamilies = {};
    var styleSheets = document.styleSheets;
    for (var i = 0, ii = styleSheets.length; i < ii; ++i) {
      var styleSheet = styleSheets[i];
      try {
        var cssRules = styleSheet.rules || styleSheet.cssRules;
        if (cssRules) {
          for (var j = 0, jj = cssRules.length; j < jj; ++j) {
            var cssRule = cssRules[j];
            if (cssRule.type == 5) {
              var match = cssRule.cssText.match(fontFamilyRegEx);
              loadedFontFamilies[match[1].replace(stripQuotesRegEx, "")] = true;
            }
          }
        }
      } catch (e) {
      }
    }
  }
  return family in loadedFontFamilies;
}
var processedFontFamilies = {};
var googleFamilies = import_google.default.getNames();
function getFonts(fonts) {
  var fontsKey = fonts.toString();
  if (fontsKey in processedFontFamilies) {
    return fonts;
  }
  var googleFontDescriptions = fonts.map(function(font) {
    var parts = (0, import_mapbox_to_css_font2.default)(font, 1).split(" ");
    return [parts.slice(3).join(" ").replace(/"/g, ""), parts[1] + parts[0]];
  });
  for (var i = 0, ii = googleFontDescriptions.length; i < ii; ++i) {
    var googleFontDescription = googleFontDescriptions[i];
    var family = googleFontDescription[0];
    if (!hasFontFamily(family) && googleFamilies.indexOf(family) !== -1) {
      var fontUrl = "https://fonts.googleapis.com/css?family=" + family.replace(/ /g, "+") + ":" + googleFontDescription[1];
      if (!document.querySelector('link[href="' + fontUrl + '"]')) {
        var markup = document.createElement("link");
        markup.href = fontUrl;
        markup.rel = "stylesheet";
        document.head.appendChild(markup);
      }
    }
  }
  processedFontFamilies[fontsKey] = true;
  return fonts;
}
var spriteRegEx = /^(.*)(\?.*)$/;
function withPath(url2, path) {
  if (path && url2.indexOf(".") === 0) {
    url2 = path + url2;
  }
  return url2;
}
function toSpriteUrl(url2, path, extension) {
  url2 = withPath(url2, path);
  var parts = url2.match(spriteRegEx);
  return parts ? parts[1] + extension + (parts.length > 2 ? parts[2] : "") : url2 + extension;
}
function applyStyle(layer2, glStyle, source3, path, resolutions) {
  return new Promise(function(resolve, reject) {
    if (typeof glStyle != "object") {
      glStyle = JSON.parse(glStyle);
    }
    if (glStyle.version != 8) {
      return reject(new Error("glStyle version 8 required."));
    }
    if (!(layer2 instanceof Vector_default || layer2 instanceof VectorTile_default2)) {
      return reject(new Error("Can only apply to VectorLayer or VectorTileLayer"));
    }
    var spriteScale, spriteData, spriteImageUrl, style;
    function onChange() {
      if (!style && (!glStyle.sprite || spriteData)) {
        style = stylefunction_default(layer2, glStyle, source3, resolutions, spriteData, spriteImageUrl, getFonts);
        if (!layer2.getStyle()) {
          reject(new Error("Nothing to show for source [" + source3 + "]"));
        } else {
          resolve();
        }
      } else if (style) {
        layer2.setStyle(style);
        resolve();
      } else {
        reject(new Error("Something went wrong trying to apply style."));
      }
    }
    if (glStyle.sprite) {
      spriteScale = window.devicePixelRatio >= 1.5 ? 0.5 : 1;
      var sizeFactor_1 = spriteScale == 0.5 ? "@2x" : "";
      var spriteUrl_1 = toSpriteUrl(glStyle.sprite, path, sizeFactor_1 + ".json");
      fetch(spriteUrl_1, { credentials: "same-origin" }).then(function(response) {
        if (!response.ok && sizeFactor_1 !== "") {
          spriteUrl_1 = toSpriteUrl(glStyle.sprite, path, ".json");
          return fetch(spriteUrl_1, { credentials: "same-origin" });
        } else {
          return response;
        }
      }).then(function(response) {
        if (response.ok) {
          return response.json();
        } else {
          reject(new Error("Problem fetching sprite from " + spriteUrl_1 + ": " + response.statusText));
        }
      }).then(function(spritesJson) {
        if (spritesJson === void 0) {
          return reject(new Error("No sprites found."));
        }
        spriteData = spritesJson;
        spriteImageUrl = toSpriteUrl(glStyle.sprite, path, sizeFactor_1 + ".png");
        onChange();
      }).catch(function(err) {
        reject(new Error("Sprites cannot be loaded: " + spriteUrl_1 + ": " + err.message));
      });
    } else {
      onChange();
    }
  });
}
function extentFromTileJSON(tileJSON) {
  var bounds = tileJSON.bounds;
  if (bounds) {
    var ll = fromLonLat([bounds[0], bounds[1]]);
    var tr = fromLonLat([bounds[2], bounds[3]]);
    return [ll[0], ll[1], tr[0], tr[1]];
  }
}
function setupVectorSource(glSource, url2) {
  glSource = assign2({}, glSource);
  var cacheKey = JSON.stringify(glSource);
  var tilejson = tilejsonCache[cacheKey];
  if (!tilejson) {
    tilejson = new TileJSON_default({
      url: glSource.tiles ? void 0 : url2,
      tileJSON: glSource.tiles ? glSource : void 0
    });
    tilejsonCache[cacheKey] = tilejson;
  }
  return new Promise(function(resolve) {
    var key = tilejson.on("change", function() {
      var state = tilejson.getState();
      if (state === "ready") {
        var tileJSONDoc = tilejson.getTileJSON();
        var tiles = Array.isArray(tileJSONDoc.tiles) ? tileJSONDoc.tiles : [tileJSONDoc.tiles];
        if (url2) {
          for (var i = 0, ii = tiles.length; i < ii; ++i) {
            var tile = tiles[i];
            if (tile.indexOf("http") != 0) {
              tiles[i] = url2.replace(/\/?$/, "/") + tile.replace(/^\//, "");
            }
          }
        }
        var tileGrid = tilejson.getTileGrid();
        var extent = extentFromTileJSON(tileJSONDoc);
        var minZoom = tileJSONDoc.minzoom || 0;
        var maxZoom = tileJSONDoc.maxzoom || 22;
        var source3 = tilejson.get("ol-source");
        if (source3 === void 0) {
          source3 = new VectorTile_default({
            attributions: tilejson.getAttributions(),
            format: new MVT_default(),
            tileGrid: new TileGrid_default({
              origin: tileGrid.getOrigin(0),
              extent: extent || tileGrid.getExtent(),
              minZoom,
              resolutions: defaultResolutions.slice(0, maxZoom + 1),
              tileSize: 512
            }),
            urls: tiles
          });
          tilejson.set("ol-source", source3);
        }
        unByKey(key);
        resolve(source3);
      } else if (state === "error") {
        tilejson.set("ol-source", null);
        unByKey(key);
        resolve(void 0);
      }
    });
    if (tilejson.getState() === "ready") {
      tilejson.changed();
    }
  });
}
var geoJsonFormat = new GeoJSON_default();

// node_modules/ol/layer/MapboxVector.js
var __extends10 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var mapboxBaseUrl = "https://api.mapbox.com";
function getMapboxPath(url2) {
  var startsWith = "mapbox://";
  if (url2.indexOf(startsWith) !== 0) {
    return "";
  }
  return url2.slice(startsWith.length);
}
function normalizeSpriteUrl(url2, token) {
  var mapboxPath = getMapboxPath(url2);
  if (!mapboxPath) {
    return url2;
  }
  var startsWith = "sprites/";
  if (mapboxPath.indexOf(startsWith) !== 0) {
    throw new Error("unexpected sprites url: " + url2);
  }
  var sprite = mapboxPath.slice(startsWith.length);
  return mapboxBaseUrl + "/styles/v1/" + sprite + "/sprite?access_token=" + token;
}
function normalizeGlyphsUrl(url2, token) {
  var mapboxPath = getMapboxPath(url2);
  if (!mapboxPath) {
    return url2;
  }
  var startsWith = "fonts/";
  if (mapboxPath.indexOf(startsWith) !== 0) {
    throw new Error("unexpected fonts url: " + url2);
  }
  var font = mapboxPath.slice(startsWith.length);
  return mapboxBaseUrl + "/fonts/v1/" + font + "/0-255.pbf?access_token=" + token;
}
function normalizeStyleUrl(url2, token) {
  var mapboxPath = getMapboxPath(url2);
  if (!mapboxPath) {
    return url2;
  }
  var startsWith = "styles/";
  if (mapboxPath.indexOf(startsWith) !== 0) {
    throw new Error("unexpected style url: " + url2);
  }
  var style = mapboxPath.slice(startsWith.length);
  return mapboxBaseUrl + "/styles/v1/" + style + "?&access_token=" + token;
}
function normalizeSourceUrl(url2, token) {
  var mapboxPath = getMapboxPath(url2);
  if (!mapboxPath) {
    return url2;
  }
  return "https://{a-d}.tiles.mapbox.com/v4/" + mapboxPath + "/{z}/{x}/{y}.vector.pbf?access_token=" + token;
}
var ErrorEvent = function(_super) {
  __extends10(ErrorEvent2, _super);
  function ErrorEvent2(error2) {
    var _this = _super.call(this, EventType_default.ERROR) || this;
    _this.error = error2;
    return _this;
  }
  return ErrorEvent2;
}(Event_default);
var SourceType = {
  VECTOR: "vector"
};
var MapboxVectorLayer = function(_super) {
  __extends10(MapboxVectorLayer2, _super);
  function MapboxVectorLayer2(options) {
    var _this = this;
    var declutter = "declutter" in options ? options.declutter : true;
    var source3 = new VectorTile_default({
      state: State_default.LOADING,
      format: new MVT_default()
    });
    _this = _super.call(this, {
      source: source3,
      declutter,
      className: options.className,
      opacity: options.opacity,
      visible: options.visible,
      zIndex: options.zIndex,
      minResolution: options.minResolution,
      maxResolution: options.maxResolution,
      minZoom: options.minZoom,
      maxZoom: options.maxZoom,
      renderOrder: options.renderOrder,
      renderBuffer: options.renderBuffer,
      renderMode: options.renderMode,
      map: options.map,
      updateWhileAnimating: options.updateWhileAnimating,
      updateWhileInteracting: options.updateWhileInteracting,
      preload: options.preload,
      useInterimTilesOnError: options.useInterimTilesOnError,
      properties: options.properties
    }) || this;
    _this.sourceId = options.source;
    _this.layers = options.layers;
    _this.accessToken = options.accessToken;
    _this.fetchStyle(options.styleUrl);
    return _this;
  }
  MapboxVectorLayer2.prototype.fetchStyle = function(styleUrl) {
    var _this = this;
    var url2 = normalizeStyleUrl(styleUrl, this.accessToken);
    fetch(url2).then(function(response) {
      if (!response.ok) {
        throw new Error("unexpected response when fetching style: " + response.status);
      }
      return response.json();
    }).then(function(style) {
      _this.onStyleLoad(style);
    }).catch(function(error2) {
      _this.handleError(error2);
    });
  };
  MapboxVectorLayer2.prototype.onStyleLoad = function(style) {
    var _this = this;
    var sourceId;
    var sourceIdOrLayersList;
    if (this.layers) {
      var lookup = {};
      for (var i = 0; i < style.layers.length; ++i) {
        var layer2 = style.layers[i];
        if (layer2.source) {
          lookup[layer2.id] = layer2.source;
        }
      }
      var firstSource = void 0;
      for (var i = 0; i < this.layers.length; ++i) {
        var candidate = lookup[this.layers[i]];
        if (!candidate) {
          this.handleError(new Error("could not find source for " + this.layers[i]));
          return;
        }
        if (!firstSource) {
          firstSource = candidate;
        } else if (firstSource !== candidate) {
          this.handleError(new Error("layers can only use a single source, found " + firstSource + " and " + candidate));
          return;
        }
      }
      sourceId = firstSource;
      sourceIdOrLayersList = this.layers;
    } else {
      sourceId = this.sourceId;
      sourceIdOrLayersList = sourceId;
    }
    if (!sourceIdOrLayersList) {
      sourceId = Object.keys(style.sources)[0];
      sourceIdOrLayersList = sourceId;
    }
    if (style.sprite) {
      style.sprite = normalizeSpriteUrl(style.sprite, this.accessToken);
    }
    if (style.glyphs) {
      style.glyphs = normalizeGlyphsUrl(style.glyphs, this.accessToken);
    }
    var styleSource = style.sources[sourceId];
    if (styleSource.type !== SourceType.VECTOR) {
      this.handleError(new Error("only works for vector sources, found " + styleSource.type));
      return;
    }
    var source3 = this.getSource();
    if (styleSource.url.startsWith("mapbox://") || styleSource.url.indexOf("{z}") !== -1) {
      source3.setUrl(normalizeSourceUrl(styleSource.url, this.accessToken));
      applyStyle(this, style, sourceIdOrLayersList).then(function() {
        source3.setState(State_default.READY);
      }).catch(function(error2) {
        _this.handleError(error2);
      });
    } else {
      setupVectorSource(styleSource, styleSource.url).then(function(source4) {
        applyStyle(_this, style, sourceIdOrLayersList).then(function() {
          _this.setSource(source4);
        }).catch(function(error2) {
          _this.setSource(source4);
          _this.handleError(error2);
        });
      });
    }
  };
  MapboxVectorLayer2.prototype.handleError = function(error2) {
    this.dispatchEvent(new ErrorEvent(error2));
    var source3 = this.getSource();
    source3.setState(State_default.ERROR);
  };
  return MapboxVectorLayer2;
}(VectorTile_default2);
var MapboxVector_default = MapboxVectorLayer;

// node_modules/ol/renderer/canvas/VectorImageLayer.js
var __extends11 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CanvasVectorImageLayerRenderer = function(_super) {
  __extends11(CanvasVectorImageLayerRenderer2, _super);
  function CanvasVectorImageLayerRenderer2(layer2) {
    var _this = _super.call(this, layer2) || this;
    _this.vectorRenderer_ = new VectorLayer_default(layer2);
    _this.layerImageRatio_ = layer2.getImageRatio();
    _this.coordinateToVectorPixelTransform_ = create();
    _this.renderedPixelToCoordinateTransform_ = null;
    return _this;
  }
  CanvasVectorImageLayerRenderer2.prototype.disposeInternal = function() {
    this.vectorRenderer_.dispose();
    _super.prototype.disposeInternal.call(this);
  };
  CanvasVectorImageLayerRenderer2.prototype.getFeatures = function(pixel) {
    if (!this.vectorRenderer_) {
      return new Promise(function(resolve) {
        return resolve([]);
      });
    }
    var vectorPixel = apply(this.coordinateToVectorPixelTransform_, apply(this.renderedPixelToCoordinateTransform_, pixel.slice()));
    return this.vectorRenderer_.getFeatures(vectorPixel);
  };
  CanvasVectorImageLayerRenderer2.prototype.handleFontsChanged = function() {
    this.vectorRenderer_.handleFontsChanged();
  };
  CanvasVectorImageLayerRenderer2.prototype.prepareFrame = function(frameState) {
    var pixelRatio = frameState.pixelRatio;
    var viewState = frameState.viewState;
    var viewResolution = viewState.resolution;
    var hints = frameState.viewHints;
    var vectorRenderer = this.vectorRenderer_;
    var renderedExtent = frameState.extent;
    if (this.layerImageRatio_ !== 1) {
      renderedExtent = renderedExtent.slice(0);
      scaleFromCenter(renderedExtent, this.layerImageRatio_);
    }
    var width = getWidth(renderedExtent) / viewResolution;
    var height = getHeight(renderedExtent) / viewResolution;
    if (!hints[ViewHint_default.ANIMATING] && !hints[ViewHint_default.INTERACTING] && !isEmpty2(renderedExtent)) {
      vectorRenderer.useContainer(null, null, 1);
      var context = vectorRenderer.context;
      var imageFrameState_1 = assign({}, frameState, {
        declutterTree: new RBush(9),
        extent: renderedExtent,
        size: [width, height],
        viewState: assign({}, frameState.viewState, {
          rotation: 0
        })
      });
      var emptyImage_1 = true;
      var image_1 = new ImageCanvas_default(renderedExtent, viewResolution, pixelRatio, context.canvas, function(callback) {
        if (vectorRenderer.prepareFrame(imageFrameState_1) && vectorRenderer.replayGroupChanged) {
          vectorRenderer.clipping = false;
          if (vectorRenderer.renderFrame(imageFrameState_1, null)) {
            vectorRenderer.renderDeclutter(imageFrameState_1);
            emptyImage_1 = false;
          }
          callback();
        }
      });
      image_1.addEventListener(EventType_default.CHANGE, function() {
        if (image_1.getState() !== ImageState_default.LOADED) {
          return;
        }
        this.image_ = emptyImage_1 ? null : image_1;
        var imageResolution = image_1.getResolution();
        var imagePixelRatio = image_1.getPixelRatio();
        var renderedResolution = imageResolution * pixelRatio / imagePixelRatio;
        this.renderedResolution = renderedResolution;
        this.coordinateToVectorPixelTransform_ = compose(this.coordinateToVectorPixelTransform_, width / 2, height / 2, 1 / renderedResolution, -1 / renderedResolution, 0, -viewState.center[0], -viewState.center[1]);
      }.bind(this));
      image_1.load();
    }
    if (this.image_) {
      this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();
    }
    return !!this.image_;
  };
  CanvasVectorImageLayerRenderer2.prototype.preRender = function() {
  };
  CanvasVectorImageLayerRenderer2.prototype.postRender = function() {
  };
  CanvasVectorImageLayerRenderer2.prototype.renderDeclutter = function() {
  };
  CanvasVectorImageLayerRenderer2.prototype.forEachFeatureAtCoordinate = function(coordinate, frameState, hitTolerance, callback, matches) {
    if (this.vectorRenderer_) {
      return this.vectorRenderer_.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches);
    } else {
      return _super.prototype.forEachFeatureAtCoordinate.call(this, coordinate, frameState, hitTolerance, callback, matches);
    }
  };
  return CanvasVectorImageLayerRenderer2;
}(ImageLayer_default);
var VectorImageLayer_default = CanvasVectorImageLayerRenderer;

// node_modules/ol/layer/VectorImage.js
var __extends12 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VectorImageLayer = function(_super) {
  __extends12(VectorImageLayer2, _super);
  function VectorImageLayer2(opt_options) {
    var _this = this;
    var options = opt_options ? opt_options : {};
    var baseOptions = assign({}, options);
    delete baseOptions.imageRatio;
    _this = _super.call(this, baseOptions) || this;
    _this.imageRatio_ = options.imageRatio !== void 0 ? options.imageRatio : 1;
    return _this;
  }
  VectorImageLayer2.prototype.getImageRatio = function() {
    return this.imageRatio_;
  };
  VectorImageLayer2.prototype.createRenderer = function() {
    return new VectorImageLayer_default(this);
  };
  return VectorImageLayer2;
}(BaseVector_default);
var VectorImage_default = VectorImageLayer;

// node_modules/ol/webgl/TileTexture.js
var __extends13 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
function bindAndConfigure(gl, texture) {
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
}
function uploadImageTexture(gl, texture, image) {
  bindAndConfigure(gl, texture);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
}
function uploadDataTexture(helper, texture, data, size, bandCount) {
  var gl = helper.getGL();
  bindAndConfigure(gl, texture);
  var format;
  switch (bandCount) {
    case 1: {
      format = gl.LUMINANCE;
      break;
    }
    case 2: {
      format = gl.LUMINANCE_ALPHA;
      break;
    }
    case 3: {
      format = gl.RGB;
      break;
    }
    case 4: {
      format = gl.RGBA;
      break;
    }
    default: {
      throw new Error("Unsupported number of bands: " + bandCount);
    }
  }
  var textureType;
  if (data instanceof Float32Array) {
    textureType = gl.FLOAT;
    helper.getExtension("OES_texture_float");
    helper.getExtension("OES_texture_float_linear");
  } else {
    textureType = gl.UNSIGNED_BYTE;
  }
  gl.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, format, textureType, data);
}
var TileTexture = function(_super) {
  __extends13(TileTexture2, _super);
  function TileTexture2(tile, grid, helper) {
    var _this = _super.call(this) || this;
    _this.tile;
    _this.textures = [];
    _this.handleTileChange_ = _this.handleTileChange_.bind(_this);
    _this.size = toSize(grid.getTileSize(tile.tileCoord[0]));
    _this.bandCount = NaN;
    _this.helper_ = helper;
    var coords = new Buffer_default(ARRAY_BUFFER, STATIC_DRAW);
    coords.fromArray([
      0,
      1,
      1,
      1,
      1,
      0,
      0,
      0
    ]);
    helper.flushBufferData(coords);
    _this.coords = coords;
    _this.setTile(tile);
    return _this;
  }
  TileTexture2.prototype.setTile = function(tile) {
    if (tile !== this.tile) {
      if (this.tile) {
        this.tile.removeEventListener(EventType_default.CHANGE, this.handleTileChange_);
      }
      this.tile = tile;
      this.textures.length = 0;
      this.loaded = tile.getState() === TileState_default.LOADED;
      if (this.loaded) {
        this.uploadTile_();
      } else {
        tile.addEventListener(EventType_default.CHANGE, this.handleTileChange_);
      }
    }
  };
  TileTexture2.prototype.uploadTile_ = function() {
    var helper = this.helper_;
    var gl = helper.getGL();
    var tile = this.tile;
    if (tile instanceof ImageTile_default) {
      var texture = gl.createTexture();
      this.textures.push(texture);
      this.bandCount = 4;
      uploadImageTexture(gl, texture, tile.getImage());
      return;
    }
    var data = tile.getData();
    var isFloat = data instanceof Float32Array;
    var pixelCount = this.size[0] * this.size[1];
    this.bandCount = data.byteLength / (isFloat ? 4 : 1) / pixelCount;
    var textureCount = Math.ceil(this.bandCount / 4);
    if (textureCount === 1) {
      var texture = gl.createTexture();
      this.textures.push(texture);
      uploadDataTexture(helper, texture, data, this.size, this.bandCount);
      return;
    }
    var DataType = isFloat ? Float32Array : Uint8Array;
    var textureDataArrays = new Array(textureCount);
    for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {
      var texture = gl.createTexture();
      this.textures.push(texture);
      var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;
      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);
    }
    var valueCount = pixelCount * this.bandCount;
    for (var dataIndex = 0; dataIndex < valueCount; ++dataIndex) {
      var bandIndex = dataIndex % this.bandCount;
      var textureBandIndex = bandIndex % 4;
      var textureIndex = Math.floor(bandIndex / 4);
      var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;
      var pixelIndex = Math.floor(dataIndex / this.bandCount);
      textureDataArrays[textureIndex][pixelIndex * bandCount + textureBandIndex] = data[dataIndex];
    }
    for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {
      var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;
      var texture = this.textures[textureIndex];
      var data_1 = textureDataArrays[textureIndex];
      uploadDataTexture(helper, texture, data_1, this.size, bandCount);
    }
  };
  TileTexture2.prototype.handleTileChange_ = function() {
    if (this.tile.getState() === TileState_default.LOADED) {
      this.loaded = true;
      this.uploadTile_();
      this.dispatchEvent(EventType_default.CHANGE);
    }
  };
  TileTexture2.prototype.disposeInternal = function() {
    var gl = this.helper_.getGL();
    this.helper_.deleteBuffer(this.coords);
    for (var i = 0; i < this.textures.length; ++i) {
      gl.deleteTexture(this.textures[i]);
    }
    this.tile.removeEventListener(EventType_default.CHANGE, this.handleTileChange_);
  };
  return TileTexture2;
}(Target_default);
var TileTexture_default = TileTexture;

// node_modules/ol/renderer/webgl/TileLayer.js
var __extends14 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Uniforms = {
  TILE_TEXTURE_PREFIX: "u_tileTexture",
  TILE_TRANSFORM: "u_tileTransform",
  TRANSITION_ALPHA: "u_transitionAlpha",
  DEPTH: "u_depth",
  TEXTURE_PIXEL_WIDTH: "u_texturePixelWidth",
  TEXTURE_PIXEL_HEIGHT: "u_texturePixelHeight",
  RESOLUTION: "u_resolution",
  ZOOM: "u_zoom"
};
var Attributes = {
  TEXTURE_COORD: "a_textureCoord"
};
var attributeDescriptions = [
  {
    name: Attributes.TEXTURE_COORD,
    size: 2,
    type: AttributeType.FLOAT
  }
];
var empty = {};
function depthForZ(z) {
  return 2 * (1 - 1 / (z + 1)) - 1;
}
function addTileTextureToLookup(tileTexturesByZ, tileTexture, z) {
  if (!(z in tileTexturesByZ)) {
    tileTexturesByZ[z] = [];
  }
  tileTexturesByZ[z].push(tileTexture);
}
function getRenderExtent(frameState, extent) {
  var layerState = frameState.layerStatesArray[frameState.layerIndex];
  if (layerState.extent) {
    extent = getIntersection(extent, fromUserExtent(layerState.extent, frameState.viewState.projection));
  }
  return extent;
}
var WebGLTileLayerRenderer = function(_super) {
  __extends14(WebGLTileLayerRenderer2, _super);
  function WebGLTileLayerRenderer2(tileLayer, options) {
    var _this = _super.call(this, tileLayer, {
      uniforms: options.uniforms,
      className: options.className
    }) || this;
    _this.tileTransform_ = create();
    _this.tempMat4_ = create2();
    _this.tempTileRange_ = new TileRange_default(0, 0, 0, 0);
    _this.tempTileCoord_ = createOrUpdate(0, 0, 0);
    _this.tempSize_ = [0, 0];
    _this.program_ = _this.helper.getProgram(options.fragmentShader, options.vertexShader);
    var indices = new Buffer_default(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);
    indices.fromArray([0, 1, 3, 1, 2, 3]);
    _this.helper.flushBufferData(indices);
    _this.indices_ = indices;
    var cacheSize = options.cacheSize !== void 0 ? options.cacheSize : 512;
    _this.tileTextureCache_ = new LRUCache_default(cacheSize);
    _this.renderedOpacity_ = NaN;
    return _this;
  }
  WebGLTileLayerRenderer2.prototype.isDrawableTile = function(tile) {
    var tileLayer = this.getLayer();
    var tileState = tile.getState();
    var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
    return tileState == TileState_default.LOADED || tileState == TileState_default.EMPTY || tileState == TileState_default.ERROR && !useInterimTilesOnError;
  };
  WebGLTileLayerRenderer2.prototype.prepareFrame = function(frameState) {
    if (isEmpty2(getRenderExtent(frameState, frameState.extent))) {
      return false;
    }
    var source3 = this.getLayer().getSource();
    if (!source3) {
      return false;
    }
    return source3.getState() === State_default.READY;
  };
  WebGLTileLayerRenderer2.prototype.enqueueTiles = function(frameState, extent, z, tileTexturesByZ) {
    var viewState = frameState.viewState;
    var tileLayer = this.getLayer();
    var tileSource = tileLayer.getSource();
    var tileGrid = tileSource.getTileGridForProjection(viewState.projection);
    var tileTextureCache = this.tileTextureCache_;
    var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
    var tileSourceKey = getUid(tileSource);
    if (!(tileSourceKey in frameState.wantedTiles)) {
      frameState.wantedTiles[tileSourceKey] = {};
    }
    var wantedTiles = frameState.wantedTiles[tileSourceKey];
    var tileResolution = tileGrid.getResolution(z);
    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
        var tileCoord = createOrUpdate(z, x, y, this.tempTileCoord_);
        var tileCoordKey = getKey(tileCoord);
        var tileTexture = void 0, tile = void 0;
        if (tileTextureCache.containsKey(tileCoordKey)) {
          tileTexture = tileTextureCache.get(tileCoordKey);
          tile = tileTexture.tile;
        }
        if (!tileTexture || tileTexture.tile.key !== tileSource.getKey()) {
          tile = tileSource.getTile(z, x, y, frameState.pixelRatio, viewState.projection);
          if (!tileTexture) {
            tileTexture = new TileTexture_default(tile, tileGrid, this.helper);
            tileTextureCache.set(tileCoordKey, tileTexture);
          } else {
            tileTexture.setTile(this.isDrawableTile(tile) ? tile : tile.getInterimTile());
          }
        }
        addTileTextureToLookup(tileTexturesByZ, tileTexture, z);
        var tileQueueKey = tile.getKey();
        wantedTiles[tileQueueKey] = true;
        if (tile.getState() === TileState_default.IDLE) {
          if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {
            frameState.tileQueue.enqueue([
              tile,
              tileSourceKey,
              tileGrid.getTileCoordCenter(tileCoord),
              tileResolution
            ]);
          }
        }
      }
    }
  };
  WebGLTileLayerRenderer2.prototype.renderFrame = function(frameState) {
    this.preRender(frameState);
    var viewState = frameState.viewState;
    var layerState = frameState.layerStatesArray[frameState.layerIndex];
    var extent = getRenderExtent(frameState, frameState.extent);
    var tileLayer = this.getLayer();
    var tileSource = tileLayer.getSource();
    var tileGrid = tileSource.getTileGridForProjection(viewState.projection);
    var z = tileGrid.getZForResolution(viewState.resolution, tileSource.zDirection);
    var tileTexturesByZ = {};
    if (frameState.nextExtent) {
      var targetZ = tileGrid.getZForResolution(viewState.nextResolution, tileSource.zDirection);
      var nextExtent = getRenderExtent(frameState, frameState.nextExtent);
      this.enqueueTiles(frameState, nextExtent, targetZ, tileTexturesByZ);
    }
    this.enqueueTiles(frameState, extent, z, tileTexturesByZ);
    var alphaLookup = {};
    var uid = getUid(this);
    var time = frameState.time;
    var blend = false;
    var tileTextures = tileTexturesByZ[z];
    for (var i = 0, ii = tileTextures.length; i < ii; ++i) {
      var tileTexture = tileTextures[i];
      var tile = tileTexture.tile;
      var tileCoord = tile.tileCoord;
      if (tileTexture.loaded) {
        var alpha = tile.getAlpha(uid, time);
        if (alpha === 1) {
          tile.endTransition(uid);
          continue;
        }
        blend = true;
        var tileCoordKey = getKey(tileCoord);
        alphaLookup[tileCoordKey] = alpha;
      }
      var coveredByChildren = this.findAltTiles_(tileGrid, tileCoord, z + 1, tileTexturesByZ);
      if (coveredByChildren) {
        continue;
      }
      for (var parentZ = z - 1; parentZ >= tileGrid.minZoom; --parentZ) {
        var coveredByParent = this.findAltTiles_(tileGrid, tileCoord, parentZ, tileTexturesByZ);
        if (coveredByParent) {
          break;
        }
      }
    }
    this.helper.useProgram(this.program_);
    this.helper.prepareDraw(frameState, !blend);
    var zs = Object.keys(tileTexturesByZ).map(Number).sort(numberSafeCompareFunction);
    var gl = this.helper.getGL();
    var centerX = viewState.center[0];
    var centerY = viewState.center[1];
    for (var j = 0, jj = zs.length; j < jj; ++j) {
      var tileZ = zs[j];
      var tileResolution = tileGrid.getResolution(tileZ);
      var tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);
      var tileOrigin = tileGrid.getOrigin(tileZ);
      var centerI = (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);
      var centerJ = (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);
      var tileScale = viewState.resolution / tileResolution;
      var depth = depthForZ(tileZ);
      var tileTextures_1 = tileTexturesByZ[tileZ];
      for (var i = 0, ii = tileTextures_1.length; i < ii; ++i) {
        var tileTexture = tileTextures_1[i];
        if (!tileTexture.loaded) {
          continue;
        }
        var tile = tileTexture.tile;
        var tileCoord = tile.tileCoord;
        var tileCoordKey = getKey(tileCoord);
        var tileCenterI = tileCoord[1];
        var tileCenterJ = tileCoord[2];
        compose(this.tileTransform_, 0, 0, 2 / (frameState.size[0] * tileScale / tileSize[0]), -2 / (frameState.size[1] * tileScale / tileSize[1]), viewState.rotation, -(centerI - tileCenterI), -(centerJ - tileCenterJ));
        this.helper.setUniformMatrixValue(Uniforms.TILE_TRANSFORM, fromTransform(this.tempMat4_, this.tileTransform_));
        this.helper.bindBuffer(tileTexture.coords);
        this.helper.bindBuffer(this.indices_);
        this.helper.enableAttributes(attributeDescriptions);
        for (var textureIndex = 0; textureIndex < tileTexture.textures.length; ++textureIndex) {
          var textureProperty = "TEXTURE" + textureIndex;
          var uniformName = Uniforms.TILE_TEXTURE_PREFIX + textureIndex;
          gl.activeTexture(gl[textureProperty]);
          gl.bindTexture(gl.TEXTURE_2D, tileTexture.textures[textureIndex]);
          gl.uniform1i(this.helper.getUniformLocation(uniformName), textureIndex);
        }
        var alpha = tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;
        if (alpha < 1) {
          frameState.animate = true;
        }
        this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);
        this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);
        this.helper.setUniformFloatValue(Uniforms.TEXTURE_PIXEL_WIDTH, tileSize[0]);
        this.helper.setUniformFloatValue(Uniforms.TEXTURE_PIXEL_HEIGHT, tileSize[1]);
        this.helper.setUniformFloatValue(Uniforms.RESOLUTION, viewState.resolution);
        this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);
        this.helper.drawElements(0, this.indices_.getSize());
      }
    }
    this.helper.finalizeDraw(frameState);
    var canvas = this.helper.getCanvas();
    var opacity = layerState.opacity;
    if (this.renderedOpacity_ !== opacity) {
      canvas.style.opacity = String(opacity);
      this.renderedOpacity_ = opacity;
    }
    var tileTextureCache = this.tileTextureCache_;
    while (tileTextureCache.canExpireCache()) {
      var tileTexture = tileTextureCache.pop();
      tileTexture.dispose();
    }
    var postRenderFunction = function(map, frameState2) {
      tileSource.expireCache(tileSource.getProjection(), empty);
    };
    frameState.postRenderFunctions.push(postRenderFunction);
    this.postRender(frameState);
    return canvas;
  };
  WebGLTileLayerRenderer2.prototype.findAltTiles_ = function(tileGrid, tileCoord, altZ, tileTexturesByZ) {
    var tileRange = tileGrid.getTileRangeForTileCoordAndZ(tileCoord, altZ, this.tempTileRange_);
    if (!tileRange) {
      return false;
    }
    var covered = true;
    var tileTextureCache = this.tileTextureCache_;
    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
        var cacheKey = getKeyZXY(altZ, x, y);
        var loaded = false;
        if (tileTextureCache.containsKey(cacheKey)) {
          var tileTexture = tileTextureCache.get(cacheKey);
          if (tileTexture.loaded) {
            addTileTextureToLookup(tileTexturesByZ, tileTexture, altZ);
            loaded = true;
          }
        }
        if (!loaded) {
          covered = false;
        }
      }
    }
    return covered;
  };
  WebGLTileLayerRenderer2.prototype.disposeInternal = function() {
    var helper = this.helper;
    var gl = helper.getGL();
    helper.deleteBuffer(this.indices_);
    delete this.indices_;
    gl.deleteProgram(this.program_);
    delete this.program_;
    var tileTextureCache = this.tileTextureCache_;
    tileTextureCache.forEach(function(tileTexture) {
      tileTexture.dispose();
    });
    tileTextureCache.clear();
    delete this.tileTextureCache_;
    _super.prototype.disposeInternal.call(this);
  };
  return WebGLTileLayerRenderer2;
}(Layer_default3);
WebGLTileLayerRenderer.prototype.getLayer;
var TileLayer_default2 = WebGLTileLayerRenderer;

// node_modules/ol/style/expressions.js
var ValueTypes = {
  NUMBER: 1,
  STRING: 2,
  COLOR: 4,
  BOOLEAN: 8,
  NUMBER_ARRAY: 16,
  ANY: 31,
  NONE: 0
};
var Operators = {};
function getValueType(value) {
  if (typeof value === "number") {
    return ValueTypes.NUMBER;
  }
  if (typeof value === "boolean") {
    return ValueTypes.BOOLEAN;
  }
  if (typeof value === "string") {
    if (isStringColor(value)) {
      return ValueTypes.COLOR | ValueTypes.STRING;
    }
    return ValueTypes.STRING;
  }
  if (!Array.isArray(value)) {
    throw new Error("Unhandled value type: " + JSON.stringify(value));
  }
  var valueArr = value;
  var onlyNumbers = valueArr.every(function(v) {
    return typeof v === "number";
  });
  if (onlyNumbers) {
    if (valueArr.length === 3 || valueArr.length === 4) {
      return ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY;
    }
    return ValueTypes.NUMBER_ARRAY;
  }
  if (typeof valueArr[0] !== "string") {
    throw new Error("Expected an expression operator but received: " + JSON.stringify(valueArr));
  }
  var operator = Operators[valueArr[0]];
  if (operator === void 0) {
    throw new Error("Unrecognized expression operator: " + JSON.stringify(valueArr));
  }
  return operator.getReturnType(valueArr.slice(1));
}
function isTypeUnique(valueType) {
  return log2(valueType) % 1 === 0;
}
function numberToGlsl(v) {
  var s = v.toString();
  return s.indexOf(".") === -1 ? s + ".0" : s;
}
function arrayToGlsl(array2) {
  if (array2.length < 2 || array2.length > 4) {
    throw new Error("`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.");
  }
  return "vec" + array2.length + "(" + array2.map(numberToGlsl).join(", ") + ")";
}
function colorToGlsl(color2) {
  var array2 = asArray(color2).slice();
  if (array2.length < 4) {
    array2.push(1);
  }
  return arrayToGlsl(array2.map(function(c, i) {
    return i < 3 ? c / 255 : c;
  }));
}
function getStringNumberEquivalent(context, string) {
  if (context.stringLiteralsMap[string] === void 0) {
    context.stringLiteralsMap[string] = Object.keys(context.stringLiteralsMap).length;
  }
  return context.stringLiteralsMap[string];
}
function stringToGlsl(context, string) {
  return numberToGlsl(getStringNumberEquivalent(context, string));
}
function expressionToGlsl(context, value, typeHint) {
  if (Array.isArray(value) && typeof value[0] === "string") {
    var operator = Operators[value[0]];
    if (operator === void 0) {
      throw new Error("Unrecognized expression operator: " + JSON.stringify(value));
    }
    return operator.toGlsl(context, value.slice(1), typeHint);
  }
  var valueType = getValueType(value);
  if ((valueType & ValueTypes.NUMBER) > 0) {
    return numberToGlsl(value);
  }
  if ((valueType & ValueTypes.BOOLEAN) > 0) {
    return value.toString();
  }
  if ((valueType & ValueTypes.STRING) > 0 && (typeHint === void 0 || typeHint == ValueTypes.STRING)) {
    return stringToGlsl(context, value.toString());
  }
  if ((valueType & ValueTypes.COLOR) > 0 && (typeHint === void 0 || typeHint == ValueTypes.COLOR)) {
    return colorToGlsl(value);
  }
  if ((valueType & ValueTypes.NUMBER_ARRAY) > 0) {
    return arrayToGlsl(value);
  }
  throw new Error("Unexpected expression " + value + " (expected type " + typeHint + ")");
}
function assertNumber(value) {
  if (!(getValueType(value) & ValueTypes.NUMBER)) {
    throw new Error("A numeric value was expected, got " + JSON.stringify(value) + " instead");
  }
}
function assertNumbers(values) {
  for (var i = 0; i < values.length; i++) {
    assertNumber(values[i]);
  }
}
function assertString(value) {
  if (!(getValueType(value) & ValueTypes.STRING)) {
    throw new Error("A string value was expected, got " + JSON.stringify(value) + " instead");
  }
}
function assertBoolean(value) {
  if (!(getValueType(value) & ValueTypes.BOOLEAN)) {
    throw new Error("A boolean value was expected, got " + JSON.stringify(value) + " instead");
  }
}
function assertArgsCount(args, count) {
  if (args.length !== count) {
    throw new Error("Exactly " + count + " arguments were expected, got " + args.length + " instead");
  }
}
function assertArgsMinCount(args, count) {
  if (args.length < count) {
    throw new Error("At least " + count + " arguments were expected, got " + args.length + " instead");
  }
}
function assertArgsMaxCount(args, count) {
  if (args.length > count) {
    throw new Error("At most " + count + " arguments were expected, got " + args.length + " instead");
  }
}
function assertArgsEven(args) {
  if (args.length % 2 !== 0) {
    throw new Error("An even amount of arguments was expected, got " + args + " instead");
  }
}
function assertArgsOdd(args) {
  if (args.length % 2 === 0) {
    throw new Error("An odd amount of arguments was expected, got " + args + " instead");
  }
}
function assertUniqueInferredType(args, types3) {
  if (!isTypeUnique(types3)) {
    throw new Error("Could not infer only one type from the following expression: " + JSON.stringify(args));
  }
}
Operators["get"] = {
  getReturnType: function(args) {
    return ValueTypes.ANY;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 1);
    assertString(args[0]);
    var value = args[0].toString();
    if (context.attributes.indexOf(value) === -1) {
      context.attributes.push(value);
    }
    var prefix = context.inFragmentShader ? "v_" : "a_";
    return prefix + value;
  }
};
function uniformNameForVariable(variableName) {
  return "u_var_" + variableName;
}
Operators["var"] = {
  getReturnType: function(args) {
    return ValueTypes.ANY;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 1);
    assertString(args[0]);
    var value = args[0].toString();
    if (context.variables.indexOf(value) === -1) {
      context.variables.push(value);
    }
    return uniformNameForVariable(value);
  }
};
Operators["band"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsMinCount(args, 1);
    assertArgsMaxCount(args, 3);
    var band = args[0];
    if (typeof band !== "number") {
      throw new Error("Band index must be a number");
    }
    var zeroBasedBand = band - 1;
    var colorIndex = Math.floor(zeroBasedBand / 4);
    var bandIndex = zeroBasedBand % 4;
    if (band === context.bandCount && bandIndex === 1) {
      bandIndex = 3;
    }
    if (args.length === 1) {
      return "color" + colorIndex + "[" + bandIndex + "]";
    } else {
      var xOffset = args[1];
      var yOffset = args[2] || 0;
      assertNumber(xOffset);
      assertNumber(yOffset);
      var uniformName = Uniforms.TILE_TEXTURE_PREFIX + colorIndex;
      return "texture2D(" + uniformName + ", v_textureCoord + vec2(" + expressionToGlsl(context, xOffset) + " / " + Uniforms.TEXTURE_PIXEL_WIDTH + ", " + expressionToGlsl(context, yOffset) + " / " + Uniforms.TEXTURE_PIXEL_HEIGHT + "))[" + bandIndex + "]";
    }
  }
};
Operators["time"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 0);
    return "u_time";
  }
};
Operators["zoom"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 0);
    return "u_zoom";
  }
};
Operators["resolution"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 0);
    return "u_resolution";
  }
};
Operators["*"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " * " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators["/"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " / " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators["+"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " + " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators["-"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " - " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators["clamp"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 3);
    assertNumbers(args);
    var min = expressionToGlsl(context, args[1]);
    var max = expressionToGlsl(context, args[2]);
    return "clamp(" + expressionToGlsl(context, args[0]) + ", " + min + ", " + max + ")";
  }
};
Operators["%"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "mod(" + expressionToGlsl(context, args[0]) + ", " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators["^"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "pow(" + expressionToGlsl(context, args[0]) + ", " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators["abs"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 1);
    assertNumbers(args);
    return "abs(" + expressionToGlsl(context, args[0]) + ")";
  }
};
Operators["sin"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 1);
    assertNumbers(args);
    return "sin(" + expressionToGlsl(context, args[0]) + ")";
  }
};
Operators["cos"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 1);
    assertNumbers(args);
    return "cos(" + expressionToGlsl(context, args[0]) + ")";
  }
};
Operators["atan"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER;
  },
  toGlsl: function(context, args) {
    assertArgsMinCount(args, 1);
    assertArgsMaxCount(args, 2);
    assertNumbers(args);
    return args.length === 2 ? "atan(" + expressionToGlsl(context, args[0]) + ", " + expressionToGlsl(context, args[1]) + ")" : "atan(" + expressionToGlsl(context, args[0]) + ")";
  }
};
Operators[">"] = {
  getReturnType: function(args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " > " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators[">="] = {
  getReturnType: function(args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " >= " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators["<"] = {
  getReturnType: function(args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " < " + expressionToGlsl(context, args[1]) + ")";
  }
};
Operators["<="] = {
  getReturnType: function(args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 2);
    assertNumbers(args);
    return "(" + expressionToGlsl(context, args[0]) + " <= " + expressionToGlsl(context, args[1]) + ")";
  }
};
function getEqualOperator(operator) {
  return {
    getReturnType: function(args) {
      return ValueTypes.BOOLEAN;
    },
    toGlsl: function(context, args) {
      assertArgsCount(args, 2);
      var type = ValueTypes.ANY;
      for (var i = 0; i < args.length; i++) {
        type &= getValueType(args[i]);
      }
      if (type === ValueTypes.NONE) {
        throw new Error("All arguments should be of compatible type, got " + JSON.stringify(args) + " instead");
      }
      type &= ~ValueTypes.COLOR;
      return "(" + expressionToGlsl(context, args[0], type) + " " + operator + " " + expressionToGlsl(context, args[1], type) + ")";
    }
  };
}
Operators["=="] = getEqualOperator("==");
Operators["!="] = getEqualOperator("!=");
Operators["!"] = {
  getReturnType: function(args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 1);
    assertBoolean(args[0]);
    return "(!" + expressionToGlsl(context, args[0]) + ")";
  }
};
function getDecisionOperator(operator) {
  return {
    getReturnType: function(args) {
      return ValueTypes.BOOLEAN;
    },
    toGlsl: function(context, args) {
      assertArgsMinCount(args, 2);
      for (var i = 0; i < args.length; i++) {
        assertBoolean(args[i]);
      }
      var result = "";
      result = args.map(function(arg) {
        return expressionToGlsl(context, arg);
      }).join(" " + operator + " ");
      result = "(" + result + ")";
      return result;
    }
  };
}
Operators["all"] = getDecisionOperator("&&");
Operators["any"] = getDecisionOperator("||");
Operators["between"] = {
  getReturnType: function(args) {
    return ValueTypes.BOOLEAN;
  },
  toGlsl: function(context, args) {
    assertArgsCount(args, 3);
    assertNumbers(args);
    var min = expressionToGlsl(context, args[1]);
    var max = expressionToGlsl(context, args[2]);
    var value = expressionToGlsl(context, args[0]);
    return "(" + value + " >= " + min + " && " + value + " <= " + max + ")";
  }
};
Operators["array"] = {
  getReturnType: function(args) {
    return ValueTypes.NUMBER_ARRAY;
  },
  toGlsl: function(context, args) {
    assertArgsMinCount(args, 2);
    assertArgsMaxCount(args, 4);
    assertNumbers(args);
    var parsedArgs = args.map(function(val) {
      return expressionToGlsl(context, val, ValueTypes.NUMBER);
    });
    return "vec" + args.length + "(" + parsedArgs.join(", ") + ")";
  }
};
Operators["color"] = {
  getReturnType: function(args) {
    return ValueTypes.COLOR;
  },
  toGlsl: function(context, args) {
    assertArgsMinCount(args, 3);
    assertArgsMaxCount(args, 4);
    assertNumbers(args);
    var array2 = args;
    if (args.length === 3) {
      array2.push(1);
    }
    var parsedArgs = args.map(function(val, i) {
      return expressionToGlsl(context, val, ValueTypes.NUMBER) + (i < 3 ? " / 255.0" : "");
    });
    return "vec" + args.length + "(" + parsedArgs.join(", ") + ")";
  }
};
Operators["interpolate"] = {
  getReturnType: function(args) {
    var type = ValueTypes.COLOR | ValueTypes.NUMBER;
    for (var i = 3; i < args.length; i += 2) {
      type = type & getValueType(args[i]);
    }
    return type;
  },
  toGlsl: function(context, args, opt_typeHint) {
    assertArgsEven(args);
    assertArgsMinCount(args, 6);
    var type = args[0];
    var interpolation;
    switch (type[0]) {
      case "linear":
        interpolation = 1;
        break;
      case "exponential":
        interpolation = type[1];
        break;
      default:
        interpolation = null;
    }
    if (!interpolation) {
      throw new Error('Invalid interpolation type for "interpolate" operator, received: ' + JSON.stringify(type));
    }
    var typeHint = opt_typeHint !== void 0 ? opt_typeHint : ValueTypes.ANY;
    var outputType = Operators["interpolate"].getReturnType(args) & typeHint;
    assertUniqueInferredType(args, outputType);
    var input = expressionToGlsl(context, args[1]);
    var exponent = numberToGlsl(interpolation);
    var result = "";
    for (var i = 2; i < args.length - 2; i += 2) {
      var stop1 = expressionToGlsl(context, args[i]);
      var output1 = result || expressionToGlsl(context, args[i + 1], outputType);
      var stop2 = expressionToGlsl(context, args[i + 2]);
      var output2 = expressionToGlsl(context, args[i + 3], outputType);
      result = "mix(" + output1 + ", " + output2 + ", pow(clamp((" + input + " - " + stop1 + ") / (" + stop2 + " - " + stop1 + "), 0.0, 1.0), " + exponent + "))";
    }
    return result;
  }
};
Operators["match"] = {
  getReturnType: function(args) {
    var type = ValueTypes.ANY;
    for (var i = 2; i < args.length; i += 2) {
      type = type & getValueType(args[i]);
    }
    type = type & getValueType(args[args.length - 1]);
    return type;
  },
  toGlsl: function(context, args, opt_typeHint) {
    assertArgsEven(args);
    assertArgsMinCount(args, 4);
    var typeHint = opt_typeHint !== void 0 ? opt_typeHint : ValueTypes.ANY;
    var outputType = Operators["match"].getReturnType(args) & typeHint;
    assertUniqueInferredType(args, outputType);
    var input = expressionToGlsl(context, args[0]);
    var fallback = expressionToGlsl(context, args[args.length - 1], outputType);
    var result = null;
    for (var i = args.length - 3; i >= 1; i -= 2) {
      var match = expressionToGlsl(context, args[i]);
      var output = expressionToGlsl(context, args[i + 1], outputType);
      result = "(" + input + " == " + match + " ? " + output + " : " + (result || fallback) + ")";
    }
    return result;
  }
};
Operators["case"] = {
  getReturnType: function(args) {
    var type = ValueTypes.ANY;
    for (var i = 1; i < args.length; i += 2) {
      type = type & getValueType(args[i]);
    }
    type = type & getValueType(args[args.length - 1]);
    return type;
  },
  toGlsl: function(context, args, opt_typeHint) {
    assertArgsOdd(args);
    assertArgsMinCount(args, 3);
    var typeHint = opt_typeHint !== void 0 ? opt_typeHint : ValueTypes.ANY;
    var outputType = Operators["case"].getReturnType(args) & typeHint;
    assertUniqueInferredType(args, outputType);
    for (var i = 0; i < args.length - 1; i += 2) {
      assertBoolean(args[i]);
    }
    var fallback = expressionToGlsl(context, args[args.length - 1], outputType);
    var result = null;
    for (var i = args.length - 3; i >= 0; i -= 2) {
      var condition = expressionToGlsl(context, args[i]);
      var output = expressionToGlsl(context, args[i + 1], outputType);
      result = "(" + condition + " ? " + output + " : " + (result || fallback) + ")";
    }
    return result;
  }
};

// node_modules/ol/webgl/ShaderBuilder.js
var ShaderBuilder = function() {
  function ShaderBuilder2() {
    this.uniforms = [];
    this.attributes = [];
    this.varyings = [];
    this.sizeExpression = "vec2(1.0)";
    this.rotationExpression = "0.0";
    this.offsetExpression = "vec2(0.0)";
    this.colorExpression = "vec4(1.0)";
    this.texCoordExpression = "vec4(0.0, 0.0, 1.0, 1.0)";
    this.discardExpression = "false";
    this.rotateWithView = false;
  }
  ShaderBuilder2.prototype.addUniform = function(name) {
    this.uniforms.push(name);
    return this;
  };
  ShaderBuilder2.prototype.addAttribute = function(name) {
    this.attributes.push(name);
    return this;
  };
  ShaderBuilder2.prototype.addVarying = function(name, type, expression2) {
    this.varyings.push({
      name,
      type,
      expression: expression2
    });
    return this;
  };
  ShaderBuilder2.prototype.setSizeExpression = function(expression2) {
    this.sizeExpression = expression2;
    return this;
  };
  ShaderBuilder2.prototype.setRotationExpression = function(expression2) {
    this.rotationExpression = expression2;
    return this;
  };
  ShaderBuilder2.prototype.setSymbolOffsetExpression = function(expression2) {
    this.offsetExpression = expression2;
    return this;
  };
  ShaderBuilder2.prototype.setColorExpression = function(expression2) {
    this.colorExpression = expression2;
    return this;
  };
  ShaderBuilder2.prototype.setTextureCoordinateExpression = function(expression2) {
    this.texCoordExpression = expression2;
    return this;
  };
  ShaderBuilder2.prototype.setFragmentDiscardExpression = function(expression2) {
    this.discardExpression = expression2;
    return this;
  };
  ShaderBuilder2.prototype.setSymbolRotateWithView = function(rotateWithView) {
    this.rotateWithView = rotateWithView;
    return this;
  };
  ShaderBuilder2.prototype.getSizeExpression = function() {
    return this.sizeExpression;
  };
  ShaderBuilder2.prototype.getOffsetExpression = function() {
    return this.offsetExpression;
  };
  ShaderBuilder2.prototype.getColorExpression = function() {
    return this.colorExpression;
  };
  ShaderBuilder2.prototype.getTextureCoordinateExpression = function() {
    return this.texCoordExpression;
  };
  ShaderBuilder2.prototype.getFragmentDiscardExpression = function() {
    return this.discardExpression;
  };
  ShaderBuilder2.prototype.getSymbolVertexShader = function(forHitDetection) {
    var offsetMatrix = this.rotateWithView ? "u_offsetScaleMatrix * u_offsetRotateMatrix" : "u_offsetScaleMatrix";
    var attributes = this.attributes;
    var varyings = this.varyings;
    if (forHitDetection) {
      attributes = attributes.concat("vec4 a_hitColor");
      varyings = varyings.concat({
        name: "v_hitColor",
        type: "vec4",
        expression: "a_hitColor"
      });
    }
    return "precision mediump float;\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_offsetScaleMatrix;\nuniform mat4 u_offsetRotateMatrix;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\n" + this.uniforms.map(function(uniform) {
      return "uniform " + uniform + ";";
    }).join("\n") + "\nattribute vec2 a_position;\nattribute float a_index;\n" + attributes.map(function(attribute) {
      return "attribute " + attribute + ";";
    }).join("\n") + "\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\n" + varyings.map(function(varying) {
      return "varying " + varying.type + " " + varying.name + ";";
    }).join("\n") + "\nvoid main(void) {\n  mat4 offsetMatrix = " + offsetMatrix + ";\n  vec2 halfSize = " + this.sizeExpression + " * 0.5;\n  vec2 offset = " + this.offsetExpression + ";\n  float angle = " + this.rotationExpression + ";\n  float offsetX;\n  float offsetY;\n  if (a_index == 0.0) {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  } else if (a_index == 1.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y - halfSize.y) * sin(angle);\n    offsetY = (offset.y - halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else if (a_index == 2.0) {\n    offsetX = (offset.x + halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x + halfSize.x) * sin(angle);\n  } else {\n    offsetX = (offset.x - halfSize.x) * cos(angle) + (offset.y + halfSize.y) * sin(angle);\n    offsetY = (offset.y + halfSize.y) * cos(angle) - (offset.x - halfSize.x) * sin(angle);\n  }\n  vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n  vec4 texCoord = " + this.texCoordExpression + ";\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v = a_index == 2.0 || a_index == 3.0 ? 0.0 : 1.0;\n  v_quadCoord = vec2(u, v);\n" + varyings.map(function(varying) {
      return "  " + varying.name + " = " + varying.expression + ";";
    }).join("\n") + "\n}";
  };
  ShaderBuilder2.prototype.getSymbolFragmentShader = function(forHitDetection) {
    var hitDetectionBypass = forHitDetection ? "  if (gl_FragColor.a < 0.1) { discard; } gl_FragColor = v_hitColor;" : "";
    var varyings = this.varyings;
    if (forHitDetection) {
      varyings = varyings.concat({
        name: "v_hitColor",
        type: "vec4",
        expression: "a_hitColor"
      });
    }
    return "precision mediump float;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\n" + this.uniforms.map(function(uniform) {
      return "uniform " + uniform + ";";
    }).join("\n") + "\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\n" + varyings.map(function(varying) {
      return "varying " + varying.type + " " + varying.name + ";";
    }).join("\n") + "\nvoid main(void) {\n  if (" + this.discardExpression + ") { discard; }\n  gl_FragColor = " + this.colorExpression + ";\n  gl_FragColor.rgb *= gl_FragColor.a;\n" + hitDetectionBypass + "\n}";
  };
  return ShaderBuilder2;
}();
function parseLiteralStyle(style) {
  var symbStyle = style.symbol;
  var size = symbStyle.size !== void 0 ? symbStyle.size : 1;
  var color2 = symbStyle.color || "white";
  var texCoord = symbStyle.textureCoord || [0, 0, 1, 1];
  var offset = symbStyle.offset || [0, 0];
  var opacity = symbStyle.opacity !== void 0 ? symbStyle.opacity : 1;
  var rotation = symbStyle.rotation !== void 0 ? symbStyle.rotation : 0;
  var vertContext = {
    inFragmentShader: false,
    variables: [],
    attributes: [],
    stringLiteralsMap: {}
  };
  var parsedSize = expressionToGlsl(vertContext, size, ValueTypes.NUMBER_ARRAY | ValueTypes.NUMBER);
  var parsedOffset = expressionToGlsl(vertContext, offset, ValueTypes.NUMBER_ARRAY);
  var parsedTexCoord = expressionToGlsl(vertContext, texCoord, ValueTypes.NUMBER_ARRAY);
  var parsedRotation = expressionToGlsl(vertContext, rotation, ValueTypes.NUMBER);
  var fragContext = {
    inFragmentShader: true,
    variables: vertContext.variables,
    attributes: [],
    stringLiteralsMap: vertContext.stringLiteralsMap
  };
  var parsedColor = expressionToGlsl(fragContext, color2, ValueTypes.COLOR);
  var parsedOpacity = expressionToGlsl(fragContext, opacity, ValueTypes.NUMBER);
  var opacityFilter = "1.0";
  var visibleSize = "vec2(" + expressionToGlsl(fragContext, size, ValueTypes.NUMBER_ARRAY | ValueTypes.NUMBER) + ").x";
  switch (symbStyle.symbolType) {
    case "square":
      break;
    case "image":
      break;
    case "circle":
      opacityFilter = "(1.0-smoothstep(1.-4./" + visibleSize + ",1.,dot(v_quadCoord-.5,v_quadCoord-.5)*4.))";
      break;
    case "triangle":
      var st = "(v_quadCoord*2.-1.)";
      var a = "(atan(" + st + ".x," + st + ".y))";
      opacityFilter = "(1.0-smoothstep(.5-3./" + visibleSize + ",.5,cos(floor(.5+" + a + "/2.094395102)*2.094395102-" + a + ")*length(" + st + ")))";
      break;
    default:
      throw new Error("Unexpected symbol type: " + symbStyle.symbolType);
  }
  var builder = new ShaderBuilder().setSizeExpression("vec2(" + parsedSize + ")").setRotationExpression(parsedRotation).setSymbolOffsetExpression(parsedOffset).setTextureCoordinateExpression(parsedTexCoord).setSymbolRotateWithView(!!symbStyle.rotateWithView).setColorExpression("vec4(" + parsedColor + ".rgb, " + parsedColor + ".a * " + parsedOpacity + " * " + opacityFilter + ")");
  if (style.filter) {
    var parsedFilter = expressionToGlsl(fragContext, style.filter, ValueTypes.BOOLEAN);
    builder.setFragmentDiscardExpression("!" + parsedFilter);
  }
  var uniforms = {};
  fragContext.variables.forEach(function(varName) {
    var uniformName = uniformNameForVariable(varName);
    builder.addUniform("float " + uniformName);
    uniforms[uniformName] = function() {
      if (!style.variables || style.variables[varName] === void 0) {
        throw new Error("The following variable is missing from the style: " + varName);
      }
      var value = style.variables[varName];
      if (typeof value === "string") {
        value = getStringNumberEquivalent(vertContext, value);
      }
      return value !== void 0 ? value : -9999999;
    };
  });
  if (symbStyle.symbolType === "image" && symbStyle.src) {
    var texture = new Image();
    texture.src = symbStyle.src;
    builder.addUniform("sampler2D u_texture").setColorExpression(builder.getColorExpression() + " * texture2D(u_texture, v_texCoord)");
    uniforms["u_texture"] = texture;
  }
  fragContext.attributes.forEach(function(attrName) {
    if (vertContext.attributes.indexOf(attrName) === -1) {
      vertContext.attributes.push(attrName);
    }
    builder.addVarying("v_" + attrName, "float", "a_" + attrName);
  });
  vertContext.attributes.forEach(function(attrName) {
    builder.addAttribute("float a_" + attrName);
  });
  return {
    builder,
    attributes: vertContext.attributes.map(function(attributeName) {
      return {
        name: attributeName,
        callback: function(feature, props) {
          var value = props[attributeName];
          if (typeof value === "string") {
            value = getStringNumberEquivalent(vertContext, value);
          }
          return value !== void 0 ? value : -9999999;
        }
      };
    }),
    uniforms
  };
}

// node_modules/ol/layer/WebGLPoints.js
var __extends15 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var WebGLPointsLayer = function(_super) {
  __extends15(WebGLPointsLayer2, _super);
  function WebGLPointsLayer2(options) {
    var _this = this;
    var baseOptions = assign({}, options);
    _this = _super.call(this, baseOptions) || this;
    _this.parseResult_ = parseLiteralStyle(options.style);
    _this.hitDetectionDisabled_ = !!options.disableHitDetection;
    return _this;
  }
  WebGLPointsLayer2.prototype.createRenderer = function() {
    return new PointsLayer_default(this, {
      className: this.getClassName(),
      vertexShader: this.parseResult_.builder.getSymbolVertexShader(),
      fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),
      hitVertexShader: !this.hitDetectionDisabled_ && this.parseResult_.builder.getSymbolVertexShader(true),
      hitFragmentShader: !this.hitDetectionDisabled_ && this.parseResult_.builder.getSymbolFragmentShader(true),
      uniforms: this.parseResult_.uniforms,
      attributes: this.parseResult_.attributes
    });
  };
  return WebGLPointsLayer2;
}(Layer_default);
var WebGLPoints_default = WebGLPointsLayer;

// node_modules/ol/layer/WebGLTile.js
var __extends16 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
function parseStyle(style, bandCount) {
  var vertexShader = "\n    attribute vec2 " + Attributes.TEXTURE_COORD + ";\n    uniform mat4 " + Uniforms.TILE_TRANSFORM + ";\n    uniform float " + Uniforms.DEPTH + ";\n\n    varying vec2 v_textureCoord;\n\n    void main() {\n      v_textureCoord = " + Attributes.TEXTURE_COORD + ";\n      gl_Position = " + Uniforms.TILE_TRANSFORM + " * vec4(" + Attributes.TEXTURE_COORD + ", " + Uniforms.DEPTH + ", 1.0);\n    }\n  ";
  var context = {
    inFragmentShader: true,
    variables: [],
    attributes: [],
    stringLiteralsMap: {},
    bandCount
  };
  var pipeline = [];
  if (style.color !== void 0) {
    var color2 = expressionToGlsl(context, style.color, ValueTypes.COLOR);
    pipeline.push("color = " + color2 + ";");
  }
  if (style.contrast !== void 0) {
    var contrast = expressionToGlsl(context, style.contrast, ValueTypes.NUMBER);
    pipeline.push("color.rgb = clamp((" + contrast + " + 1.0) * color.rgb - (" + contrast + " / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));");
  }
  if (style.exposure !== void 0) {
    var exposure = expressionToGlsl(context, style.exposure, ValueTypes.NUMBER);
    pipeline.push("color.rgb = clamp((" + exposure + " + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));");
  }
  if (style.saturation !== void 0) {
    var saturation = expressionToGlsl(context, style.saturation, ValueTypes.NUMBER);
    pipeline.push("\n      float saturation = " + saturation + " + 1.0;\n      float sr = (1.0 - saturation) * 0.2126;\n      float sg = (1.0 - saturation) * 0.7152;\n      float sb = (1.0 - saturation) * 0.0722;\n      mat3 saturationMatrix = mat3(\n        sr + saturation, sr, sr,\n        sg, sg + saturation, sg,\n        sb, sb, sb + saturation\n      );\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\n    ");
  }
  if (style.gamma !== void 0) {
    var gamma = expressionToGlsl(context, style.gamma, ValueTypes.NUMBER);
    pipeline.push("color.rgb = pow(color.rgb, vec3(1.0 / " + gamma + "));");
  }
  if (style.brightness !== void 0) {
    var brightness = expressionToGlsl(context, style.brightness, ValueTypes.NUMBER);
    pipeline.push("color.rgb = clamp(color.rgb + " + brightness + ", vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));");
  }
  var uniforms = {};
  var numVariables = context.variables.length;
  if (numVariables > 1 && !style.variables) {
    throw new Error("Missing variables in style (expected " + context.variables + ")");
  }
  var _loop_1 = function(i2) {
    var variableName = context.variables[i2];
    if (!(variableName in style.variables)) {
      throw new Error("Missing '" + variableName + "' in style variables");
    }
    var uniformName2 = uniformNameForVariable(variableName);
    uniforms[uniformName2] = function() {
      var value = style.variables[variableName];
      if (typeof value === "string") {
        value = getStringNumberEquivalent(context, value);
      }
      return value !== void 0 ? value : -9999999;
    };
  };
  for (var i = 0; i < numVariables; ++i) {
    _loop_1(i);
  }
  var uniformDeclarations = Object.keys(uniforms).map(function(name) {
    return "uniform float " + name + ";";
  });
  var textureCount = Math.ceil(bandCount / 4);
  var colorAssignments = new Array(textureCount);
  for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {
    var uniformName = Uniforms.TILE_TEXTURE_PREFIX + textureIndex;
    uniformDeclarations.push("uniform sampler2D " + uniformName + ";");
    colorAssignments[textureIndex] = "vec4 color" + textureIndex + " = texture2D(" + uniformName + ", v_textureCoord);";
  }
  var fragmentShader = "\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    varying vec2 v_textureCoord;\n    uniform float " + Uniforms.TRANSITION_ALPHA + ";\n    uniform float " + Uniforms.TEXTURE_PIXEL_WIDTH + ";\n    uniform float " + Uniforms.TEXTURE_PIXEL_HEIGHT + ";\n    uniform float " + Uniforms.RESOLUTION + ";\n    uniform float " + Uniforms.ZOOM + ";\n\n    " + uniformDeclarations.join("\n") + "\n\n    void main() {\n      " + colorAssignments.join("\n") + "\n\n      vec4 color = color0;\n\n      " + pipeline.join("\n") + "\n\n      if (color.a == 0.0) {\n        discard;\n      }\n\n      gl_FragColor = color;\n      gl_FragColor.rgb *= gl_FragColor.a;\n      gl_FragColor *= " + Uniforms.TRANSITION_ALPHA + ";\n    }";
  return {
    vertexShader,
    fragmentShader,
    uniforms
  };
}
var WebGLTileLayer = function(_super) {
  __extends16(WebGLTileLayer2, _super);
  function WebGLTileLayer2(opt_options) {
    var _this = this;
    var options = opt_options ? assign({}, opt_options) : {};
    var style = options.style || {};
    delete options.style;
    var cacheSize = options.cacheSize;
    delete options.cacheSize;
    _this = _super.call(this, options) || this;
    _this.style_ = style;
    _this.cacheSize_ = cacheSize;
    return _this;
  }
  WebGLTileLayer2.prototype.createRenderer = function() {
    var source3 = this.getSource();
    var parsedStyle = parseStyle(this.style_, "bandCount" in source3 ? source3.bandCount : 4);
    this.styleVariables_ = this.style_.variables || {};
    return new TileLayer_default2(this, {
      vertexShader: parsedStyle.vertexShader,
      fragmentShader: parsedStyle.fragmentShader,
      uniforms: parsedStyle.uniforms,
      className: this.getClassName(),
      cacheSize: this.cacheSize_
    });
  };
  WebGLTileLayer2.prototype.updateStyleVariables = function(variables) {
    assign(this.styleVariables_, variables);
    this.changed();
  };
  return WebGLTileLayer2;
}(BaseTile_default);
WebGLTileLayer.prototype.dispose;
var WebGLTile_default = WebGLTileLayer;
export {
  Graticule_default as Graticule,
  Group_default as Group,
  Heatmap_default as Heatmap,
  Image_default as Image,
  Layer_default as Layer,
  MapboxVector_default as MapboxVector,
  Tile_default as Tile,
  Vector_default as Vector,
  VectorImage_default as VectorImage,
  VectorTile_default2 as VectorTile,
  WebGLPoints_default as WebGLPoints,
  WebGLTile_default as WebGLTile
};
/*! https://mths.be/punycode v1.3.2 by @mathias */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
//# sourceMappingURL=ol_layer.js.map
